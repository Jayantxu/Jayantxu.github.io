<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flex布局的基本属性介绍</title>
      <link href="/2019/05/13/2019/Flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/05/13/2019/Flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="flex的布局定义："><a href="#flex的布局定义：" class="headerlink" title="flex的布局定义："></a>flex的布局定义：</h4><ul><li>display： flex；</li></ul><p>有所区分出，主轴（main-axis）与交叉轴(cross-axis)</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071004.png" alt="1" title="1"></p><a id="more"></a><h4 id="容器（父元素）有以下六个属性"><a href="#容器（父元素）有以下六个属性" class="headerlink" title="容器（父元素）有以下六个属性"></a>容器（父元素）有以下六个属性</h4><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h5><p>（row/row-reverse/column/column-reverse）</p><ul><li>row : 主轴水平，起点左端</li><li>row-reverse : 主轴水平，起点右端</li><li>column : 主轴垂直，起点上端</li><li>column-reverse : 主轴垂直，起点下端</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071005.png" alt="2" title="2"></p><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><p>(nowrap/wrap/wrap-reverse)</p><ul><li>wrap : 当主轴排列不下时，换行</li><li>nowrap : 不换行</li><li>wrap-reverse : 换行，但转向的</li></ul><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><p>(flex-flow是flex-direction与flex-wrap的简写形式)</p><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><p>： 定义了项目在主轴上的对齐方式<br>(flex-start/ flex-end/ center/ space-between/ space-around)</p><ul><li>flex-start : 主轴开始方向对齐</li><li>flex-end : 主轴结束方向对齐</li><li>center : 主轴方向居中</li><li>space-between : 两端对齐，项目间隙相等</li><li>space-around : 项目两侧间隔相等，间隔是与边框的两倍</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071010.png" alt="3" title="3"></p><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h5><p>：定义了 <strong>每行</strong> 项目的在侧轴方向上的对齐方式</p><ul><li>flex-start : 侧轴开始方向对齐</li><li>flex-end : 侧轴结束方向对齐</li><li>center ： 侧轴居中对齐</li><li>baseline ：项目每一行文字的几线对齐</li><li>stretch : 项目高度为auto时，占满整个容器</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071011.png" alt="4" title="4"></p><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h5><p>： 定义了容器在侧轴方向上有额外空间时，如何排布每一行</p><ul><li>felx-start : 侧轴开始方向对齐</li><li>felx-end : 侧轴结束方向对齐</li><li>center : 侧轴中心对齐</li><li>space-between ： 与侧轴两端对齐，每行轴线间隔平均</li><li>space-around : 每根轴线两侧间隔相等</li><li>stretch : 占满整个侧轴</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071012.png" alt="5" title="5"></p><h4 id="项目（子元素）有以下六个属性"><a href="#项目（子元素）有以下六个属性" class="headerlink" title="项目（子元素）有以下六个属性"></a>项目（子元素）有以下六个属性</h4><h5 id="order"><a href="#order" class="headerlink" title="order"></a>order</h5><p>：定义了项目的排列顺序，数值越小排列越靠前，默认为0</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071013.png" alt="6" title="6"></p><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h5><p>：定义了属性项目的放大比例；<br>默认为0，即使有剩余空间，也不放大；<br>如果所有都为1，他们将等分剩余空间；<br>如果有一个为2，其他为1时，前者占据后者两倍的项目空间；</p><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h5><p>：定义了项目的缩小比例，若项目空间不足时，项目将缩小<br>如果所有都为1，空间不足时，都将等比例缩小；<br>如果有一个为0，其他为1时，前者空间不缩小，后者等比例均分缩小</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071015.jpg" alt="7" title="7"></p><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><p>：定义了在分配多余空间；在分配多余空间之前，项目所占据的主轴空间，根据这个属性，计算主轴是否还有多余空间<br>可以定义和width和height属性一样的值。</p><h5 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h5><p>：flex是flex-grow、flex-shrink、flex-basis的缩写</p><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><p>：定义允许单个项目与其他项目有不一样的侧轴对齐方式，可覆盖align-item</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071016.png" alt="8" title="8"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(三</title>
      <link href="/2019/04/09/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%89/"/>
      <url>/2019/04/09/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="vinyl-fs部分"><a href="#vinyl-fs部分" class="headerlink" title="vinyl-fs部分"></a>vinyl-fs部分</h1><p>当我们进入vinyl-fs的根目录index.js下，我们可以看到vinyl-fs所实现的src、dest接口是被分属于了几个外部模块 =&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们来看一下各自所属的文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 文件的处理上</span></span><br><span class="line">  src: <span class="built_in">require</span>(<span class="string">'./lib/src'</span>),</span><br><span class="line">  dest: <span class="built_in">require</span>(<span class="string">'./lib/dest'</span>),</span><br><span class="line">  symlink: <span class="built_in">require</span>(<span class="string">'./lib/symlink'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="一、glob"><a href="#一、glob" class="headerlink" title="一、glob"></a>一、glob</h2><p>在进入相应的模块方法分析之前，我们先来看一下什么是glob；</p><p>node的glob是指允许你使用一些正则表达式，用于匹配对应规则的文件，</p><a id="more"></a><p>类似于我们通常在gulp打包配置中所写的一样：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'./lib/images/*'</span>, <span class="string">'./lib/images/*/*'</span>])</span><br></pre></td></tr></table></figure></p><p>而这其中即是我们的glob模式，也是如此我们可以匹配我们相应的传入文件。</p><p><strong>接下来，我们将陆续的来看一下</strong>src<strong> 、 </strong>dest<strong> 的具体实现。</strong></p><h2 id="二、src"><a href="#二、src" class="headerlink" title="二、src"></a>二、src</h2><p>我们进入 ./lib/src/index.js 中查看相应的入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gs = <span class="built_in">require</span>(<span class="string">'glob-stream'</span>);</span><br><span class="line"><span class="comment">// 结合流的阵列成使用单个双工流泵和duplexify</span></span><br><span class="line"><span class="comment">// 如果其中一个流关闭/错误，管道中的所有流都将被销毁。</span></span><br><span class="line"><span class="keyword">var</span> pumpify = <span class="built_in">require</span>(<span class="string">'pumpify'</span>);</span><br><span class="line"><span class="comment">// 在transformStream中包装ReadableStream</span></span><br><span class="line"><span class="keyword">var</span> toThrough = <span class="built_in">require</span>(<span class="string">'to-through'</span>);</span><br><span class="line"><span class="keyword">var</span> isValidGlob = <span class="built_in">require</span>(<span class="string">'is-valid-glob'</span>);</span><br><span class="line"><span class="keyword">var</span> createResolver = <span class="built_in">require</span>(<span class="string">'resolve-options'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下各导入模块可以进入相应文件中查看注释分析</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./options'</span>);</span><br><span class="line"><span class="keyword">var</span> prepare = <span class="built_in">require</span>(<span class="string">'./prepare'</span>);</span><br><span class="line"><span class="keyword">var</span> wrapVinyl = <span class="built_in">require</span>(<span class="string">'./wrap-vinyl'</span>);</span><br><span class="line"><span class="keyword">var</span> sourcemap = <span class="built_in">require</span>(<span class="string">'./sourcemap'</span>);</span><br><span class="line"><span class="keyword">var</span> readContents = <span class="built_in">require</span>(<span class="string">'./read-contents'</span>);</span><br><span class="line"><span class="keyword">var</span> resolveSymlinks = <span class="built_in">require</span>(<span class="string">'./resolve-symlinks'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">src</span>(<span class="params">glob, opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处进行默认的配置与传入的配置进行解析配置，详情可见vintl-fs-Test\createResolverTest.js</span></span><br><span class="line">  <span class="comment">// 类似合并默认配置项与用户传入配置项</span></span><br><span class="line">  <span class="keyword">var</span> optResolver = createResolver(config, opt);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有效的glob(简化的正则表达式)</span></span><br><span class="line">  <span class="keyword">if</span> (!isValidGlob(glob)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid glob argument: '</span> + glob);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> streams = [</span><br><span class="line">    <span class="comment">// 使用了glob-stream模块，传入一个(简化的正则表达式)做为第一个参数，opt对象作为第二个参数，</span></span><br><span class="line">    <span class="comment">// 返回创建glob流</span></span><br><span class="line">    gs(glob, opt),</span><br><span class="line">    <span class="comment">// 传入上述的解析配置，创建一个vinly文件对象</span></span><br><span class="line">    wrapVinyl(optResolver),</span><br><span class="line">    <span class="comment">// glob的stat为symlink的情况下，转为硬链接</span></span><br><span class="line">    resolveSymlinks(optResolver),</span><br><span class="line">    <span class="comment">// 进行文件stat以及与optResolver配置选项上进行时间的比较</span></span><br><span class="line">    prepare(optResolver),</span><br><span class="line">    <span class="comment">// 对流进行操作，获取文件内容，写入file.content属性</span></span><br><span class="line">    <span class="comment">// 预设为Buffer是通过readBuffer获取</span></span><br><span class="line">    <span class="comment">// 否则则通过readStream获取</span></span><br><span class="line">    readContents(optResolver),</span><br><span class="line">    <span class="comment">// 对文件的映射，是否开启 sourcemap</span></span><br><span class="line">    sourcemap(optResolver),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    一步步的加工成streams</span></span><br><span class="line"><span class="comment">    传于pumpify</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> outputStream = pumpify.obj(streams);</span><br><span class="line">  <span class="comment">// 返回outputStream作为参数的toThrough流</span></span><br><span class="line">  <span class="keyword">return</span> toThrough(outputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = src;</span><br></pre></td></tr></table></figure><p>至此，简单的将即是我们的gulp.src便是使用于将匹配的文件转换为流的形式进而通过各项处理</p><p><strong>接下来，让我们看一下dest中对stream的处理</strong></p><h2 id="三、dest"><a href="#三、dest" class="headerlink" title="三、dest"></a>三、dest</h2><p>我们依旧进入相应的 ./lib/dest/index.js 中查看其入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dest主要作用是根据src接口接收透过来的输出流，并生成文件于指定文件夹</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 将流信息转为</span></span><br><span class="line"><span class="keyword">var</span> lead = <span class="built_in">require</span>(<span class="string">'lead'</span>);</span><br><span class="line"><span class="comment">// 结合流的阵列成使用单个双工流泵和duplexify</span></span><br><span class="line"><span class="comment">// 如果其中一个流关闭/错误，管道中的所有流都将被销毁。</span></span><br><span class="line"><span class="keyword">var</span> pumpify = <span class="built_in">require</span>(<span class="string">'pumpify'</span>);</span><br><span class="line"><span class="comment">// 在写入文件前确认目标文件夹存在</span></span><br><span class="line"><span class="keyword">var</span> mkdirpStream = <span class="built_in">require</span>(<span class="string">'fs-mkdirp-stream'</span>);</span><br><span class="line"><span class="comment">// 配置选项的解析</span></span><br><span class="line"><span class="keyword">var</span> createResolver = <span class="built_in">require</span>(<span class="string">'resolve-options'</span>);</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./options'</span>);</span><br><span class="line"><span class="comment">// 用于比较</span></span><br><span class="line"><span class="keyword">var</span> prepare = <span class="built_in">require</span>(<span class="string">'./prepare'</span>);</span><br><span class="line"><span class="comment">// 生成sourcemap</span></span><br><span class="line"><span class="keyword">var</span> sourcemap = <span class="built_in">require</span>(<span class="string">'./sourcemap'</span>);</span><br><span class="line"><span class="keyword">var</span> writeContents = <span class="built_in">require</span>(<span class="string">'./write-contents'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folderConfig = &#123;</span><br><span class="line">  outFolder: &#123;</span><br><span class="line">    type: <span class="string">'string'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dest</span>(<span class="params">outFolder, opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果目标outFolder为空---&gt;报错</span></span><br><span class="line">  <span class="keyword">if</span> (!outFolder) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid dest() folder argument.'</span> +</span><br><span class="line">      <span class="string">' Please specify a non-empty string or a function.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 配置与用户传入配置的解析</span></span><br><span class="line">  <span class="keyword">var</span> optResolver = createResolver(config, opt);</span><br><span class="line">  <span class="comment">// 文件路径的配置解析---地址</span></span><br><span class="line">  <span class="keyword">var</span> folderResolver = createResolver(folderConfig, &#123; <span class="attr">outFolder</span>: outFolder &#125;);</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dirpath</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dirMode = optResolver.resolve(<span class="string">'dirMode'</span>, file);</span><br><span class="line"></span><br><span class="line">    callback(<span class="literal">null</span>, file.dirname, dirMode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 流</span></span><br><span class="line">  <span class="keyword">var</span> saveStream = pumpify.obj(</span><br><span class="line">    <span class="comment">// 提取以及校验流信息</span></span><br><span class="line">    prepare(folderResolver, optResolver),</span><br><span class="line">    <span class="comment">// 生成sourcemap地图</span></span><br><span class="line">    sourcemap(optResolver),</span><br><span class="line">    <span class="comment">// 传入解析dirMode的以下方法，...</span></span><br><span class="line">    mkdirpStream.obj(dirpath),</span><br><span class="line">    <span class="comment">// 想合后的相应配置传入writeContents，然后写入相应文件</span></span><br><span class="line">    writeContents(optResolver)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sink the output stream to start flowing</span></span><br><span class="line">  <span class="comment">// 流沉淀为文件</span></span><br><span class="line">  <span class="keyword">return</span> lead(saveStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = dest;</span><br></pre></td></tr></table></figure><p>依据着相应的模块指示，我们也可以大致的清楚了gulp进行打包操作的流程</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(二</title>
      <link href="/2019/04/06/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
      <url>/2019/04/06/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="undertaker模块文件分析"><a href="#undertaker模块文件分析" class="headerlink" title="undertaker模块文件分析"></a>undertaker模块文件分析</h2><p>我们从上一篇的入口文件分析可以得知，<strong>Gulp</strong>进行task、series、parallel等任务时，所执行的方法入口其实来源于<em>undertaker</em>模块</p><p>因此我们也进入相应的<em>undertaker</em>模块一探究竟</p><h2 id="一、undertaker-index-js"><a href="#一、undertaker-index-js" class="headerlink" title="一、undertaker-index.js"></a>一、undertaker-index.js</h2><a id="more"></a><p>undertaker模块下的index.js方法 =&gt;</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node工具函数中的继承</span></span><br><span class="line"><span class="keyword">var</span> inherits = <span class="keyword">require</span>(<span class="string">'util'</span>).inherits;</span><br><span class="line"><span class="comment">// Node中的事件触发器</span></span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="keyword">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultRegistry = <span class="keyword">require</span>(<span class="string">'undertaker-registry'</span>);</span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">require</span>(<span class="string">'./lib/tree'</span>);</span><br><span class="line"><span class="keyword">var</span> task = <span class="keyword">require</span>(<span class="string">'./lib/task'</span>);</span><br><span class="line"><span class="keyword">var</span> series = <span class="keyword">require</span>(<span class="string">'./lib/series'</span>);</span><br><span class="line"><span class="keyword">var</span> lastRun = <span class="keyword">require</span>(<span class="string">'./lib/last-run'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">parallel</span> = <span class="keyword">require</span>(<span class="string">'./lib/parallel'</span>);</span><br><span class="line"><span class="keyword">var</span> registry = <span class="keyword">require</span>(<span class="string">'./lib/registry'</span>);</span><br><span class="line"><span class="keyword">var</span> _getTask = <span class="keyword">require</span>(<span class="string">'./lib/get-task'</span>);</span><br><span class="line"><span class="keyword">var</span> _setTask = <span class="keyword">require</span>(<span class="string">'./lib/set-task'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">inherits(Undertaker, EventEmitter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后继续看一下其他模块方法的具体作用</span></span><br><span class="line">Undertaker.prototype.tree = tree;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.task = task;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.series = series;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.lastRun = lastRun;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.parallel = parallel;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.registry = registry;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._getTask = _getTask;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._setTask = _setTask;</span><br></pre></td></tr></table></figure><p>依旧采用核心工具函数的inherits方法进行构造函数的继承</p><p>inherits(Undertaker, EventEmitter); 此处使得<strong>Undertake</strong>r构造函数继承自<strong>Node</strong>核心模块<strong>EventEmitter</strong> 的原型链上方法，以及将EventEmitter的构造函数绑定在Undertaker构造函数的<strong>super_</strong>上。</p><p>并且将我们在开始部分所require进来的方法函数添加至原始链prototype上，以便调用</p><font color="ffff00"><em>接下来我们来看一下其中还有一个主方法，当中又实现了什么呢 =&gt; ?</em></font><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Undertaker</span><span class="params">(customRegistry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  我们来看一下DefaultRegistry(undertaker-registry)都干了什么</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">this</span>._registry = <span class="keyword">new</span> DefaultRegistry();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 允许用户自定义的寄存器任务</span></span><br><span class="line">  <span class="keyword">if</span> (customRegistry) &#123;</span><br><span class="line">    <span class="keyword">this</span>.registry(customRegistry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// process.env =&gt; 包含对用户环境信息的 对象</span></span><br><span class="line">  <span class="keyword">this</span>._settle = (process.env.UNDERTAKER_SETTLE === <span class="string">'true'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventEmitter.call(this); 将EventEmitter执行函数的this绑定</p><p>this._registry = new DefaultRegistry(); new了一个DefaultRegistry的实例赋予this._registry属性</p><p>// 后两句我们稍后处理</p><p><em>DefaultRegistry</em>来源于<em>undertaker-registry</em></p><p>好的，那让我们现在来看一下，<strong>undertaker-registry</strong> 都将干些什么事。</p><h2 id="二、undertaker-registry-index-js"><a href="#二、undertaker-registry-index-js" class="headerlink" title="二、undertaker-registry - index.js"></a>二、undertaker-registry - index.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 提供了形如get、set的接口,充当寄存器的作用存放着那些任务队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultRegistry</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> DefaultRegistry === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultRegistry();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._tasks = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可能是初始化的作用</span></span><br><span class="line">DefaultRegistry.prototype.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">taker</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上边的_tasks对象中去key=name的那个</span></span><br><span class="line">DefaultRegistry.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._tasks[name];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set的时候,针对传入的name作为key,存放相应的处理方法fn</span></span><br><span class="line">DefaultRegistry.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._tasks[name] = fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DefaultRegistry.prototype.tasks = <span class="function"><span class="keyword">function</span> <span class="title">tasks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 接收一个函数作为累加器-&gt;扩展-&gt;reduce()的用法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>._tasks).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tasks, name</span>) </span>&#123;</span><br><span class="line">    tasks[name] = self.get(name);</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="comment">// &#123;&#125;将作为tasks的初始值-&gt;也就是=&gt; 相当于令一开始的  tasks=&#123;&#125;,  最终返回</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = DefaultRegistry;</span><br></pre></td></tr></table></figure><p>undertaker-registry方法，增加在其构造函数中创建一个空对象_tasks = {}</p><p>并且在其原型链上提供了四个方法</p><ul><li>init</li><li>get</li><li>set</li><li>tasks</li></ul><p>也就是定义了一个内部属性_registry作为寄存器<strong>注册/寄存器模式的实现，提供统一接口来存储和读取 tasks</strong></p><h3 id="回到undertaker-index-js"><a href="#回到undertaker-index-js" class="headerlink" title="回到undertaker-index.js"></a>回到undertaker-index.js</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许用户自定义的寄存器任务</span></span><br><span class="line">  <span class="keyword">if</span> <span class="comment">(customRegistry)</span> &#123;</span><br><span class="line">    this.registry<span class="comment">(customRegistry)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接下来的这一句：</p><p>是根据前部引入的来实现的，那么它具体实现了什么功能呢？<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var registry</span> = require(<span class="string">'./lib/registry'</span>);</span><br></pre></td></tr></table></figure></p><p>我们接下来看一下 =&gt; </p><h2 id="三、-lib-registry"><a href="#三、-lib-registry" class="headerlink" title="三、 ./lib/registry"></a>三、 ./lib/registry</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTasks</span></span>(inst, task, name) &#123;</span><br><span class="line">  inst.<span class="keyword">set</span>(name, task);</span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registry</span></span>(<span class="keyword">new</span><span class="type">Registry</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span><span class="type">Registry</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._registry;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//验证是否有效，主要判断是否带有 .get/.set/.tasks/.init 接口，若不符合则抛出错误</span></span><br><span class="line">  validateRegistry(<span class="keyword">new</span><span class="type">Registry</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tasks = <span class="built_in">this</span>._registry.tasks();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将现有 tasks 拷贝到新的寄存器上</span></span><br><span class="line">  <span class="built_in">this</span>._registry = reduce(tasks, setTasks, <span class="keyword">new</span><span class="type">Registry</span>);</span><br><span class="line">  <span class="comment">//调用初始化接口（无论是否需要，寄存器务必带有一个init接口）</span></span><br><span class="line">  <span class="built_in">this</span>._registry.init(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = registry;</span><br></pre></td></tr></table></figure><p>至此，将来逐步分析其余各任务方法模块的作用</p><p>其中包括</p><p>Undertaker.prototype.tree = tree; </p><p>Undertaker.prototype.task = task; </p><p>Undertaker.prototype.series = series;</p><p>Undertaker.prototype.lastRun = lastRun;</p><p>Undertaker.prototype.parallel = parallel;</p><p>Undertaker.prototype.registry = registry;</p><p>Undertaker.prototype._getTask = _getTask;</p><p>Undertaker.prototype._setTask = _setTask;</p><p>将按以下顺序进行 =&gt; </p><p><strong>/lib/set-task</strong></p><p><strong>/lib/get-task</strong></p><p><strong>/lib/last-run</strong></p><p><strong>/lib/task</strong></p><p><strong>/lib/tree</strong></p><p><strong>/lib/series</strong></p><p><strong>/lib/parallel</strong></p><h2 id="四、-lib-set-task"><a href="#四、-lib-set-task" class="headerlink" title="四、./lib/set-task"></a>四、./lib/set-task</h2><p>set-task</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var WM = require('es6-weak-map');</span></span><br><span class="line"><span class="comment">var metadata = new WM();</span></span><br><span class="line"><span class="comment">=&gt;ES6中的WeakMap新类型,在其中引用的对象不计入垃圾回收机制,例如书中讲可用于存放一些DOM相关对象</span></span><br><span class="line"><span class="comment">=&gt;此处为什么用WeakMap不用Map,可能是方便任务执行结束,有效清理内存</span></span><br><span class="line"><span class="comment">提供get、set等方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set方法采用了map(WeakMap)的数据类型进行存放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露了一个set方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其中对task第一个参数的name进行类型判断=&gt;错误则报</span></span><br><span class="line">  assert(name, <span class="string">'Task name must be specified'</span>);</span><br><span class="line">  assert(<span class="keyword">typeof</span> name === <span class="string">'string'</span>, <span class="string">'Task name must be a string'</span>);</span><br><span class="line">  assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">'Task function must be specified'</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 绑定this, 在this中使用参数 fn 对象的方法以及参数</span></span><br><span class="line">  <span class="comment">// 因为WeakMap中要求的key对象不能被引用过</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">taskWrapper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个新包装this后的函数</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unwrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回原本的fn函数方法</span></span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将name、fn包装</span></span><br><span class="line">  taskWrapper.unwrap = unwrap;</span><br><span class="line">  taskWrapper.displayName = name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`taskWrapper： <span class="subst">$&#123;taskWrapper&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn) || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`meta: <span class="subst">$&#123;meta&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nodes = [];</span><br><span class="line">  <span class="keyword">if</span> (meta.branch) &#123;</span><br><span class="line">    nodes.push(meta.tree);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> task = <span class="keyword">this</span>._registry.set(name, taskWrapper) || taskWrapper;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`task: <span class="subst">$&#123;task&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存入WeakMap对象</span></span><br><span class="line">  metadata.set(task, &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    orig: fn,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: name,</span><br><span class="line">      type: <span class="string">'task'</span>,</span><br><span class="line">      nodes: nodes,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`metadata: <span class="subst">$&#123;metadata.get(task)&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><h2 id="五、-lib-get-task"><a href="#五、-lib-get-task" class="headerlink" title="五、./lib/get-task"></a>五、./lib/get-task</h2><p>get-task方法模块代码很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也就是对undertaker-registry中的get方法提取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从_registry寄存器中get</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._registry.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">get</span>;</span><br></pre></td></tr></table></figure><h2 id="六、-lib-last-run"><a href="#六、-lib-last-run" class="headerlink" title="六、./lib/last-run"></a>六、./lib/last-run</h2><p>用来记录和获取针对某个方法的执行前/后时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// npm中其介绍的功能为,记录函数的时间点 =&gt; 对metadata对象的属性一顿操作</span></span><br><span class="line"><span class="keyword">var</span> retrieveLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastRun</span>(<span class="params">task, timeResolution</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (timeResolution == <span class="literal">null</span>) &#123;</span><br><span class="line">    timeResolution = process.env.UNDERTAKER_TIME_RESOLUTION;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn = task;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> task === <span class="string">'string'</span>) &#123;</span><br><span class="line">    fn = <span class="keyword">this</span>._getTask(task);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (meta) &#123;</span><br><span class="line">    fn = meta.orig || fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> retrieveLastRun(fn, timeResolution);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = lastRun;</span><br></pre></td></tr></table></figure><h2 id="七、-lib-tree"><a href="#七、-lib-tree" class="headerlink" title="七、./lib/tree"></a>七、./lib/tree</h2><p>通过遍历metadata，获取当前注册过的所有任务的metadata</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var defaults = <span class="built_in">require</span>(<span class="string">'object.defaults'</span>);</span><br><span class="line">var map = <span class="built_in">require</span>(<span class="string">'collection-map'</span>);</span><br><span class="line"></span><br><span class="line">var metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line">// 可用于获取当前注册过的所有任务的metadata-WeakMap</span><br><span class="line">// 也就是说,可以获取到当前我们定义了那些任务,对应方法,任务间依赖等关系</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree</span><span class="params">(opts)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  // 此方法会覆盖判断是否存在opts,并覆盖其中的&#123;deep: <span class="literal">false</span>&#125;</span><br><span class="line">  opts = defaults(opts || &#123;&#125;, &#123;</span><br><span class="line">    deep: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 获取寄存器中的tasks</span><br><span class="line">  var tasks = this._registry.tasks();</span><br><span class="line">  </span><br><span class="line">  // 遍历tasks并且返回WeakMap(metadata)的“任务数组” </span><br><span class="line">  var nodes = map(tasks, <span class="function"><span class="keyword">function</span><span class="params">(task)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    var meta = metadata.get(task);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.deep) &#123;</span><br><span class="line">      <span class="keyword">return</span> meta.tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> meta.tree.label;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    label: <span class="string">'Tasks'</span>,</span><br><span class="line">    nodes: nodes,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">var undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line">ut = new undertaker();</span><br><span class="line"></span><br><span class="line">ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'A'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'B'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'C'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'D'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskE'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'E'</span>); cb()&#125;);</span><br><span class="line"></span><br><span class="line">ut.task(<span class="string">'taskC'</span>, ut.series(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>));</span><br><span class="line">ut.task(<span class="string">'taskE'</span>, ut.parallel(<span class="string">'taskC'</span>, <span class="string">'taskD'</span>));</span><br><span class="line"></span><br><span class="line">var tree = ut.tree();</span><br><span class="line">console.<span class="built_in">log</span>(tree);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="八、-lib-task"><a href="#八、-lib-task" class="headerlink" title="八、./lib/task"></a>八、./lib/task</h2><p>使用举例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css_comm'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'1.css'</span>,<span class="string">'2.css'</span>])</span><br><span class="line">      .pipe(<span class="built_in">concat</span>(<span class="string">'common.css'</span>))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./build/css'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处 if判断 写法为处理“新”打包写法</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  function uglify()&#123;</span></span><br><span class="line"><span class="comment">    return gulp.src(['src/*.js'])</span></span><br><span class="line"><span class="comment">        .pipe(uglify())</span></span><br><span class="line"><span class="comment">        .pipe(gulp.dest('dist'));</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  gulp.task(uglify);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'function'</span>) &#123;</span><br><span class="line">    fn = name;</span><br><span class="line">    name = fn.displayName || fn.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当第二个参数为为空不存在时，即是对相应任务的获取----配合上一段  if 一起看</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    gulp.task('css_comm', function() &#123;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._getTask(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调整好关系,再次存入task</span></span><br><span class="line">  <span class="keyword">this</span>._setTask(name, fn);</span><br><span class="line">  <span class="comment">// console.log(`name: $&#123;name&#125;, fn: $&#123;fn&#125;`)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*此两处的_getTask和_setTask=&gt;可以看一下,类似于一开始DefaultRegistry中对tasks中</span></span><br><span class="line"><span class="comment">    任务的操作(get\set)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = task;</span><br></pre></td></tr></table></figure><h2 id="九、-lib-parallel"><a href="#九、-lib-parallel" class="headerlink" title="九、./lib/parallel"></a>九、./lib/parallel</h2><p>this.parallel的使用 =&gt;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line">ut = new undertaker();</span><br><span class="line"></span><br><span class="line">  ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// taskD 需要在 <span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span> 执行完毕后才开始执行，</span><br><span class="line">// 其中 <span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span> 的执行是异步的</span><br><span class="line">ut.task(<span class="string">'taskD'</span>, ut.parallel(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span>));</span><br></pre></td></tr></table></figure><p><strong>那让我们来看一下parallel中分别实现了些什么吧！</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bach = <span class="built_in">require</span>(<span class="string">'bach'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="built_in">require</span>(<span class="string">'./helpers/buildTree'</span>);</span><br><span class="line"><span class="keyword">var</span> normalizeArgs = <span class="built_in">require</span>(<span class="string">'./helpers/normalizeArgs'</span>);</span><br><span class="line"><span class="keyword">var</span> createExtensions = <span class="built_in">require</span>(<span class="string">'./helpers/createExtensions'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> create = <span class="keyword">this</span>._settle ? bach.settleParallel : bach.parallel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据“任务”数组从寄存器中获取展开的任务数组</span></span><br><span class="line">  <span class="keyword">var</span> args = normalizeArgs(<span class="keyword">this</span>._registry, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 为对象扩展新“”对象</span></span><br><span class="line">  <span class="keyword">var</span> extensions = createExtensions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 将参数与扩展的对象(after,before,create,error)做关联</span></span><br><span class="line">  <span class="comment">// 所以我们来看一下它具体实现了些什么 =&gt; </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// bach.settleParallel+</span></span><br><span class="line">  </span><br><span class="line">  (args, extensions) : bach.parallel(args, extensions)</span><br><span class="line">  <span class="keyword">var</span> fn = create(args, extensions);</span><br><span class="line"></span><br><span class="line">  fn.displayName = <span class="string">'&lt;parallel&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  metadata.set(fn, &#123;</span><br><span class="line">    name: fn.displayName,</span><br><span class="line">    branch: <span class="literal">true</span>,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: fn.displayName,</span><br><span class="line">      type: <span class="string">'function'</span>,</span><br><span class="line">      branch: <span class="literal">true</span>,</span><br><span class="line">      nodes: buildTree(args),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = parallel;</span><br></pre></td></tr></table></figure><p>让我们从上到下的分析一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据“任务”数组从寄存器中获取展开的任务数组</span></span><br><span class="line"><span class="keyword">var</span> args = normalizeArgs(<span class="keyword">this</span>._registry, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><p><strong>normalizeArgs</strong> 方法是来源于模块 <strong>./helpers/normalizeArgs</strong></p><p>那让我们转向来看一下此模块</p><h3 id="九-1-、normalizeArgs"><a href="#九-1-、normalizeArgs" class="headerlink" title="九(1)、normalizeArgs"></a>九(1)、normalizeArgs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nODE的断言测试</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于Array.map()的改进版本=&gt;最终返回的也是数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:npm中的讲解</span></span><br><span class="line"><span class="comment">map(['a', 'b', 'c'], function(ele, i) &#123;</span></span><br><span class="line"><span class="comment">  return i + ele;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">//=&gt; ['0a', '1b', '2c']</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">require</span>(<span class="string">'arr-map'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组展开为平面数组,解除嵌套</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flatten(['a', ['b', ['c']], 'd', ['e']]);</span></span><br><span class="line"><span class="comment">//=&gt; ['a', 'b', 'c', 'd', 'e']*/</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="built_in">require</span>(<span class="string">'arr-flatten'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到寄存器以及相应的“任务数组”</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeArgs</span>(<span class="params">registry, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传递入一个一个的“任务”方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFunction</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// task类型判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> task === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从我们寄存器中找到有没有这个key的function,因为存在旧的写法----不知是否有理解错</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    gulp.task('uglify', function()&#123;</span></span><br><span class="line"><span class="comment">        return gulp.src(['src/*.js'])</span></span><br><span class="line"><span class="comment">            .pipe(uglify())</span></span><br><span class="line"><span class="comment">            .pipe(gulp.dest('dist'));</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    gulp.task('default', ['uglify']);</span></span><br><span class="line"><span class="comment">    =&gt;上面的一开始给registry传入的是一个uglify的key</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> fn = registry.get(task);</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    assert(fn, <span class="string">'Task never defined: '</span> + task);</span><br><span class="line">    <span class="comment">// 回</span></span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// “任务数组”展开</span></span><br><span class="line">  <span class="keyword">var</span> flattenArgs = flatten(args);</span><br><span class="line">  <span class="comment">// 根据长度,判断是否写空了</span></span><br><span class="line">  assert(flattenArgs.length, <span class="string">'One or more tasks should be combined using series or parallel'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对“任务数组”的任务进行方法的遍历</span></span><br><span class="line">  <span class="keyword">return</span> map(flattenArgs, getFunction);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = normalizeArgs;</span><br></pre></td></tr></table></figure><p>//通过参数获取存在寄存器（registry）中的 taskFunctions（数组形式）<br>var args = normalizeArgs(this._registry, arguments);</p><p><strong>接下来我们继续阅读下一句：</strong><br>var extensions = createExtensions(this);</p><p>而<strong>createExtensions</strong>是来源于模块<strong>helpers/createExtensions</strong></p><p>那么我们看一下其中实现了什么 = ?</p><h3 id="九-2-、createExtensions"><a href="#九-2-、createExtensions" class="headerlink" title="九(2)、createExtensions"></a>九(2)、createExtensions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用某函数,并记录捕获当前时间戳或者传入时间戳</span></span><br><span class="line"><span class="keyword">var</span> captureLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>).capture;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个function并删除最后一次运行时时间戳</span></span><br><span class="line"><span class="keyword">var</span> releaseLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>).release;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./metadata'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Storage</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.fn = meta.orig || fn;</span><br><span class="line">  <span class="keyword">this</span>.uid = uid++;</span><br><span class="line">  <span class="keyword">this</span>.name = meta.name;</span><br><span class="line">  <span class="keyword">this</span>.branch = meta.branch || <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.captureTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">this</span>.startHr = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Storage.prototype.capture = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  captureLastRun(<span class="keyword">this</span>.fn, <span class="keyword">this</span>.captureTime);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Storage.prototype.release = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  releaseLastRun(<span class="keyword">this</span>.fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createExtensions</span>(<span class="params">ee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用create时候,记录一下相关信息,并返回</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Storage(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span>(<span class="params">storage</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Node获取相对于过去某一刻的时间</span></span><br><span class="line">      storage.startHr = process.hrtime();</span><br><span class="line">      <span class="comment">// Node触发start事件,后面为参数</span></span><br><span class="line">      ee.emit(<span class="string">'start'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    after: <span class="function"><span class="keyword">function</span>(<span class="params">result, storage</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用时判断是否有错,有则爆</span></span><br><span class="line">      <span class="keyword">if</span> (result &amp;&amp; result.state === <span class="string">'error'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.error(result.value, storage);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录当前时间戳</span></span><br><span class="line">      storage.capture();</span><br><span class="line">      <span class="comment">// Node触发stop事件</span></span><br><span class="line">      ee.emit(<span class="string">'stop'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        duration: process.hrtime(storage.startHr),</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">error, storage</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(error)) &#123;</span><br><span class="line">        error = error[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 删除出错的此次执行时间戳</span></span><br><span class="line">      storage.release();</span><br><span class="line">      ee.emit(<span class="string">'error'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        error: error,</span><br><span class="line">        duration: process.hrtime(storage.startHr),</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createExtensions;</span><br></pre></td></tr></table></figure><p>此方法扩展，为变量新增拥有<strong>create</strong>、<strong>before</strong>、<strong>after</strong>、<strong>error</strong>等方法的一个对象</p><p>最终期望将扩展出来的对象与我们的“任务”task关联</p><p><strong>接着我们来看下一句:</strong></p><p>var fn = create(args, extensions);</p><p>create =&gt; var create = this._settle ? bach.settleParallel : bach.parallel;</p><p><strong>bach</strong>模块来源于<strong>bach</strong></p><p>接下来我们再来看一下bach模块实现了些什么 =&gt; ?</p><h3 id="九-3-、bach"><a href="#九-3-、bach" class="headerlink" title="九(3)、bach"></a>九(3)、bach</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  series: <span class="built_in">require</span>(<span class="string">'./lib/series'</span>),</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'./lib/parallel'</span>),</span><br><span class="line">  settleSeries: <span class="built_in">require</span>(<span class="string">'./lib/settleSeries'</span>),</span><br><span class="line">  settleParallel: <span class="built_in">require</span>(<span class="string">'./lib/settleParallel'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而我们所需要用的的parallel是来源于<strong>lib/parallel</strong></p><p>而<strong>lib/parallel</strong>具体代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组取值操作,取第一及最后一个</span></span><br><span class="line"><span class="keyword">var</span> initial = <span class="built_in">require</span>(<span class="string">'array-initial'</span>);</span><br><span class="line"><span class="keyword">var</span> last = <span class="built_in">require</span>(<span class="string">'array-last'</span>);</span><br><span class="line"><span class="comment">// 用于异步化函数</span></span><br><span class="line"><span class="keyword">var</span> asyncDone = <span class="built_in">require</span>(<span class="string">'async-done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowAndLater = <span class="built_in">require</span>(<span class="string">'now-and-later'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">fn, key, cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 那asyncDone又是做什么的呢 =&gt; ?</span></span><br><span class="line">  <span class="comment">// 传入一个方法与回调</span></span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildParallel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 校验传入参数(arguments的合法性)</span></span><br><span class="line">  <span class="keyword">var</span> args = helpers.verifyArguments(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取到最后一个参数,即传入时的extensions,然后执行此方法</span></span><br><span class="line">  <span class="comment">// 如果最后一个参数!==function则return 回</span></span><br><span class="line">  <span class="keyword">var</span> extensions = helpers.getExtensions(last(args));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (extensions) &#123;</span><br><span class="line">    <span class="comment">// 如果扩展对象存在,取第一个参数</span></span><br><span class="line">    args = initial(args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们具体来看一下nowAndLater.map做了什么 =&gt; </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    传入了四个值(args, function iterator(fn, key, cb) &#123;return asyncDone(fn, cb);&#125;, 扩展的对象, done)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">    <span class="comment">//遍历tasks数组，将其生命周期和extensions属性关联起来,且将每个task异步化，且并发执行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parallel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = buildParallel;</span><br></pre></td></tr></table></figure><p>这一段代码中所用的的重要方法函数有这些：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span><span class="params">(fn, key, cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*...省略*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先可以让我们来看一下<strong>async-Done</strong>分别做了什么 =&gt; ？</p><h3 id="九-4-async-Done"><a href="#九-4-async-Done" class="headerlink" title="九(4)async-Done"></a>九(4)async-Done</h3><p>它可以把一个普通函数（传入的第一个参数）异步化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1</span></span><br><span class="line"><span class="keyword">var</span> asyncDone = <span class="built_in">require</span>(<span class="string">'async-done'</span>);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---1--开始'</span>);</span><br><span class="line">    done(<span class="literal">null</span>, <span class="string">'测试AsyncDone---1--结束'</span>)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  成功执行第一个函数时，``error`将为null。</span></span><br><span class="line">  <span class="comment">//  `result`将是第一个函数的结果。</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---2--开始'</span>);</span><br><span class="line">    setTimeout( done.bind(<span class="keyword">this</span>, <span class="literal">null</span>, <span class="string">'测试AsyncDone---2--结束'</span>), <span class="number">1000</span> )</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---3--开始'</span>);</span><br><span class="line">    done(<span class="literal">null</span>, <span class="string">'测试AsyncDone---3--结束'</span>)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>执行的结果 :</strong></p><ul><li>测试AsyncDone—1–开始</li><li>测试AsyncDone—1–结束</li><li>测试AsyncDone—2–开始</li><li>测试AsyncDone—3–开始</li><li>测试AsyncDone—3–结束</li><li>测试AsyncDone—2–结束</li></ul><p>其中第一个参数方法中的done将会提醒第二个参数(callback)去执行相关回调</p><p><strong>接下来我们我们再来看一下parallel的重要部分 :</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而nowAndLater的模块接口来源于<strong>now-and-later</strong></p><p>那我们再来看一下<strong>now-and-later</strong>实现了些什么呢?</p><h3 id="九-5-、now-and-later"><a href="#九-5-、now-and-later" class="headerlink" title="九(5)、now-and-later"></a>九(5)、now-and-later</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> once = <span class="built_in">require</span>(<span class="string">'once'</span>);</span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">values, iterator, extensions, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> extensions === <span class="string">'function'</span>) &#123;</span><br><span class="line">        done = extensions;</span><br><span class="line">        extensions = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> done !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        done = helpers.noop;  <span class="comment">//没有传入done则赋予一个空函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让 done 函数只执行一次</span></span><br><span class="line">    done = once(done);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(values);</span><br><span class="line">    <span class="keyword">var</span> length = keys.length;</span><br><span class="line">    <span class="keyword">var</span> count = length;</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个空的、和values等长的数组</span></span><br><span class="line">    <span class="keyword">var</span> results = helpers.initializeResults(values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * helpers.defaultExtensions(extensions) 返回如下对象：</span></span><br><span class="line"><span class="comment">     *  &#123;</span></span><br><span class="line"><span class="comment">            create: extensions.create || defaultExts.create,</span></span><br><span class="line"><span class="comment">            before: extensions.before || defaultExts.before,</span></span><br><span class="line"><span class="comment">            after: extensions.after || defaultExts.after,</span></span><br><span class="line"><span class="comment">            error: extensions.error || defaultExts.error,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> exts = helpers.defaultExtensions(extensions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; length; idx++) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = keys[idx];</span><br><span class="line">        next(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = values[key];</span><br><span class="line">        <span class="comment">//创建一个 Storage 实例</span></span><br><span class="line">        <span class="keyword">var</span> storage = exts.create(value, key) || &#123;&#125;;</span><br><span class="line">        <span class="comment">//触发'start'事件</span></span><br><span class="line">        exts.before(storage);</span><br><span class="line">        <span class="comment">//利用 async-done 将 taskFunction 转为异步方法并执行</span></span><br><span class="line">        iterator(value, once(handler));</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">//触发'error'事件</span></span><br><span class="line">                exts.error(err, storage);</span><br><span class="line">                <span class="keyword">return</span> done(err, results);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//触发'stop'事件</span></span><br><span class="line">            exts.after(result, storage);</span><br><span class="line">            results[key] = result;</span><br><span class="line">            <span class="keyword">if</span> (--count === <span class="number">0</span>) &#123;</span><br><span class="line">                done(err, results);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = map;</span><br></pre></td></tr></table></figure><p>在这段代码的 map 方法中，通过 for 循环遍历了每个传入 parallel 接口的 taskFunction，然后使用 iterator（async-done）将 taskFunction 异步化并执行（执行完毕会触发 hadler），并将 extensions 的各方法和 task 的生命周期关联起来（比如在任务开始时执行“start”事件、任务出错时执行“error”事件）。 ——[引用自vaoy博客说明]</p><h2 id="十、-lib-series"><a href="#十、-lib-series" class="headerlink" title="十、./lib/series"></a>十、./lib/series</h2><p>series接口的使用:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// taskD 需要在 'taskA', 'taskB', 'taskC' 执行完毕后才开始执行，</span></span><br><span class="line"><span class="comment">// 其中 'taskA', 'taskB', 'taskC' 的执行必须是按顺序一个接一个的</span></span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, ut.series(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span>));</span><br></pre></td></tr></table></figure><p>其实现和parallel是基本一致的，但在series中使用的是nowAndlater的mapSeries接口</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span><span class="built_in">(key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">next</span><span class="built_in">(key</span>) &#123;</span><br><span class="line">        var <span class="keyword">value</span> = values<span class="built_in">[key</span>];</span><br><span class="line"></span><br><span class="line">        var storage = exts.create(<span class="keyword">value</span>,<span class="built_in"> key</span>) || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        exts.before(storage);</span><br><span class="line">        iterator(<span class="keyword">value</span>, once(handler));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> handler(err, result) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                exts<span class="built_in">.error</span>(err, storage);</span><br><span class="line">                <span class="keyword">return</span> done(err, results); //有任务出错，故所有任务应停止调用</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            exts.after(result, storage);</span><br><span class="line">            results<span class="built_in">[key</span>] = result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (++idx &gt;= length) &#123;</span><br><span class="line">                done(err, results); //全部任务已经结束了</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">next</span>(keys[idx]);  //<span class="keyword">next</span>不在是放在外面的循环里，而是在任务的回调里</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处在series接口中通过改动 next 的位置，可以很好地要求传入的任务必须一个接一个去执行（后一个任务在前一个任务执行完毕的回调里才会开始执行）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(一</title>
      <link href="/2019/04/05/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
      <url>/2019/04/05/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p align="center"><br>  <a href="https://gulpjs.com" target="_blank" rel="noopener"><br>    <img height="257" width="114" src="https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png"><br>  </a><br></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>目前工作会依赖于Gulp进行项目的构建打包，也为了可以有更深入的学习心得与收获。因此在此记录对于<em>Gulp</em>源码的阅读、及个人理解</p><p>在总结的markdown 与 <strong>个人博客</strong> 有相关系列文章，在此项目各文件夹的源码中也有相应的源码分析的注释</p><p><em>版本 </em><br><strong>gulp： ^4.0.0 版本为例</strong></p><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><a id="more"></a><p>源码相关：</p><ul><li><p>gulp主入口分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/gulp" target="_blank" rel="noopener">gulp-index.js</a></p></li><li><p>glob-watcher模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/glob-watcher" target="_blank" rel="noopener">glob-watcher-index.js</a></p></li><li><p>undertaker模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/undertaker" target="_blank" rel="noopener">undertaker-index.js</a></p></li><li><p>vinyl-fs模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/vinyl-fs" target="_blank" rel="noopener">vinyl-fs-index.js</a></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此篇分析有内容借鉴于前辈的gulp源码分析博客，深表感谢，在此说明：</p><p><a href="https://www.cnblogs.com/vajoy/p/6349817.html" target="_blank" rel="noopener">gulp源码解析 系列</a></p><p>同时也推荐一个收集丰富gulp资料的GH项目，作为学习之用：</p><p><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">use-gulp</a></p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>作者： JayantXu</p><p>邮箱： <a href="mailto:Jayant89@163.com" target="_blank" rel="noopener">Jayant89@163.com</a></p><p>个人博客： <a href="www.essssss.com">Jayantxu</a></p><p>Github(若对您有所帮助,感谢star)   - ：<a href="https://github.com/Jayantxu/gulp-source" target="_blank" rel="noopener">GitHub</a> </p><p>第一次写源码分析系列，若有不足之处请谅解，对任何内容有所疑问，欢迎联系我。</p><hr><h2 id="gulp-index-js的分析"><a href="#gulp-index-js的分析" class="headerlink" title="gulp-index.js的分析:"></a>gulp-index.js的分析:</h2><h2 id="gulp基本使用"><a href="#gulp基本使用" class="headerlink" title="gulp基本使用"></a>gulp基本使用</h2><p><a href="https://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">gulp-api介绍</a></p><h2 id="入口文件分析"><a href="#入口文件分析" class="headerlink" title="入口文件分析"></a>入口文件分析</h2><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>可以在本文件目录下寻找到index.js，接下来让我们看一下其中都有什么内容 =&gt;</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> util = require(<span class="string">'util'</span>); </span><br><span class="line"><span class="keyword">var</span> Undertaker = require(<span class="string">'undertaker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vfs = require(<span class="string">'vinyl-fs'</span>);<span class="keyword">var</span> watch = require(<span class="string">'glob-watcher'</span>);</span><br><span class="line"></span><br><span class="line">function Gulp() &#123;</span><br><span class="line">  Undertaker.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bind the functions for destructuring</span></span><br><span class="line">  <span class="keyword">this</span>.watch = <span class="keyword">this</span>.watch.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.task = <span class="keyword">this</span>.task.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.series = <span class="keyword">this</span>.series.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.parallel = <span class="keyword">this</span>.parallel.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.registry = <span class="keyword">this</span>.registry.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.tree = <span class="keyword">this</span>.tree.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastRun = <span class="keyword">this</span>.lastRun.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Gulp, Undertaker);</span><br><span class="line"></span><br><span class="line">Gulp.prototype.src = vfs.src;</span><br><span class="line">Gulp.prototype.dest = vfs.dest;</span><br><span class="line">Gulp.prototype.symlink = vfs.symlink;</span><br><span class="line">Gulp.prototype.watch = function(glob, opt, task) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let people use this class from our instance</span></span><br><span class="line">Gulp.prototype.Gulp = Gulp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inst = new Gulp();</span><br><span class="line">module.exports = inst;</span><br></pre></td></tr></table></figure><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>让我们由上到下的看一遍：</p><p>其中，声明了所需要加载的依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node内部util模块，是Node中一个核心的工具函数模块</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行任务管理有关的逻辑,---&gt; gulp.task()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vinyl-fs模块: src/dest/symlink</span></span><br><span class="line"><span class="keyword">var</span> vfs = <span class="built_in">require</span>(<span class="string">'vinyl-fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// npm中介绍为 ： 观察全局并在更改时执行功能，具有用于去抖动和排队的智能默认值。</span></span><br><span class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'glob-watcher'</span>);</span><br></pre></td></tr></table></figure><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>我们接下去看一下<strong>Gulp</strong>这个方法中实现了什么功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Gulp() &#123;</span><br><span class="line">  <span class="comment">// 转this,将Undertaker的方法绑定到this中</span></span><br><span class="line">  Undertaker.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定函数为解构</span></span><br><span class="line">  <span class="keyword">this</span>.watch = <span class="keyword">this</span>.watch.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.task = <span class="keyword">this</span>.task.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.series = <span class="keyword">this</span>.series.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.parallel = <span class="keyword">this</span>.parallel.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.registry = <span class="keyword">this</span>.registry.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.tree = <span class="keyword">this</span>.tree.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastRun = <span class="keyword">this</span>.lastRun.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在此看到我们所用到的gulp.task\gulp.series等方法都是来源于<font color="ff0000"><strong>undertaker</strong></font>这个模块</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承,(构造函数,父类构造函数)</span></span><br><span class="line"><span class="selector-tag">util</span><span class="selector-class">.inherits</span>(Gulp, Undertaker);</span><br></pre></td></tr></table></figure><p>util是Node中的核心工具函数模块，其中的inherits是实现继承的一种方法</p><p><a href="http://nodejs.cn/api/util.html#util_util_inherits_constructor_superconstructor" target="_blank" rel="noopener">Node-Api-util.inherits</a></p><p>其中传入的参数为(子类构造函数, 父类构造函数)</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.src = vfs.src;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.dest = vfs.dest;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.symlink = vfs.symlink;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.watch = function(glob, opt, task) &#123;</span><br><span class="line">  // 省略些许代码<span class="comment">---后续涉及此部分将再提及</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// <span class="type">Let</span> people use this class from our instance</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.<span class="type">Gulp</span> = <span class="type">Gulp</span>;</span><br></pre></td></tr></table></figure><p>第五部分的代码既是将在Gulp的原型peototype上增加部分方法，且来源于<font color="ff0000"><strong>vinyl-fs</strong></font>这个模块</p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inst = <span class="keyword">new</span> Gulp();</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = inst;</span><br></pre></td></tr></table></figure><p>最后一块即是new一个Gulp的实例，并将其暴露出来供调用使用</p><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><p>由此</p><p>我们可以知道我们需要了解gulp的内部执行机制以及流程，我们需要关注于</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undertaker、</span><br><span class="line">vinyl-<span class="built_in">fs</span>、</span><br><span class="line">glob-watcher</span><br></pre></td></tr></table></figure><p>这三模块分别都将实现什么功能。</p><hr><h4 id="题外-gt"><a href="#题外-gt" class="headerlink" title="题外-&gt;"></a>题外-&gt;</h4><h5 id="util-inherits实现了什么？"><a href="#util-inherits实现了什么？" class="headerlink" title="util.inherits实现了什么？"></a>util.inherits实现了什么？</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'base'</span>; </span><br><span class="line">    <span class="keyword">this</span>.base = <span class="number">1991</span>; </span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125; </span><br><span class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sub'</span>; </span><br><span class="line">&#125; </span><br><span class="line">util.inherits(Sub, Base); </span><br><span class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base(); </span><br><span class="line">objBase.showName();  <span class="comment">// base</span></span><br><span class="line">objBase.sayHello(); <span class="comment">// Hello base</span></span><br><span class="line"><span class="built_in">console</span>.log(objBase);  <span class="comment">// Base()</span></span><br><span class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub(); </span><br><span class="line">objSub.showName();  <span class="comment">// sub</span></span><br><span class="line"><span class="comment">// objSub.sayHello();  // is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(objSub);</span><br></pre></td></tr></table></figure><p>在网上寻找的测试，inherits是通过将父类构造函数的原型链复制到子类的原型链上，进而实现的继承，因此我们也只能继承到相应原型链上的方法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">exports.inherits</span> <span class="string">=</span> <span class="string">function(ctor,</span> <span class="string">superCtor)</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">//</span> <span class="string">一些参数的合法性判断，略……</span></span><br><span class="line"></span><br><span class="line">  <span class="string">ctor.super_</span> <span class="string">=</span> <span class="string">superCtor;</span></span><br><span class="line">  <span class="string">ctor.prototype</span> <span class="string">=</span> <span class="string">Object.create(superCtor.prototype,</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    constructor:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">ctor,</span></span><br><span class="line"><span class="attr">      enumerable:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">      writable:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">      configurable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">同时继承的子类也可以通过super_访问到父类的构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">console.log(Sub.super_</span> <span class="string">===</span> <span class="string">Base)</span> <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
            <tag> 2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node读取图片并转Base64</title>
      <link href="/2019/03/30/2019/Node%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E8%BD%ACBase64/"/>
      <url>/2019/03/30/2019/Node%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E8%BD%ACBase64/</url>
      
        <content type="html"><![CDATA[<p>Node作为后端开发时，可以采用读取图片文件，并转为base64编码，使得前端得到展示</p><p>运用到的模块分别有<strong>fs</strong>、<strong>path</strong>、<strong>mime-types</strong></p><p>mime-type需要额外安装，可于项目根目录运行：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="keyword">save</span> mime-<span class="keyword">type</span></span><br></pre></td></tr></table></figure></p><p>并且考虑到后续的读取转化的需要，可将方法使用promise异步，并且在数量不定时可以使用<em>promise.all()</em>进行异步等待</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> mineType = <span class="built_in">require</span>(<span class="string">'mime-types'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  base64img: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base64imgpromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result</span><br><span class="line">      <span class="comment">// 判断传入路径是否为空，空即不存在</span></span><br><span class="line">      <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        resolve(result)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 转换路径</span></span><br><span class="line">      file = path.join(__dirname, <span class="string">'../'</span>, file)</span><br><span class="line">      <span class="keyword">let</span> filePath = path.resolve(file)</span><br><span class="line">      fs.readFile(path.resolve(filePath), <span class="string">'base64'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err + <span class="string">'读取错误'</span>)</span><br><span class="line">          result = &#123;</span><br><span class="line">            code: <span class="string">'1'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            msg: <span class="string">'服务器出错'</span></span><br><span class="line">          &#125;</span><br><span class="line">          reject(result)</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="string">'data:'</span> + mineType.lookup(filePath) + <span class="string">';base64,'</span> + data</span><br><span class="line">        resolve(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> base64imgpromise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当最终我们得到了base64编码的图片后，既可以发送回前端，对img标签的src进行绑定base64，从而在前端页面展示</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid布局</title>
      <link href="/2019/03/26/2019/Grid%E5%B8%83%E5%B1%80/"/>
      <url>/2019/03/26/2019/Grid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>昨天看见阮大神的博客更新Grid布局的相关知识总结，学习相关的知识点</p><font><strong>原文链接：</strong></font> <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰-Grid布局</a><br><a id="more"></a><br><br><font><strong>个人练习小demo：</strong></font><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">网格Grid布局</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网格Grid布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span>: <span class="selector-tag">grid</span>;<span class="comment">/*行内的grid布局*/</span></span></span><br><span class="line"><span class="undefined">grid-template-columns: 100px 100px 100px;</span></span><br><span class="line"><span class="undefined">grid-template-rows: 100px 100px 100px;</span></span><br><span class="line"><span class="undefined">grid-column-gap: 10px;</span></span><br><span class="line"><span class="undefined">grid-row-gap: 10px;</span></span><br><span class="line"><span class="undefined">justify-content: center;</span></span><br><span class="line"><span class="css"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row</span>;<span class="comment">/*布局基准，按行还是列*/</span></span></span><br><span class="line"><span class="undefined">/* grid-template-areas:'header header header'</span></span><br><span class="line"><span class="undefined">'main main aside'</span></span><br><span class="line"><span class="undefined">'footer footer footer'; */</span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="css"><span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span> 设置单元格内容的垂直位置;</span></span><br><span class="line"><span class="undefined">justify-items: 设置单元格内容的水平位置;</span></span><br><span class="line"><span class="undefined">place-items: 合并简写了上述两个;</span></span><br><span class="line"><span class="xml">place-items: <span class="tag">&lt;<span class="name">align-items</span>&gt;</span> <span class="tag">&lt;<span class="name">justify-items</span>&gt;</span>; </span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined">/* </span></span><br><span class="line"><span class="undefined">align-content: 设置整个内容区域在grid容器里的垂直位置;</span></span><br><span class="line"><span class="undefined">justify-content: 设置整个内容区域在grid容器里的水平位置;</span></span><br><span class="line"><span class="undefined">place-content: 合并前两者; */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-a</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: pink;</span></span><br><span class="line"><span class="css"><span class="comment">/*从第几条网格线开始，到第几条网格线结束*/</span></span></span><br><span class="line"><span class="undefined">grid-column-start: 1;</span></span><br><span class="line"><span class="css"><span class="comment">/*左边框的起始线*/</span></span></span><br><span class="line"><span class="undefined">grid-column-end: 3;</span></span><br><span class="line"><span class="css"><span class="comment">/* 右边框的结束线 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* 同理有上下：grid-row-start; grid-row-end */</span></span></span><br><span class="line"><span class="undefined">/* justify-self: 设置单元格内容的水平位置;与justice-items作用一致,但只控制单个项目;</span></span><br><span class="line"><span class="undefined">align-self: 设置单元格内容的垂直位置;与align-items作用一致,但只控制单个项目;</span></span><br><span class="line"><span class="undefined">place-self: 前两者的合并写法; */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-b</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-c</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="css"><span class="comment">/*缩写版：从第几条开始，到第几条结束*/</span></span></span><br><span class="line"><span class="undefined">grid-row: 2/4;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-d</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: yellow;</span></span><br><span class="line"><span class="undefined">grid-column: 2/4;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-e</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: black;</span></span><br><span class="line"><span class="undefined">color: white;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-f</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: grey;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-a"</span>&gt;</span>item-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-b"</span>&gt;</span>item-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-c"</span>&gt;</span>item-c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-d"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-e"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-f"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/03/26/2019/Grid布局/Grid布局.png" alt="Grid布局" title="Grid布局"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Grid </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻止冒泡、默认事件</title>
      <link href="/2019/03/03/2019/%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E3%80%81%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/03/03/2019/%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E3%80%81%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>取消冒泡：</p><p>w3c的方法是e.stopPropagation，IE为e.cancelBubble = true<br>window.event ? window.event.cancelBubble = true : e.stopPropagation</p><p>取消默认：</p><p>w3c的方法是e.prcentDefault()，IE为e.returnValue = false<br>return false;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(e &amp;&amp; e.stopPropagation) &#123;</span></span><br><span class="line"><span class="undefined">      e.stopPropagation();</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(e &amp;&amp; e.prventDefault) &#123;</span></span><br><span class="line"><span class="undefined">      e.prventDefault();</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS清除浮动的几种方式</title>
      <link href="/2019/03/03/2019/CSS%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2019/03/03/2019/CSS%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>2019-3-3更新<br><a id="more"></a></p><font color="#ff0000"><strong>浮动效果重现</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;!-- 浮动效果 --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"parent"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>图：<br><img src="/2019/03/03/2019/CSS清除浮动/浮动重现.png" alt="浮动重现" title="浮动重现"></p><font color="#ff0000"><strong>清除浮动的方式1 clear:both</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*清除浮动方式1 clear:both*/</span></span><br><span class="line"><span class="selector-class">.parent1</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">1000px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child1</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear1</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 清除浮动的方式<span class="number">1</span>,使用额外标签<span class="attribute">clear</span>:both --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"parent1"</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"clear1"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>图：</p><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><font color="#ff0000"><strong>清除浮动的方式2 overflow: hidden</strong></font><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/* 清除浮动方式2,overflow*/</span><br><span class="line">.parent2 &#123;</span><br><span class="line">padding:10px;</span><br><span class="line">width:1000px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">margin-top: 50px;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">.child2 &#123;</span><br><span class="line">float: left;</span><br><span class="line">margin-right: 10px;</span><br><span class="line">width: 50px;</span><br><span class="line">height: 50px;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 清除浮动方式2,使用overflow属性,定义了overflow后，浏览器会自动检查浮动区域高度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 不能和position配合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>图：</p><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><font color="#ff0000"><strong>清除浮动的方式3 定义父元素伪类after清除浮动</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动方式3,:after*/</span></span><br><span class="line"><span class="selector-class">.parent3</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent3</span>:after &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child3</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用伪元素清除浮动:after --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"parent3"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><hr><p>2019-2-2</p><p>经常在各种前端面试题中出现，今天就将原本CSDN博客上总结的清除浮动的方式再次回顾并且搬运过来</p><font color="ff0000"><strong>1</strong></font><p>定义伪类清除<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfloat</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>2</strong></font><p>定义空div进行clear<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfloat</span> &#123; </span><br><span class="line">  <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>3</strong></font><p>为父元素设置高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>4</strong></font><p>为父元素设置overflow:hidden</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden&#125;</span><br></pre></td></tr></table></figure><font color="ff0000"><strong>5</strong></font><p>父元素一并浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>margin重叠以及解决办法</title>
      <link href="/2019/03/01/2019/margin%E9%87%8D%E5%8F%A0%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/01/2019/margin%E9%87%8D%E5%8F%A0%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>先重现一遍两个块级元素在上下margin方向的重叠现象<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 重现浮动 --&gt;</span><br><span class="line"><span class="comment">/* 重现浮动*/</span></span><br><span class="line"><span class="selector-class">.contain</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first"</span>&gt;first &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"second"</span>&gt;second  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重现.png" alt="margin重现" title="margin重现"></p><p>此处我们可以看到，当第一个(first)拥有的margin-bottom：20px;与第二个(second)div块所拥有的margin-top:20px;叠加在了一块</p><p>而我们根据BFC（块级格式化上下文）我们可以在必要时候有效避免这种现象对于我们布局的影响<br>而我们创建BFC的条件有以下几种情况：</p><ul><li>float不是none，使该元素浮动起来</li><li>position的值不是static或者relative</li><li>display的值是inline-block，table-cell， flex，table-caption， inline-flex</li><li>overflow不是visible</li></ul><p>BFC的特征：</p><ul><li>所有子元素包括浮动元素，与容器左边对齐</li><li>属于同一个BFC的父元素与子元素，相邻的<strong>父子</strong>或者<strong>兄弟</strong>间的margin垂直方向会重叠，<strong>若两个元素属于不同BFC</strong>，则垂直方向上不重叠</li><li>可以撑开容器（若子元素是float，则父元素设置overflow：hidden，父元素就形成一个BFC</li></ul><p>因此我们实践尝试如何使用形成BFC解决margin重叠所带来的影响</p><font color="#ff0000"><strong>一</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除margin方式1*/</span></span><br><span class="line"><span class="selector-class">.contain1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 清除，<span class="attribute">margin</span>重叠方式<span class="number">1</span> 通过新增父元素，形成一个新的BFC块 --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain1"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first1"</span>&gt; first <span class="number">1</span>&lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=<span class="string">"overflow:hidden;"</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"second1"</span>&gt; second1&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重叠解决方式1.png" alt="margin重叠解决方式1" title="margin重叠解决方式1"></p><p>我们为second块元素，新增一个父元素，并且设置其overflow，成功使得first1与second1分别归属不同的BFC块，从而结局margin重叠问题。</p><font color="#ff0000"><strong>二</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除margin方式2*/</span></span><br><span class="line"><span class="selector-class">.contain2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 清除<span class="attribute">margin</span>重叠方式<span class="number">2</span>，子元素浮动 :相邻的子元素都浮动，或者下面的那个浮动--&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain2"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first2"</span>&gt; first <span class="number">2</span>&lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"second2"</span> style=<span class="string">"float: left;"</span>&gt; second <span class="number">2</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们使得相邻兄弟元素浮动的形式，满足float不等于none，从而使得second2形成一个新的BFC块，而解决margin重叠的问题</p><p>效果：<br><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重叠解决方式2.png" alt="margin重叠解决方式2" title="margin重叠解决方式2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS省略号实现</title>
      <link href="/2019/03/01/2019/CSS%E7%9C%81%E7%95%A5%E5%8F%B7%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/01/2019/CSS%E7%9C%81%E7%95%A5%E5%8F%B7%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<font><strong>一</strong></font><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"contain"</span>&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain-1"</span>&gt;很多很多很多很多很多很多很多文字[要有固定宽度]&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain-2"</span>&gt;</span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">        [<span class="meta">此设定不适合多行文本</span>]</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain-1</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain-2</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>:white-space;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以关注text-overflow：ellipsis；属性，此属性针对单行文本的末尾显示省略号</p><p>如图：<br><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现1.png," alt="CSS省略号实现1.png" title="CSS省略号实现1.png"></p><font><strong>二</strong></font><p>当目标浏览器内核是webkit、或移动端为主时，可采用针对webkit的私有属性<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-webkit-box-orient:vertical;</span><br><span class="line">-webkit-line-clamp:<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"contain1"</span>&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain1-1"</span>&gt;很多很多很多很多很多很多很多文字&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain1-2"</span>&gt;</span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">        [<span class="meta">有适用范围,仅适用于webkit浏览器及移动端</span>]</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain1-1</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain1-2</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可针对webkit内核的浏览器以及移动端浏览器进行省略号布局</p><p>如图:<br><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现2.png," alt="CSS省略号实现2.png" title="CSS省略号实现2.png"></p><font><strong>三</strong></font><p>使用伪元素问题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contain2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本[利用伪元素,适用性广,在文字未超行的情况下也会出现省略号]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain2</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/*需要额外注意line-height和max-height需要时line-height的整数倍,否则会造成超出文字显示一半的情况,另外如果没有这两个元素,视觉上会有“无论什么情况都带省略号的情况”*/</span></span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain2</span> <span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"..."</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to right,transparent,grey 55%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图:</p><p><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现3.png," alt="CSS省略号实现2.png" title="CSS省略号实现2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp增量编译优化</title>
      <link href="/2019/02/21/2019/Gulp%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/"/>
      <url>/2019/02/21/2019/Gulp%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>总结18年12月Gulp增量编译优化</p><p>实习时候，有一天，照常进行开发的时候，在等待项目运行gulp构建命令之后，等待着构建的完成…</p><p>这时候导师看了一眼，说：“是不是觉得很慢咧，能优化一下就好了”。</p><p>是呀，每次十几秒的等待，真的是很漫长的咧</p><a id="more"></a><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译3.png" alt="gulp增量编译3.png" title="gulp增量编译3.png"></p><p>也就是这样一句话，我想闲下来的时间可以试一试嘛，反正近期需求也不会太过忙碌，而且Gulp相关的命令也不算多，也就是如此，开始了Gulp的重新复习。</p><p><strong><font color="ff0000">开始啦~</font></strong></p><p>先分析了项目的gulpfile.js构建过程</p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译1.png" alt="gulp增量编译1" title="gulp增量编译1"></p><p>可以看到项目原先进行了gulp.task的控制，并将依次进行arrTask中的任务</p><p>而在’clean_build’中，gulp将会清空build打包后的文件，这是不行的，因为我们建立起来的增量编译逻辑是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们需要与未做改变的文件进行比较，然后判断我们是否修改了该文件，如果是，则将进行该文件的处理，如果不是，那我们就不需要处理该文件，这样便可以省去很多重复处理的时间</span><br></pre></td></tr></table></figure></p><p>接下来我们抽出一段公共代码分析与查看其构建原理</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css_comm'</span>, function() &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'1.css'</span>,<span class="string">'2.min.css'</span>,<span class="string">'3.css'</span>,<span class="string">'4.css'</span>])</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">'5.css'</span>)) <span class="comment">// 合并common.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev())    <span class="comment">// 加MD5后缀</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(cleanCss())   <span class="comment">//压缩css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./build/css'</span>)) <span class="comment">// 压缩完</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev.manifest())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./rev/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看完代码，那时候就想嚯，要是我们初步在每一次合并，<font color="ff0000"><strong>未加MD戳</strong></font>之前，以及<font color="ff0000"><strong>未经压缩</strong></font>等操作前对上一次的构建文件进行比较，那么我们就可以抉择出是否继续对该文件进行构建，这样就可以达到我们自动识别构建的目的了。</p><p>因此新建了一个beforebuild文件夹作为中转文件夹用于压缩，加戳之前进行的比较作用</p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译4.png" alt="gulp增量编译4" title="gulp增量编译4"></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译5.png" alt="gulp增量编译5" title="gulp增量编译5"></p><p>于是寻找相应是否有实现此比较功能的gulp包，在npm上找到一个<font color="ff0000"><strong>gulp-changed</strong></font><br>其用法如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">其中的hasChanged可以根据下列三项做比较</span><br><span class="line">changed.compareLastModifiedTime</span><br><span class="line">changed.compareContents</span><br><span class="line">changed<span class="selector-class">.compareSha1Digest</span> (Deprecated)</span><br><span class="line"></span><br><span class="line">可以对内容，最后修改时间等方式对文件作比较，从而判断是否修改过文件。</span><br></pre></td></tr></table></figure></p><font color="ff0000"><em>修改：</em></font><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css_comm'</span>, function() &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'1.css'</span>,<span class="string">'2.min.css'</span>,<span class="string">'3.css'</span>,<span class="string">'4.css'</span>])</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">'5.css'</span>)) <span class="comment">// 合并common.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(changed(<span class="string">'./beforebuild/6.css'</span>,&#123;<span class="attribute">hasChanged</span>: changed.compareLastModifiedTime&#125;)) <span class="comment">//对比中转beforebuild中的6.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./beforebuild/6.css'</span>)) <span class="comment">// 先输出一遍</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev())    <span class="comment">// 加MD5后缀</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(cleanCss())   <span class="comment">//压缩css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./build/css'</span>)) <span class="comment">// 压缩完</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev.manifest())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./rev/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>关键之处在于添加了此两行对比代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.pipe</span>(changed(<span class="string">'./beforebuild/6.css'</span>,&#123;<span class="attribute">hasChanged</span>: changed.compareLastModifiedTime&#125;)) <span class="comment">//对比中转beforebuild中的6.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./beforebuild/6.css'</span>)) <span class="comment">// 先输出一遍</span></span><br></pre></td></tr></table></figure><br><br>changed根据先前输出的文件的最终修改时间进行比较文件是否改变<br><br>而如果有改变，再输出覆盖beforebuild中的6.css，同时继续执行后续压缩，加戳等命令，从而输出到build文件中的6.css<br><br><br>最终将相关指令划分为default、dev，用于区分开发环境，生产环境中所用不同。因为生产环境中需要执行’clean_build’指令中的所有文件清除过程。<br><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译8.png" alt="gulp增量编译8" title="gulp增量编译8"><br><br>依次对项目gulp中的文件如此处理，最终将构建均速由<font><strong>15s</strong></font>降低至<font><strong>4s</strong></font>。<br><br><br><font color="ff0000"><strong>前后对比：</strong></font><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译3.png" alt="gulp增量编译3" title="gulp增量编译3"></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译6.png" alt="gulp增量编译6" title="gulp增量编译6"></p><p>至此，gulp的增量编译初步完成。<br>后续仍然有一些代码优化的空间在，所以并不认为这是最终的优化结果。</p><font><strong>加油!</strong></font><hr><p>附上在gulp中文网，查看到的gulp增量编译，官方使用watch与cache进行的增量处理。</p><p>Gulp增量编译: <a href="https://www.gulpjs.com.cn/docs/recipes/incremental-builds-with-concatenate/" target="_blank" rel="noopener">gulp增量编译</a></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译9.png" alt="gulp增量编译9" title="gulp增量编译9"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript深浅拷贝</title>
      <link href="/2019/02/18/2019/JavaScript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/02/18/2019/JavaScript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>我们首先稍微复习一下有关JS中的数据类型及相关知识点</p><p>1-简单数据类型：Undefined，Null，Boolean，Symbol，Number，String</p><p>2-复杂数据类型：对象</p><p>简单数据类型保存在栈内存中</p><p>复杂数据类型即引用类型，保存于堆内存中；引用的类型值实际为指向对象的指针</p><p>这与我们今天所需要讲到的深浅拷贝有关😁</p><p><img src="/2019/02/18/2019/JavaScript深浅拷贝/深浅拷贝.jpg" alt="&quot;深浅拷贝.jpg&quot;" title="深浅拷贝.jpg"></p><a id="more"></a><p><strong><font color="ff0000">浅拷贝</font></strong></p><p>相当于我们复制了该对象或数组，然而该“指针”仍然指向原本内存空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'wsscat'</span>,</span><br><span class="line">  age:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj2[<span class="string">'c'</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "wsscat", age: 0, c: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">////Object &#123;name: "wsscat", age: 0, c: 5&#125;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，当我们改变obj2的[‘c’]时候，obj1会受到其影响</p><p><strong><font color="ff0000">深拷贝</font></strong></p><p><em>数组：</em><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>-slice()：</span><br><span class="line"></span><br><span class="line">var arr = [<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>];</span><br><span class="line">var arrCopy = arr.slice(<span class="number">0</span>);</span><br><span class="line">arrCopy[<span class="number">0</span>] = <span class="string">'tacssw'</span></span><br><span class="line">console.log(arr)//[<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line">console.log(arrCopy)//[<span class="string">'tacssw'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-concat():</span><br><span class="line"></span><br><span class="line">var arr = [<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>];</span><br><span class="line">var arrCopy = arr.concat();</span><br><span class="line">arrCopy[<span class="number">0</span>] = <span class="string">'tacssw'</span></span><br><span class="line">console.log(arr)//[<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line">console.log(arrCopy)//[<span class="string">'tacssw'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br></pre></td></tr></table></figure></p><p><em>对象</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>-新建对象后遍历实现</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      name:<span class="string">'wsscat'</span>,</span><br><span class="line">      age:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj2.name = obj.name;</span><br><span class="line">obj2.age = obj.age</span><br><span class="line"></span><br><span class="line">obj.name = <span class="string">'autumns'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "autumns", age: 0&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">//Object &#123;name: "wsscat", age: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-封装好方法进行对象拷贝处理</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'wsscat'</span>,</span><br><span class="line">  age: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> source[key] === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result[key] = deepCopy(source[key])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result[key] = source[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = deepCopy(obj)</span><br><span class="line">obj.name = <span class="string">'autumns'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "autumns", age: 0&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3);<span class="comment">//Object &#123;name: "wsscat", age: 0&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node+Express+Element实现文件上传下载</title>
      <link href="/2019/02/10/2019/Node-express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/02/10/2019/Node-express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>毕设的共享图书系统需要所运用到的，有关文件的上传、下载功能的实现，现在就总结一下记录在博客上：</p><p><strong>上传功能</strong></p><p><em>前端</em></p><p>上传所使用的element的upload组件<br><a id="more"></a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-upload class=<span class="string">"upload-demo"</span> ref=<span class="string">"upload"</span> action=<span class="string">""</span></span><br><span class="line">    :with-credentials=<span class="string">"true"</span></span><br><span class="line">    :<span class="keyword">on</span>-error=<span class="string">"handleError"</span></span><br><span class="line">    :limit=<span class="string">"1"</span></span><br><span class="line">    :before-upload=<span class="string">"beforeAvatarUpload"</span></span><br><span class="line">    :<span class="keyword">file</span>-<span class="keyword">list</span>=<span class="string">"fileList"</span></span><br><span class="line">    :http-request=<span class="string">"commintEditor"</span></span><br><span class="line">    :<span class="keyword">on</span>-exceed=<span class="string">"uploadExceed"</span></span><br><span class="line">    :<span class="keyword">on</span>-<span class="keyword">change</span>=<span class="string">"uploadChange"</span></span><br><span class="line">    :<span class="keyword">on</span>-<span class="built_in">remove</span>=<span class="string">"uploadRemove"</span></span><br><span class="line">    :auto-upload=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">el</span>-button slot=<span class="string">"trigger"</span> size=<span class="string">"small"</span> <span class="built_in">type</span>=<span class="string">"primary"</span>&gt;选取文件&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">    &lt;!-- &lt;<span class="keyword">el</span>-button style=<span class="string">"margin-left: 10px;"</span> size=<span class="string">"small"</span> <span class="built_in">type</span>=<span class="string">"success"</span> @click=<span class="string">"submitUpload"</span>&gt;上传到服务器&lt;/<span class="keyword">el</span>-button&gt; --&gt;</span><br><span class="line">    &lt;div slot=<span class="string">"tip"</span> class=<span class="string">"el-upload__tip"</span>&gt;只能上传jpg、pdf、doc文件，且不超过<span class="number">5</span>MB&lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-upload&gt;</span><br></pre></td></tr></table></figure></p><p>其中对一些钩子方法进行了定义，用于检验上传的设定大小，格式等…例如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">beforeAvatarUpload (file) &#123;</span><br><span class="line">      <span class="keyword">var</span> fileType = file.name.substring(file.name.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>)</span><br><span class="line">      console.log(fileType)</span><br><span class="line">      <span class="keyword">const</span> isJPG = fileType === <span class="string">'jpg'</span></span><br><span class="line">      <span class="keyword">const</span> iswordx = fileType === <span class="string">'docx'</span></span><br><span class="line">      <span class="keyword">const</span> isword = fileType === <span class="string">'doc'</span></span><br><span class="line">      <span class="keyword">const</span> ispdf = fileType === <span class="string">'pdf'</span></span><br><span class="line">      <span class="keyword">const</span> ispng = fileType === <span class="string">'png'</span></span><br><span class="line">      <span class="keyword">const</span> isLt5M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">5</span></span><br><span class="line">      <span class="keyword">if</span> (!isJPG &amp;&amp; !isword &amp;&amp; !ispdf &amp;&amp; !iswordx &amp;&amp; !ispng) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message.error(<span class="string">'上传只能是 jpg、png、doc、pdf 格式!'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isLt5M) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message.error(<span class="string">'上传图片大小不能超过 5MB!'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (isJPG || isword || ispdf || iswordx || ispng) &amp;&amp; isLt5M</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以上是对于文件格式，大小的检验</span></span><br></pre></td></tr></table></figure></p><p>在上传的函数中使用formdata的形式传输<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="built_in">append</span>(<span class="string">'file'</span>, <span class="variable">_file</span>)</span><br></pre></td></tr></table></figure></p><p>并且独立配置相应Axios的headers<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> config = &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p><em>后台</em></p><p>后台接收部分使用的是formidable模块，并为其设定服务器中的默认存储目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收文件</span></span><br><span class="line"><span class="selector-tag">var</span> formidable = require(<span class="string">'formidable'</span>)</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">form</span> = new formidable.IncomingForm()</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span><span class="selector-class">.uploadDir</span> = <span class="string">'./uploadFile'</span></span><br></pre></td></tr></table></figure><p>对文件的解析部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此模块解析请求信息，将json数据与文件数据分开为field、files两部分</span></span><br><span class="line">form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, field, files</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fields存放json数据，files存放的是文件信息</span></span><br><span class="line">  files.field = field</span><br><span class="line">  <span class="keyword">var</span> $params = files.field</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  我们可以识别若files存在，则进行存储写入的操作再后续进行数据库记录操作</span></span><br><span class="line">  <span class="comment">//  1</span></span><br><span class="line">  <span class="comment">//  如果有文件的情况下</span></span><br><span class="line">  <span class="keyword">if</span> (files.file) &#123;</span><br><span class="line">    <span class="comment">//  oldpath为解析请求中文件时存放的目录地址，我们目前需要将其重命名然后放入我们所需要的最终地址</span></span><br><span class="line">    <span class="keyword">let</span> oldpath = path.join(files.file.path)</span><br><span class="line">    <span class="comment">//  获取files相关属性</span></span><br><span class="line">    <span class="keyword">var</span> JsonFile = files.file</span><br><span class="line">    <span class="keyword">var</span> fileName = JsonFile.name</span><br><span class="line">    <span class="comment">//  新的目录，为了防止同名，再加上随机数</span></span><br><span class="line">    <span class="keyword">var</span> ranFileName = <span class="built_in">String</span>(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">8999</span> + <span class="number">10000</span>)).concat(fileName)</span><br><span class="line">    <span class="comment">//  新生成包含随机数的文件名与目录拼接的地址</span></span><br><span class="line">    newpath = path.join(<span class="string">'./uploadFile'</span>, ranFileName)</span><br><span class="line">    <span class="comment">//  利用fs模块进行文件重命名并且移动</span></span><br><span class="line">    fs.rename(oldpath, newpath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        result = &#123;</span><br><span class="line">          code: <span class="string">'1'</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">          &#125;,</span><br><span class="line">          msg: <span class="string">'新文章上传错误'</span></span><br><span class="line">        &#125;</span><br><span class="line">        jsonWrite(res, result)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`上传文件重命名错误<span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  进行数据库记录，newpath为移动后的目录记录</span></span><br><span class="line">        commitToSql(req, res, $params, newpath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  无文件的情况下，进行数据库记录</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//  进行数据库记录，newpath为移动后的目录记录</span></span><br><span class="line">    commitToSql(req, res, $params, newpath)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>于此，便完成了文件的上传记录（其余省略代码）</p><hr><p><strong>下载功能</strong></p><p><em>前端</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  利用window.open打开一个新的页面，并且发送相应的请求连接与参数</span></span><br><span class="line"><span class="comment">//  缺点：页面闪现</span></span><br><span class="line">lookArticle (index, row) &#123;</span><br><span class="line">  <span class="keyword">var</span> bookusername = row.username</span><br><span class="line">  <span class="keyword">var</span> booktitle = row.title</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">`/lookArticle?bookusername=<span class="subst">$&#123;bookusername&#125;</span>&amp;booktitle=<span class="subst">$&#123;booktitle&#125;</span>`</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><em>后台</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  分析相应文件名称</span></span><br><span class="line"><span class="selector-tag">var</span> fileName = <span class="variable">$params</span>.fileName</span><br><span class="line"><span class="comment">//  拼接后台服务器中文件的路径，以便使用</span></span><br><span class="line"><span class="selector-tag">var</span> currFile = path.join(__dirname, <span class="string">'../uploadFile/'</span> + fileName)</span><br><span class="line"><span class="comment">//  使用fs.exists判断文件是否存在，目前已经不推荐使用fs.exists</span></span><br><span class="line">fs.exists(currFile, function (exists) &#123;</span><br><span class="line">  <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">    console.log(<span class="string">'文件存在'</span>)</span><br><span class="line">    res.download(currFile)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;</span><br><span class="line">      <span class="selector-tag">code</span>: <span class="string">'1'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      msg: <span class="string">'文件不存在'</span></span><br><span class="line">    &#125;</span><br><span class="line">    jsonWrite.jsonWrite(res, result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>于此完成文件的下载功能<br>演示代码略为简单</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2019/02/08/2019/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
      <url>/2019/02/08/2019/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>今天是大年初四了，过去几天在热烈的气氛中，迎来了农历猪年，我也面临着大学四年的最后一个学期，珍惜!，希望新的一年的来临可以为自己带来不错的好运，在工作上顺利，自己一切的规划，也可以顺利的进行与实现。<strong>加油！</strong></p><p>也希望家人，朋友们，大家，新年快乐，心想事成，身体健康，万事如意。</p><p><img src="/2019/02/08/2019/新年快乐/timg.gif" alt="2019" title="2019"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node+MySQL释放数据库连接的Bug</title>
      <link href="/2019/02/02/2019/Node-MySQL%E9%87%8A%E6%94%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%9A%84Bug/"/>
      <url>/2019/02/02/2019/Node-MySQL%E9%87%8A%E6%94%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%9A%84Bug/</url>
      
        <content type="html"><![CDATA[<p>今天做毕业设计时，在前端业务中向后台请求用户数据时，每当请求次数超过五次，及以上时，总会卡死，于是，用简单的console判断代码停止位置，发现每次运行到pool.getConnection时第五次连接查询就会卡住，如图</p><p><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202195830.png" alt="五次运行停1" title="五次运行停1"></p><p>图一</p><p><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202195902.png" alt="五次运行停2" title="五次运行停2"></p><p>图二</p><p>于是乎就感觉是由于前次连接时的数据库连接没有释放的原因导致的，于是，在cmd中查看mysql的连接情况</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; mysqladmin -uroot -<span class="selector-tag">p</span> processlist</span><br></pre></td></tr></table></figure><a id="more"></a><p>再实验前端的请求时，数据库的连接情况</p><p><font color="7f7f7f"><em>没有连接请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200600.png" alt="没有连接请求" title="没有连接请求"></p><p><font color="7f7f7f"><em>第一次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200619.png" alt="第一次请求时" title="第一次请求时"></p><p><font color="7f7f7f"><em>第二次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200631.png" alt="第二次请求时" title="第二次请求时"></p><p><font color="7f7f7f"><em>第五次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200646.png" alt="第五次请求时" title="第五次请求时"></p><p>于是乎，得知了每一次请求时，后台的代码中总有两个数据库查询没有释放连接，从而导致，程序的中断</p><p>那接下来来检查一下代码：</p><p><font color="ff0000">简略的写，代码如下</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getAlluserTotalPromise = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise2 = <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> <span class="params">(err, connection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(result)</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query($sql.userCenter.getuserTotal, [], (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          connection.release()</span><br><span class="line">          reject(result)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过走查发现，我们在执行if-else逻辑时，对于else时的流程中忘记添加数据库释放了，以及后来采用了新的方式是否数据库连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pool</span><span class="selector-class">.releaseConnection</span>(<span class="selector-tag">connection</span>)</span><br></pre></td></tr></table></figure><p>于是我们就将代码改为了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getAlluserTotalPromise = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise2 = <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> <span class="params">(err, connection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(result)</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query($sql.userCenter.getuserTotal, [], (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 修改位置</span></span><br><span class="line">          reject(result)</span><br><span class="line">          pool.releaseConnection(connection)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 修改位置</span></span><br><span class="line">          resolve(result)</span><br><span class="line">          pool.releaseConnection(connection)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后我们再一遍遍发送请求，查看数据库的连接情况，发现这时候数据库的连接释放就正常了</p><p><font color="7f7f7f"><em>正常请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202201843.png" alt="正常请求时" title="正常请求时"></p><p>就把今天的Bug解决了，路漫漫，以后还会多着呢，也算是自己的粗心大意导致的，希望以后解决问题的能力更加厉害有所提升，节约时间</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> MySQL </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>transform父元素对fixed子元素的影响</title>
      <link href="/2019/02/02/2019/transform%E5%AF%B9fixed/"/>
      <url>/2019/02/02/2019/transform%E5%AF%B9fixed/</url>
      
        <content type="html"><![CDATA[<p>在应用了属性transform的父元素上，若其拥有fixed属性的子元素，则该子元素的fixed属性讲失效，并将以其父元素为定位基准</p><p>详情请看例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.mid</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin: 20px;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  transform: translate(0, 0);</span></span><br><span class="line"><span class="undefined">  background: greenyellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: fixed;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  background: pink;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码所呈现的布局样式：</p><p><img src="/2019/02/02/2019/transform对fixed/20181120224139596.png" alt="transform" title="transform"></p><a id="more"></a><p>若我们删除去父元素的transform属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.mid</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin: 20px;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  background: greenyellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: fixed;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  background: pink;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/02/02/2019/transform对fixed/20181120224251281.png" alt="transform2" title="transform2"></p><p>由此可见，其父元素的transform对fixed子元素的影响；</p><p>注，此实例在chorme以及firefox下有效，IE环境等不受影响</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件间的通信</title>
      <link href="/2019/02/02/2019/Vue%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/02/02/2019/Vue%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<font color="ff0000"><strong>父 –&gt; 子</strong></font><p>父组件向子组件传递，利用props属性<br><a id="more"></a><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">父组件</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 通过为子组件绑定属性 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">:parentToChild</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span>             </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  data () &#123;</span></span><br><span class="line"><span class="template-variable">    return &#123;</span></span><br><span class="line"><span class="template-variable">      value1:'父组件的值传给子组件'</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  components: </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  mounted () </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  watch: </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  methods: </span><span class="template-variable">&#123;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      valueFromParent:<span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 子组件通过props可以拿到父组件传递的值</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'parentToChild'</span>],</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 倘若需要与data中绑定的数据项应，则在watch中做监视</span></span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="string">'parentToChild'</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.valueFromParent = <span class="keyword">this</span>.parentToChild</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><font color="ff0000"><strong>子 –&gt; 父</strong></font><p>利用emit方法，绑定触发事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickEvent"</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      value1:<span class="string">'这是要传给父组件的值'</span>,</span></span><br><span class="line"><span class="actionscript">      value2:<span class="string">'可以传多个值'</span>,</span></span><br><span class="line"><span class="actionscript">      value3:<span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  props: [],</span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    clickEvent()&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 通过绑定事件，触发emit</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'sendValueToParent'</span>,<span class="keyword">this</span>.value1,</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.value2,<span class="keyword">this</span>.value3,<span class="literal">true</span>);    </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created()&#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 绑定事件触发getValueFromChild  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> @<span class="attr">sendValueToParent</span> = <span class="string">"getValueFromChild"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 触发的事件</span></span></span><br><span class="line"><span class="undefined">    getValueFromChild(value1,value2,value3,value4)&#123;                             &lt;-----关键</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//打印值分别是</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value1: 这是要传给父组件的值</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value2: 可以传多个值</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value3: false</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value4: true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created()&#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就是父子组件相互传递值得大致行为</p><p>大致可以用于：例<br>分页器组件与父组件的关系</p><p><img src="/2019/02/02/2019/Vue父子通信/vue.jpg" alt="vue父子组件" title="vue父子组件"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios使用</title>
      <link href="/2019/01/31/2019/Axios%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/31/2019/Axios%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这几天临近过年，实习的公司也从25号开始放假了，好好休整了几天，摸鱼做做毕业设计，也还有几天就要过年了，但时间紧迫，毕业，工作的各种事情也都将棘手起来，所以还是不能闲太久呢，要有所紧迫感…</p><p>今天零星总结一下之前笔记中的Axios的使用方法:<br><a id="more"></a></p><hr><font color="ff0000"><em>get</em></font><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">  ID: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>post</em></font><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  firstName: <span class="string">'Fred'</span>,</span><br><span class="line">  lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios API</em></font><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可使用下列配置方法请求axios(config)</span></span><br><span class="line"><span class="selector-tag">axios</span>(&#123;</span><br><span class="line"><span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line"><span class="attribute">url</span>: <span class="string">'/user/12345'</span>,</span><br><span class="line"><span class="attribute">data</span>: &#123;</span><br><span class="line">    <span class="attribute">firstName</span>: <span class="string">'Fred'</span>,</span><br><span class="line">    <span class="attribute">lastName</span>: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span>(url[, config])</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span>(<span class="string">'/user/12345'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以及几种其他的请求别名: </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.request</span>(config)    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.get</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.delete</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.head</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.post</span>(url[, data[, config]])</span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.put</span>(url[, data[, config]])  </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.patch</span>(url[, data[, config]])</span><br></pre></td></tr></table></figure><font color="ff0000"><em>多个Axios的执行</em></font><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="keyword">all</span>(iterable)</span><br><span class="line">axios.spread(callback)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getUserAccount</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">axios.get('/user/12345')</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getUserPermissions</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">axios.get('/user/12345/permissions')</span>;&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="keyword">all</span>([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .<span class="keyword">then</span>(axios.spread(<span class="keyword">function</span> <span class="title"></span>(acct, perms) &#123;</span><br><span class="line">  // 两个请求现在都执行完成</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios请求的配置项</em></font><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">'url'</span>  <span class="comment">// 请求的url</span></span><br><span class="line">    <span class="attribute">method</span>: <span class="string">'get'</span>  <span class="comment">//  请求的方法</span></span><br><span class="line">    <span class="attribute">baseURL</span>: <span class="string">'url'</span>  <span class="comment">//  将baserURL加在url前边，便于axios传递为相对URL </span></span><br><span class="line">    <span class="attribute">transformRequest</span>: [function (data) &#123;</span><br><span class="line">        return data</span><br><span class="line">    &#125;] <span class="comment">//允许向服务器发送数据前，修改请求的数据，只限于 'PUT','POST','PATCH'请求方法</span></span><br><span class="line">    <span class="attribute">transformRequest</span>: [function (data) &#123;</span><br><span class="line">        return data</span><br><span class="line">    &#125;] <span class="comment">//允许向服务器响应数据后，数据传递给then/catch前，修改响应数据</span></span><br><span class="line">    <span class="attribute">headers</span>: &#123;<span class="string">''</span>X-Requested-With<span class="string">': '</span>XMLHttpRequest<span class="string">''</span>&#125;  <span class="comment">//自定义请求头</span></span><br><span class="line">    <span class="attribute">params</span>: &#123;</span><br><span class="line">        <span class="attribute">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;  <span class="comment">// 将发送的URL参数</span></span><br><span class="line">    <span class="attribute">paramsSerializer</span>: function (params) &#123;</span><br><span class="line">        return Qs.stringify(params, &#123;<span class="attribute">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">    &#125;   <span class="comment">// 负责序列化 params，为什么？-&gt;看解决问题1、，所以需要序列化</span></span><br><span class="line">    <span class="attribute">data</span>: &#123;</span><br><span class="line">        <span class="attribute">firstName</span>: <span class="string">'Fred'</span>   <span class="comment">// 作为请求主体发送的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">timeout</span>: <span class="number">1000</span>   <span class="comment">// 指定请求超时的时间数，超时将中断</span></span><br><span class="line">    <span class="attribute">withCredentials</span>: false  <span class="comment">//跨域时是否需要凭证</span></span><br><span class="line">    </span><br><span class="line">    以及其余众多方法...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="ff0000"><em>params与data</em></font><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">params</span>与<span class="class"><span class="keyword">data</span>的区别？：</span></span><br><span class="line"></span><br><span class="line"><span class="title">params</span>是添加到url的请求字符串的，用于get请求</span><br><span class="line"><span class="class"><span class="keyword">data</span>是添加到body中的，用于post请求</span></span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios请求的结构</em></font><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">response-&gt;<span class="symbol">:</span>响应结构</span><br><span class="line">&#123;</span><br><span class="line">  /<span class="regexp">/ `data` 由服务器提供的响应</span></span><br><span class="line"><span class="regexp">  data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line"><span class="regexp">  status: 200,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line"><span class="regexp">  statusText: 'OK',</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `headers` 服务器响应的头</span></span><br><span class="line"><span class="regexp">  headers: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `config` 是为请求提供的配置信息</span></span><br><span class="line"><span class="regexp">  config: &#123;&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><font color="ff0000"><em>axios.create创建实例</em></font><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 自定义创造一个axios的实例，这样亦可以与默认的axios区分开来</span><br><span class="line">var<span class="built_in"> instance </span>= axios.create(&#123;</span><br><span class="line">  baseURL: 'https://api.example.com'</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>axios拦截器</em></font><p>可统一在请求发送时或者接收时做网络的统一处理，例如响应的404等错误处理，而不用交由每一个请求响应来做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Axios </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript bind的模拟实现</title>
      <link href="/2019/01/24/2019/JSbind%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/01/24/2019/JSbind%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>今天在mqyqingfeng<a href="https://github.com/mqyqingfeng/Blog/issues/12#" target="_blank" rel="noopener">点击这里</a>的githubBlog上看到有关JS的bind的模拟实现，于是也跟着一起实现了一遍，需要更加详细的了解的话，也建议前往前辈的Blog学习，感谢。</p><p>以下是我学习后进行模拟的实现方式。</p><a id="more"></a><hr><font color="ff0000"><strong>bind函数</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo)</span><br><span class="line"><span class="comment">// bind不会立即执行</span></span><br><span class="line">bindFoo(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><br><br>我们可以总结得到，bind函数不同于call、apply，它会返回一个未执行的函数，并且等待你的执行<br><br>于是我们根据此做出第一版模拟<br><br>—<br><br><font color="ff0000"><strong>第一版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.apply(context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = bar.bind2(foo)</span><br><span class="line">result(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>上面我们模拟出来对于this的指向问题，接下来，我们继续对它的传递参数进行处理</em></font><font color="7f7f7f"><em>我们先来看一下原生bind的处理与效果</em></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  Jayant</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此处传了部分参数</span></span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo, <span class="string">'Jayant'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再传部分参数</span></span><br><span class="line">bindFoo(<span class="number">23</span>)</span><br></pre></td></tr></table></figure><hr><font color="ff0000"><strong>第二版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind3 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 先接受一遍第一次的参数，</span></span><br><span class="line">    <span class="comment">// 第二次调用时传递的在return的function中处理</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="comment">// 处理传入的参数;</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(context, args.concat(bindArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>我们选择将参数在其中划分出来，二步处理，完成了bind参数问题</em></font><hr><p><font color="ff0000"><strong>最终版</strong></font></p><p><font color="7f7f7f"><em>处理有关bind函数的new问题</em></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind4 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="keyword">this</span> : context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">    fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript call的模拟实现</title>
      <link href="/2019/01/23/2019/JScall%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/01/23/2019/JScall%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>今天在mqyqingfeng<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">点击这里</a>的githubBlog上看到有关JS的call的模拟实现，于是也跟着一起实现了一遍，需要更加详细的了解的话，也建议前往前辈的Blog学习，感谢。</p><p>以下是我学习后进行模拟的实现方式。</p><a id="more"></a><hr><font color="ff0000"><strong>call的使用</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name) <span class="comment">// Jayant</span></span><br><span class="line">  <span class="built_in">console</span>.log(age)  <span class="comment">// 23</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call(foo,<span class="string">'Jayant'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><br><br><font color="7f7f7f"><em>如果将bar()作为foo的属性：</em></font><p>那么我们也可以完成其this的改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将bar作为属性放在foo上</span></span><br><span class="line">foo.bar();</span><br></pre></td></tr></table></figure></p><p>那么按照此思路，我们是不是也可以将大致的行为抽象称为<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋给属性--执行它--删除它</span></span><br><span class="line">foo.<span class="keyword">fn</span> = bar()</span><br><span class="line">foo.<span class="keyword">fn</span>()</span><br><span class="line">delete foo.<span class="keyword">fn</span></span><br></pre></td></tr></table></figure></p><font color="7f7f7f"><em>于是我们根据我们的思路，实现第一版绑定实现：</em></font><hr><font color="ff0000"><strong>第一版:</strong></font><p>我们选择将该函数定义在Function原型上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    context.fn();</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line">bar.call2(foo)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><font color="7f7f7f"><em>我们在call2函数上将this赋予了context的fn属性，并且在执行之后删除它</em></font><hr><font color="7f7f7f"><em>其次call中还有参数的问题，按照我们的第一版实现，我们并不能传入参数</em></font><font color="7f7f7f"><em>于是我们进一步进行参数的处理</em></font><font color="ff0000"><strong>第二版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call3 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为此处的arguments里边有参数,剥夺第一个的context方法,其余就是参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>,len=<span class="built_in">arguments</span>.length;i&lt;len;i++)&#123;</span><br><span class="line">        args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--关键在于上边对于<span class="built_in">arguments</span>参数的提取--&gt;</span><br><span class="line"></span><br><span class="line">    context.fn(...args);</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  jayant2</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//  1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call3(foo,<span class="string">'jayant2'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>于是我们完成了call3函数内的参数定义，传递问题</em></font><hr><font color="ff0000"><strong>第三版</strong></font><font color="7f7f7f"><em>第三版，进行了函数的具体完善，this为空的情况，指向null，将值返回的情况</em></font><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call4 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    &lt;!--此处进行了传入<span class="keyword">this</span>是否为空的情况--&gt;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="comment">// 因为此处的arguments里边有参数,剥夺第一个的context方法,其余就是参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>,len=<span class="built_in">arguments</span>.length;i&lt;len;i++)&#123;</span><br><span class="line">        args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = context.fn(...args);</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    &lt;!--进行了返回值处理--&gt;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  jayant2</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//  1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call4(foo,<span class="string">'jayant4'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>至此，以上就是进行call模拟的大致过程</em></font><p><img src="/2019/01/23/2019/JScall模拟/JScall.jpg" alt="庭院海边" title="庭院海边"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript继承</title>
      <link href="/2019/01/23/2019/JavaScript%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/01/23/2019/JavaScript%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>前几天整理了有关<strong>JavaScript继承</strong>的几种方式，今天就一并的从印象笔记中整理上来。</p><hr><a id="more"></a><font color="ff0000"><strong>原型链继承</strong></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.property = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subproperty = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处继承</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()                </span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处也在原型中写了自己的getSubValue方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line">alert(instance.getSuperValue)        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处重新定义了超类型中的该方法</span></span><br><span class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">alert(instance.getSuperValue())    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="ff0000"><strong>借用构造函数</strong></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function SuperType () &#123;</span><br><span class="line">    this<span class="selector-class">.colors</span> = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType() &#123;</span><br><span class="line">    <span class="comment">//继承SuperType，此处继承/借助构造函数</span></span><br><span class="line">    SuperType.call(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance1 = new SubType()</span><br><span class="line">instance1<span class="selector-class">.colors</span><span class="selector-class">.push</span>(<span class="string">'black'</span>)</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.colors)</span></span>    <span class="comment">//'red','blue','green','black'</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance2 = new SubType()</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance2.colors)</span></span>    <span class="comment">//'red','blue','green'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何传递参数？？</span></span><br><span class="line"></span><br><span class="line">function SuperType(name) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType() &#123;</span><br><span class="line">    <span class="comment">// 此处继承，并传递具体name值</span></span><br><span class="line">    SuperType.call(this, <span class="string">'Jayant'</span>)    </span><br><span class="line">    this<span class="selector-class">.age</span> = <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance = new SubType()</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.name)</span></span>    <span class="comment">// Jayant</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.age)</span></span>    <span class="comment">//29</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="ff0000"><strong>组合继承</strong></font><font color="7f7f7f"><em>结合原型链与构造函数，思路为：使用原型链实现对原型属性和方法的继承，又实用构造函数实现对实例属性的继承</em></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">    this<span class="selector-class">.colors</span> = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType<span class="selector-class">.prototype</span><span class="selector-class">.sayName</span> = function() &#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType(name, age) &#123;</span><br><span class="line">    <span class="comment">// 构造继承属性         ！第一次调用SuperType</span></span><br><span class="line">    SuperType.call(this,name)</span><br><span class="line">    this<span class="selector-class">.age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承            ！第二次调用SuperType</span></span><br><span class="line">SubType<span class="selector-class">.prototype</span> = new SuperType()    </span><br><span class="line"></span><br><span class="line">SubType<span class="selector-class">.prototype</span><span class="selector-class">.constructor</span> = SubType</span><br><span class="line"></span><br><span class="line">SubType<span class="selector-class">.prototypr</span><span class="selector-class">.sayAge</span> = function() &#123;</span><br><span class="line">    alert(this.age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> instance1 = new SubType(<span class="string">'Jayant'</span>, <span class="number">23</span>)</span><br><span class="line">instance1<span class="selector-class">.colors</span><span class="selector-class">.push</span>(<span class="string">'black'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance1.colors)</span></span>    <span class="comment">//'red','blue','green',black'</span></span><br><span class="line">instance1.sayName()        <span class="comment">//Jayant</span></span><br><span class="line">instance1.sayAge()        <span class="comment">// 23</span></span><br><span class="line"></span><br><span class="line">vat instance2 = new SubType(<span class="string">'Grey'</span>, <span class="number">27</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance2.colors)</span></span>    <span class="comment">//'red','blue','green'</span></span><br><span class="line">instance2.sayName()       <span class="comment">// 'Grey'</span></span><br><span class="line">instance2.sayAge()        <span class="comment">//27</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="ff0000"><strong>寄生式继承</strong></font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnthor</span><span class="params">(original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">clone</span> = object(original)</span><br><span class="line">    <span class="comment">// 添加新方法</span></span><br><span class="line">    <span class="keyword">clone</span>.sayHi = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        alert(<span class="string">'Hi'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">clone</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><font color="7f7f7f"><em>在上边例子中，createAnther()函数接收一个参数，将要作为新对象基础的对象，然后将对象(original)传递给object()函数，将返回的结果赋值给Clone<br>再为clone对象添加一个新方法sayHi()，最后返回给clone对象。</em></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Nicholas'</span>,</span><br><span class="line">    friends: [<span class="string">'shelby'</span>, <span class="string">'court'</span>, <span class="string">'van'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> anthorPerson = createAnther(person)</span><br><span class="line">antherPerson.sayHi()        <span class="comment">//Hi</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><font color="ff0000"><strong>寄生组合式继承</strong></font><font color="7f7f7f"><em>为避免如同组合继承的方式，会调用两次超类型构造函数，衍生出了寄生组合继承方式<br><br>大致思路：</em></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function inheritPrototype(subType, superType) &#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="selector-tag">var</span> prototype = object(superType.prototype)</span><br><span class="line">    <span class="comment">//增强对象</span></span><br><span class="line">    prototype<span class="selector-class">.constructor</span> = subType                 </span><br><span class="line">    <span class="comment">//指定对象</span></span><br><span class="line">    subType<span class="selector-class">.prototype</span> = prototype   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><font color="7f7f7f"><em>实例</em></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">(name, age)</span> </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType)</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><font color="7f7f7f"><em><br>优势在于只调用一次父类构造函数，并且将子构造函数，父构造函数传入方法中，复制一遍父类型的原型，并为其添加constructor属性</em></font><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript创建对象</title>
      <link href="/2019/01/23/2019/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/01/23/2019/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>前几天整理了有关<strong>JavaScript创建对象</strong>的几种方式，今天就一并的从印象笔记中整理上来。</p><hr><p><font color="ff0000"><strong>工厂模式</strong></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">    <span class="selector-tag">var</span> o = new Object()</span><br><span class="line">    o<span class="selector-class">.name</span> = name</span><br><span class="line">    o<span class="selector-class">.age</span> = age</span><br><span class="line">    o<span class="selector-class">.job</span> = job</span><br><span class="line">    o<span class="selector-class">.sayName</span> = function () &#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">    return o</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1= createPerson(<span class="string">'jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br><span class="line"><span class="selector-tag">var</span> person2 = createPerson(<span class="string">'esss'</span>, <span class="number">22</span>, <span class="string">'**'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为方法中已经new了一个object了，所以我们不需要new它</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><font color="ff0000"><strong>构造函数模式</strong></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        alert (<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'esss'</span>, <span class="number">22</span>, <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure></p><p><em>构造函数Person与工厂模式createPerson的区别：</em></p><ul><li>没有显式创建对象，内部new Object</li><li>直接将属性赋予this对象</li><li>没有return 语句</li></ul><p><em>如果需要使用构造函数生成一个Person实例，则我们需要new一下，new一个对象会经历以下过程：</em></p><ul><li>创建一个新对象</li><li>将构造函数作用域赋予新对象，也就是this</li><li>执行构造函数中的代码</li><li>返回新对象</li></ul><p><em>构造函数的<font color="7f7f7f">不足之处</font>：</em></p><p>person1与person2中每个实例都有一个这个方法，都需要创建一遍，<font color="7f7f7f">造成内存上的浪费</font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">alert(person1.sayName == person2.sayName)　　<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>于是又根据此不足之处衍生出以下方法：</p><p><font color="7f7f7f"><em>构造函数的优化：</em></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> <span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1、将共有方法定义在全局上，2、函数多的话，要定义多</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这个操作又会造成如果函数很多，需要定义很多方法；并且是定义成为了全局函数，这完全不需要</p><hr><p><font color="ff0000"><strong>原型模式</strong></font></p><p><font color="7f7f7f"><em>每个函数都有一个prototype属性，是一个指针，为了使所有实例可以共享到属性和方法，从而不必在构造函数中定义</em></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义在原型上</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.name</span> = <span class="string">'Jayant'</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.age</span> = <span class="number">23</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.job</span> = <span class="string">'web'</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.sayName</span> = function() &#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1 = new Person()</span><br><span class="line">person1.sayName()    <span class="comment">//Jayant</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> person2 = new Person()</span><br><span class="line">person2.sayName()    <span class="comment">//Jayant</span></span><br></pre></td></tr></table></figure></p><p><em><font color="7f7f7f">好处：</font></em> 公共方法，属性可以共用，同时是定义在其构造函数原型上的</p><p><em><font color="7f7f7f">不足：</font></em> 是过于共享，以至于所有的实例都拥有相同的方法，实例了</p><p><font color="7f7f7f">例如：</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1<span class="selector-class">.age</span> = <span class="number">100</span></span><br><span class="line">person2<span class="selector-class">.age</span> <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>组合使用构造函数模式与原型模式</strong></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">    this<span class="selector-class">.age</span> = age</span><br><span class="line">    this<span class="selector-class">.friends</span> = [<span class="string">'乾隆'</span>, <span class="string">'康熙'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Person<span class="selector-class">.prototype</span> = &#123;</span><br><span class="line">    constructor: Person</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1 = new Person()</span><br><span class="line"><span class="selector-tag">var</span> person2 = new Person()</span><br><span class="line">person1<span class="selector-class">.friends</span><span class="selector-class">.push</span>(<span class="string">'嬴政'</span>)</span><br><span class="line">person1<span class="selector-class">.friends</span>    <span class="comment">//乾隆，康熙，嬴政</span></span><br><span class="line">person2<span class="selector-class">.friends</span>    <span class="comment">//乾隆，康熙</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//认可度，使用最广泛的一种创建对象方式</span></span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>寄生构造函数模式</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.name = name</span><br><span class="line">    o.age = age</span><br><span class="line">    o.job = job</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><p><font color="7f7f7f"><em>工厂模式</em></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.name = name</span><br><span class="line">    o.age = age</span><br><span class="line">    o.job = job</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><p><em>寄生构造函数与工厂模式的区别</em><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生构造函数</span></span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)  </span><br><span class="line"><span class="comment">// 工厂模式 </span></span><br><span class="line"><span class="keyword">var</span> friend = Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>稳妥构造函数模式</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">'jayant'</span>, <span class="number">23</span>)</span><br><span class="line">person.sayName()    <span class="comment">//jayant</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了调用sayName方法，没办法获取其数据成员，某种情况下安全性 up up</span></span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关命令</title>
      <link href="/2019/01/23/2019/Git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/23/2019/Git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>将自己工作中所整理出来的常用Git命令于此总结一下</p><a id="more"></a><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">// 添加文件至区域</span><br><span class="line">git add . </span><br><span class="line"></span><br><span class="line">// 提交文件至本地仓库</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">// 查看目前工作状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">// 在添加之前可以查看修改的记录</span><br><span class="line">git diff </span><br><span class="line"></span><br><span class="line">// 查看提交的log</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">// 查看精简的提交log</span><br><span class="line">git log --pretty=oneline   </span><br><span class="line"></span><br><span class="line">// 恢复本地分支至HEAD^</span><br><span class="line">git reset --hard HEAD^   </span><br><span class="line"></span><br><span class="line">// 重置本地分支至某分支</span><br><span class="line">git reset --hard 956d...   </span><br><span class="line"></span><br><span class="line">// 切换到xx分支</span><br><span class="line">git checkout branch   </span><br><span class="line"></span><br><span class="line">// 本地创建xx分支</span><br><span class="line">git checkout -b branch   </span><br><span class="line"></span><br><span class="line">// 查看当前远程库</span><br><span class="line">git remote -v   </span><br><span class="line"></span><br><span class="line">// 查看所有分支</span><br><span class="line">git remote -a</span><br><span class="line"></span><br><span class="line">// 将目前origin连接为xxx的远程</span><br><span class="line">git remote add origin https://xxx   </span><br><span class="line"></span><br><span class="line">// 克隆某仓库至本地</span><br><span class="line">git clone http: //xxx    </span><br><span class="line"></span><br><span class="line">// 删除本地某分支</span><br><span class="line">git branch -d branch   </span><br><span class="line"></span><br><span class="line">// 删除远程某分支</span><br><span class="line">git push origin --delete branch   </span><br><span class="line"></span><br><span class="line">// 查看本地有的分支</span><br><span class="line">git branch   </span><br><span class="line"></span><br><span class="line">// 查看远程有的分支</span><br><span class="line">git branch -r   </span><br><span class="line"></span><br><span class="line">// 查看log的流程分支图</span><br><span class="line">git log --graph   </span><br><span class="line"></span><br><span class="line">// 拉取本地没有的远程某分支</span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名   </span><br><span class="line"></span><br><span class="line">// 切换与拉取最新分支</span><br><span class="line">git checkout maste  git pull --rebas </span><br><span class="line">git checkout branchxxx </span><br><span class="line"></span><br><span class="line">// 提交作为一次记录，MERGE修改完成后</span><br><span class="line">：git add .   git commit  </span><br><span class="line"></span><br><span class="line">// REBASE修改完成后，提交继续</span><br><span class="line">：git add &lt;filename&gt; git rebase --continue</span><br><span class="line"></span><br><span class="line">// 储藏工作现场</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">// 查看储藏的工作现场</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">// 恢复应用工作现场</span><br><span class="line">git stash apply xxx</span><br><span class="line"></span><br><span class="line">// 删除第一个工作现场</span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><h5 id="流程式操作"><a href="#流程式操作" class="headerlink" title="流程式操作"></a>流程式操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- 创建feature分支：</span><br><span class="line">git checkout master </span><br><span class="line">git ckeckout -b feature-s16 </span><br><span class="line">git push  </span><br><span class="line">//再根据base提示信息，将本地分支连接上origin上该分支</span><br><span class="line"></span><br><span class="line">- 在feature上进行开发：</span><br><span class="line">git add xxx</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">- 若为多人协同开发更新分支，有rebase冲突：</span><br><span class="line">// 拉取并合并远程该分支</span><br><span class="line">git pull --rebase  </span><br><span class="line">// 此两个命令为合并有冲突时，解决冲突后的继续合并命令</span><br><span class="line">git add .  git rebase --continue    </span><br><span class="line"></span><br><span class="line">- 完成feature开发：</span><br><span class="line">git checkout dev</span><br><span class="line">// 本地切换至dev分支后，拉取远端最新的dev分支代码</span><br><span class="line">git pull --rebase  </span><br><span class="line"></span><br><span class="line">- 再将feature分支合并到dev分支上：</span><br><span class="line">git merge --no-ff feature-s16 </span><br><span class="line">// 将合并后的dev分支推上远端</span><br><span class="line">git push origin dev  </span><br><span class="line"></span><br><span class="line">- 再将fev分支合并至master分支上：</span><br><span class="line">git merge --no-ff dev </span><br><span class="line">// 将合并后的master分支推上远端</span><br><span class="line">git push origin master  </span><br><span class="line"></span><br><span class="line">- 一段时间后删除feature分支：</span><br><span class="line">git branch -d feature-s16</span><br><span class="line">// 删除远端该分支</span><br><span class="line">git push origin --delete feature-s16  </span><br><span class="line"></span><br><span class="line">- 若merge --no-ff合并有冲突：</span><br><span class="line">// 将自动提交一个合并记录</span><br><span class="line">git add .  git commit</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/2019/Git相关命令/Git.jpg" alt="竹林小道" title="竹林小道"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2019/01/22/2019/hello-world/"/>
      <url>/2019/01/22/2019/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到JAYANT BLOG! .</p><h2 id="开头语"><a href="#开头语" class="headerlink" title="开头语"></a>开头语</h2><p>跟随着网上的多种搭建方式，搭建除了属于自己的hexo博客，兴奋之余也非常期待我能给予这个博客不同的“知识”生命力，也期待我所记录下的多种多样，各方各面的博文内容可以给来到这个网站上的朋友们带来帮助</p><p>之后也将陆陆续续将之前的博文迁移过来；</p><p><img src="/2019/01/22/2019/hello-world/MyPic.png" alt="心中藏之无日忘之" title="心中藏之，无日忘之"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
