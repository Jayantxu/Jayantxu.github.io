<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器的多线程</title>
      <link href="/2021/04/12/2021/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/04/12/2021/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="进程，线程"><a href="#进程，线程" class="headerlink" title="进程，线程"></a>进程，线程</h4><p>首先我们思考一下进程与线程的关系与区别：</p><ol><li>一个进程由一个或多个线程组成，多个线程可以协同工作。</li><li>进程之间相互独立，同一进程下各个线程共享程序的内存及一些进程级的资源。</li><li>线程之间的切换比进程间的切换更快。</li></ol><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><a id="more"></a><p>浏览器是多进程的。</p><p><img src="/2021/04/12/2021/浏览器的多线程/NO1.png" alt="NO1" title="NO1"></p><p>我们可以看的他们分别拥有不同的进程ID。</p><ol><li>浏览器进程(Browser 进程):浏览器进程只有一个，用于管理标签页、窗口和浏览器本身。这个进程同时负责处理所有跟磁盘、网络、用户输入和显示的交互，然而它不分析和渲染任何网页内容。</li><li>第三方插件进程:览器进程同样为处于使用状态的每种类型的插件创建一个进程，如:Flash、Quicktime 或 Adobe reader。这些进程仅仅包含插件本身以及和浏览器进程、渲染器进程交互的胶水代码。</li><li>GPU 进程:最多一个，用于 3D 绘制等</li><li>浏览器渲染进程(浏览器内核)(Renderer 进程，内部是多线程的):渲染器进程会存在多个，每个都负责渲染网页。渲染器进程中包含用于操作 HTML，JavaScript，CSS，图片和其他内容的复杂的逻辑。我们使用了也同样被 Apple Safari 浏览器使用的开源的 WebKit 渲染引擎实现以上功能。每个渲染进程都运行在沙箱内，这意味着它对磁盘、网络和显示器没有直接的访问权限。所有跟网络应用的交互，包括用户输入事件和屏幕绘制都必须通过浏览器进程。这可以让浏览器进程监视渲染器的可疑行为，一旦发现其从事破坏活动就将其终止。</li></ol><p>当然作为开发，我们最关心的更是渲染进程，页面渲染，JS执行，事件都在此之上完成。</p><h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>包含了以下<em>线程</em>：</p><ol><li><p>GUI渲染线程负责渲染浏览器界面，解析HTML，CSS，render树，布局绘制等，当界面重绘或者回流时，该线程会执行。值得注意的是，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会保存等待JS引擎空闲时执行。<br>注：👉 <a href="/2020/02/03/2020/重绘回流">重绘回流知识点复习</a></p></li><li><p>JS引擎线程也被称为JS内核，负责JS脚本，JS引擎一直等待任务队列的任务，然后进行处理，一个Tab页中，无论如何只有一个JS线程在运行，如果JS线程运行时间过长，会造成页面渲染卡顿阻塞，这个在debugger断点时，就可以很明显察觉。</p></li><li>事件触发线程属于浏览器而不是JS引擎，用于控制事件循环，例如，宏任务，微任务队列。<br>注：👉 <a href="/2020/06/12/2020/EventLoop">任务队列EventLoop复习</a></li><li>定时触发器线程，setInterval与setTimeout所在的线程定时计数器不是由JS引擎再计数的，因此是有单独线程来计时，并且触发（计时完毕后，添加到事件队列中，等待JS引擎执行），注：setTimeout低于4ms事件间隔都算为4ms。</li><li>异步HTTP线程，XMLHTTP连接后，会通过浏览器开一个线程请求，检查到状态变更后，会调用回调函数，将回调加入事件队列中，由JS引擎执行。</li></ol><h4 id="线程中的关系"><a href="#线程中的关系" class="headerlink" title="线程中的关系"></a>线程中的关系</h4><h5 id="GUI线程与JS引擎线程的互斥"><a href="#GUI线程与JS引擎线程的互斥" class="headerlink" title="GUI线程与JS引擎线程的互斥"></a>GUI线程与JS引擎线程的互斥</h5><p>如果两者不互赤，由于JS可操作DOM，如果两者同时运行，会造成线程前后获得的元素数据可能不一致。</p><h5 id="webWorker"><a href="#webWorker" class="headerlink" title="webWorker"></a>webWorker</h5><ol><li>创建Worker时，JS引擎向浏览器申请开一个子线程（浏览器开的），JS线程与worker线程间通过特定方式通信，postMessage，onMessage，需要通过序列化对象与线程交互。</li></ol><h5 id="sharedWorker"><a href="#sharedWorker" class="headerlink" title="sharedWorker"></a>sharedWorker</h5><ol><li>WebWorker 只属于某个页面，不会和其他页面的 Render 进程(浏览器内核进程)共享</li><li>本质上就是进程和线程的区别。SharedWorker 由独立的进程管理，WebWorker 只是属于 render 进程下的一个线程。</li></ol><h4 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h4><p><em>从你输入URL到页面生成，经历了什么 ？</em><br>大致过程如下：</p><ol><li>输入url</li><li>浏览器主线程接管</li><li>dns查询IP，会通过缓存查，查浏览器缓存，系统缓存，路由器缓存直至请求到</li><li>发送http请求</li><li>三次确立握手</li><li>四次挥手断开连接</li><li>将返回内容交给Render进程</li><li>开始渲染</li><li>解析html构建dom树，构建CSS树，两者合为render树</li><li>绘制render树</li></ol><p>注：👉 <a href="/2020/07/09/2020/三次握手四次挥手">三次握手，四次挥手复习</a></p><p>几个概念：</p><ul><li>DOM Tree: 浏览器将 HTML 解析成树形的数据结构</li><li>CSS Rule Tree: 浏览器将 CSS 解析成树形的数据结构</li><li>Render Tree: DOM 和 CSSOM 合并后生成 Render Tree</li></ul><h4 id="CSS加载"><a href="#CSS加载" class="headerlink" title="CSS加载"></a>CSS加载</h4><p>CSS是由单独的下载线程异步下载的。<br>所有CSS不会阻塞DOM树解析，但会阻塞Render树渲染。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="/2021/04/12/2021/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2021/04/12/2021/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><em>原题链接：👉：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">最长回文子串</a></em></p><p>题目描述：给你一个字符串<code>s</code>，找到<code>s</code>的最长回文子串。</p><p>示例：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"babad"</span></span><br><span class="line">输出：<span class="string">"bab"</span></span><br><span class="line">解释：<span class="string">"aba"</span> 同样是符合题意的答案。</span><br></pre></td></tr></table></figure></p><p>本篇提供了三种解法：</p><ol><li>暴力解法</li><li>中心扩展</li><li>动态规划</li></ol><a id="more"></a><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>首先，题目是可以尝试使用暴力解的。</p><blockquote><p>思路：暴力解的思路是容易想到的，我们采用遍历不断取出字符串<code>s</code>的子串，对取出的子串进行回文判断，怎么判断呢？我们可以讲取出的子串对半切，第一个元素与最后一个对比，第二个与倒数第二个对比…</p></blockquote><ol><li>循环取出子串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> longestPalindrome = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>; <span class="comment">// 记录最长的回文子串长度</span></span><br><span class="line">    <span class="keyword">let</span> maxStr = <span class="string">''</span>; <span class="comment">// 记录最长的回文子串</span></span><br><span class="line">    <span class="keyword">let</span> sLen = s.length; <span class="comment">// 字符串的长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sLen; i++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt;= sLen; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> sonStr = s.slice(i, j);</span><br><span class="line">            <span class="keyword">if</span>(sonStr.length &gt; max &amp;&amp; isPalindrome(sonStr)) &#123; </span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * isPalindrome方法用于判断是否回文子串，并且长度大于max的情况下执行</span></span><br><span class="line"><span class="comment">                * 有必要先对比长度，如果子串长度都不如最长回文，则压根没必要进入回文的判断方法🌟</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                 max = sonStr.length;</span><br><span class="line">                 maxStr = sonStr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断是否回文</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isPalindrome = <span class="function">(<span class="params">sonStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> enmuLen = sonStr.length; <span class="comment">// 对半切 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; enmuLen / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sonStr.charAt(i) !== sonStr.charAt(enmuLen<span class="number">-1</span>-i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中心扩展法"><a href="#中心扩展法" class="headerlink" title="中心扩展法"></a>中心扩展法</h4><blockquote><p>思路：我们只要遍历，每次取出一个中心，从中心起始前后寻找，对比字符情况。</p></blockquote><p><img src="/2021/04/12/2021/最长回文子串/NO1.png" alt="NO1" title="NO1"></p><ol><li>中心取值</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> longestPalindrome = (<span class="built_in">str</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">str</span> === '') &#123;</span><br><span class="line">        <span class="keyword">return</span> '';</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">str</span>.length === <span class="number">2</span> &amp;&amp; <span class="built_in">str</span>.charAt(<span class="number">0</span>) === <span class="built_in">str</span>.charAt(<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span>; <span class="comment">// 记录最长回文的开头位置，结束位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">str</span>.length; i++ ) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = centerExpand(<span class="built_in">str</span>, i, i);</span><br><span class="line">        <span class="keyword">if</span>(len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>; </span><br><span class="line">            end = i + len / <span class="number">2</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.slice(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>中心扩展法对比</li></ol><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> centerExpand = (str, <span class="built_in">left</span>, <span class="built_in">right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> L = <span class="built_in">left</span>, R = <span class="built_in">right</span>;</span><br><span class="line">    while( L &gt;= <span class="number">0</span> &amp;&amp; R &lt; str.length &amp;&amp; str.charAt(L) === str.charAt(R) ) &#123;</span><br><span class="line">        L--;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><ol><li>定义状态<ul><li>dp[i,j]：字符串s从索引i到j的子串是否是回文串<ul><li>true： s[i,j] 是回文串</li><li>false：s[i,j] 不是回文串</li></ul></li></ul></li><li>转移方程<ul><li>dp[i][j] = dp[i+1][j-1] &amp;&amp; s[i] === s[j]<ul><li>s[i] === s[j]：表明当前中心可以继续扩张</li><li>d[i+1][j-1]： true<ul><li>说明子串<code>s[i+1][j-1]</code>也是回文串</li></ul></li></ul></li></ul></li><li>说明：i从最大值开始遍历，j从最小值开始遍历。</li><li>总结：<ul><li>dp[i][j] = s[i] == s[j] &amp;&amp; ( dp[i+1][j-1] || j - i &lt; 2)</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣-github的3D打印</title>
      <link href="/2021/04/05/2021/github%E7%9A%843D%E6%89%93%E5%8D%B0/"/>
      <url>/2021/04/05/2021/github%E7%9A%843D%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>github开放了一个平台，支持导出自己github账户的年度提交量，生成一个3D模型文件</p><p>尝试了一下，导出自己2020年的数据，😂还好不是只是一个平底座…<br>淘宝下单打印了，放在桌子上，提醒自己吧。</p><p><img src="/2021/04/05/2021/github的3D打印/NO1.png" alt="NO1" title="NO1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS手写Promise</title>
      <link href="/2021/04/01/2021/JS%E6%89%8B%E5%86%99Promise/"/>
      <url>/2021/04/01/2021/JS%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<p><em>转载至掘金文章，推荐查看原文</em></p><ol><li>👉：<a href="https://juejin.cn/post/6844903625769091079" target="_blank" rel="noopener">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></li><li>👉：<a href="https://juejin.cn/post/6945319439772434469" target="_blank" rel="noopener">从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节</a></li></ol><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h4 id="定义Promise"><a href="#定义Promise" class="headerlink" title="定义Promise"></a>定义Promise</h4><p>一般使用<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><em>so</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="built_in">Promise</span> &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    resolve = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">    reject = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解决基本状态"><a href="#解决基本状态" class="headerlink" title="解决基本状态"></a>解决基本状态</h4><ol><li>pending， fulfilled， rejected</li><li>pending -&gt; fulfilled / rejected</li><li>其他不可互转</li><li>new Promise((resolve, reject) =&gt; {resolve(value)})，resolve成功时，接受参数value，状态改为fulfilled，且不可变。</li><li>new Promise((resolve, reject) =&gt; {reject(reason)})，reject失败时，接收reason，状态为rejected，且不可再变。</li><li>若executor报错，则直接rejected。</li></ol><p><em>so</em></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    state = PENDING</span><br><span class="line"></span><br><span class="line">    value = undefined; <span class="comment">// 存储成功值</span></span><br><span class="line">    reason = <span class="literal">null</span>; <span class="comment">// 存储失败值</span></span><br><span class="line"></span><br><span class="line">    resolve = (value) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="comment">// 状态修改为成功</span></span><br><span class="line">        <span class="keyword">this</span>.status = FULFILLED;</span><br><span class="line">        <span class="comment">// 保存成功之后的值</span></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     reject = (reason) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="comment">// 状态成功为失败</span></span><br><span class="line">        <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">        <span class="comment">// 保存失败后的原因</span></span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><ol><li>Promise有一个then，里面有两个参数，onFulfilled，onRejected；</li><li>当state为fulfilled，则执行onFulfilled，并传入this.value；</li><li>当state为rejected，则执行onRejected，并传入this.reason。</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">            onFulfilled(<span class="keyword">this</span>.value); <span class="comment">// 传入，并执行onFulfilled</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason); <span class="comment">// 传入，并执行onRejected</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="暴露Promise"><a href="#暴露Promise" class="headerlink" title="暴露Promise"></a>暴露Promise</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.<span class="keyword">export</span> = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure><h2 id="加入异步"><a href="#加入异步" class="headerlink" title="加入异步"></a>加入异步</h2><h4 id="缓存成功失败回调"><a href="#缓存成功失败回调" class="headerlink" title="缓存成功失败回调"></a>缓存成功失败回调</h4><p>onFulfilledCallback = null;<br>onRejectedCallback = null;</p><h4 id="then中增加PENDING的处理"><a href="#then中增加PENDING的处理" class="headerlink" title="then中增加PENDING的处理"></a>then中增加PENDING的处理</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">then(<span class="keyword">on</span>Fulfilled, <span class="keyword">on</span>Rejected) &#123;</span><br><span class="line">    if(this.<span class="keyword">state</span> === FULFILLED) &#123;</span><br><span class="line">        <span class="keyword">on</span>Fulfilled(this.value); // 传入，并执行<span class="keyword">on</span>Fulfilled</span><br><span class="line">    &#125;</span><br><span class="line">    if(this.<span class="keyword">state</span> === REJECTED) &#123;</span><br><span class="line">        <span class="keyword">on</span>Rejected(this.reason); // 传入，并执行<span class="keyword">on</span>Rejected</span><br><span class="line">    &#125;</span><br><span class="line">    if(this.<span class="keyword">state</span> === PENDING) &#123;</span><br><span class="line">        // 先缓存，等等后续状态变化后执行</span><br><span class="line">        this.<span class="keyword">on</span>FulfilledCallback = <span class="keyword">on</span>Fulfilled;</span><br><span class="line">        this.<span class="keyword">on</span>RejectedCallback  = <span class="keyword">on</span>Rejected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resolve-reject调用回调"><a href="#resolve-reject调用回调" class="headerlink" title="resolve\reject调用回调"></a>resolve\reject调用回调</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resolve = value =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = FULFILLED;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilledCallback &amp;&amp; <span class="keyword">this</span>.onFulfilledCallback(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reject = reason =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reason =reason;</span><br><span class="line">        <span class="keyword">this</span>.state = REJECTED;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallback &amp;&amp; <span class="keyword">this</span>.onFulfilledCallback(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="then回调"><a href="#then回调" class="headerlink" title="then回调"></a>then回调</h2><p>多个then回调的话，需要保存不同的值，因为互不相同。</p><ol><li><p>Promise中回调处理为数组。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onFulfilledCallbacks</span> = []<span class="comment">;</span></span><br><span class="line"><span class="attribute">onnRejectedCallbacks</span> = []<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>回调函数存入数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status === FULFILLED)&#123;</span><br><span class="line">        onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilledCallbacks.push(onFulfilled);</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.push(onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resolve = (value) =&gt; &#123;     </span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;         </span><br><span class="line">         <span class="keyword">this</span>.status = FULFILLED;          </span><br><span class="line">         <span class="keyword">this</span>.value = value;        </span><br><span class="line">         <span class="comment">// resolve里面将所有成功的回调拿出来执行     </span></span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">this</span>.onFulfilledCallbacks.length) &#123;       </span><br><span class="line">             <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，shift不是纯函数，取出后，数组将失去该元素，直到数组为空       </span></span><br><span class="line">             <span class="keyword">this</span>.onFulfilledCallbacks.shift()(value)    </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">reject = reason =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">this</span>.onRejectedCallbacks.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallbacks.shift()(reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>so，截至目前我们的Promise是这样的</em></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line">onFulfilledCallbacks = [];</span><br><span class="line">onnRejectedCallbacks = [];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    state = PENDING</span><br><span class="line"></span><br><span class="line">    value = undefined; <span class="comment">// 存储成功值</span></span><br><span class="line">    reason = <span class="literal">null</span>; <span class="comment">// 存储失败值</span></span><br><span class="line"></span><br><span class="line">    resolve = (value) =&gt; &#123;     </span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;         </span><br><span class="line">             <span class="keyword">this</span>.status = FULFILLED;          </span><br><span class="line">             <span class="keyword">this</span>.value = value;        </span><br><span class="line">             <span class="comment">// resolve里面将所有成功的回调拿出来执行     </span></span><br><span class="line">             <span class="keyword">while</span> (<span class="keyword">this</span>.onFulfilledCallbacks.length) &#123;       </span><br><span class="line">                 <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，shift不是纯函数，取出后，数组将失去该元素，直到数组为空       </span></span><br><span class="line">                 <span class="keyword">this</span>.onFulfilledCallbacks.shift()(value)    </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">            <span class="keyword">this</span>.reason = reason;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">this</span>.onRejectedCallbacks.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.onRejectedCallbacks.shift()(reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.status === FULFILLED)&#123;</span><br><span class="line">            onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledCallbacks.push(onFulfilled);</span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallbacks.push(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.export = Promise;</span><br></pre></td></tr></table></figure><h4 id="then的链式调用"><a href="#then的链式调用" class="headerlink" title="then的链式调用"></a>then的链式调用</h4><p>如何实现then的链式调用呢？<br>在then里面返回一个Promise对象吗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span>() </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === PENDING ) &#123;</span><br><span class="line">                <span class="keyword">this</span>.onFulfilledCallbacks.push(onFulfilled);</span><br><span class="line">                <span class="keyword">this</span>.onRejectedCallbacks.push(onRejected);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">                onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">                <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                resolvePromise(x, resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是不是Promise的实例</span></span><br><span class="line">    <span class="keyword">if</span>(x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">        <span class="comment">// 是的话，执行then</span></span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则resolve</span></span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果x是自己的话，则应该有错误处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125;) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(promise2 === x) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="string">'...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h2><p>try，catch就可以了</p><h4 id="捕获执行器错误"><a href="#捕获执行器错误" class="headerlink" title="捕获执行器错误"></a>捕获执行器错误</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(executor)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    try&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        executor(this.resolve, this.reject);</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span> <span class="title">catch</span><span class="params">(e)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        this.reject(e)</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="then执行错误"><a href="#then执行错误" class="headerlink" title="then执行错误"></a>then执行错误</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> proimise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledCallbacks.push(onFulfilled)</span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallbacks.push(onRejected)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">            queueMicrotask(() =&gt; &#123;</span><br><span class="line">                <span class="comment">// 增加 try 处理</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">                &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;</span><br><span class="line">  <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">      queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">          <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;)  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123; </span><br><span class="line">      <span class="comment">// ==== 新增 ====</span></span><br><span class="line">      <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">      queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">          <span class="keyword">const</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">          <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;) </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 等待</span></span><br><span class="line">      <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">      <span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">      <span class="keyword">this</span>.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ==== 新增 ====</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">            <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;) </span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ==== 新增 ====</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">            <span class="keyword">const</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;) </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其余优化"><a href="#其余优化" class="headerlink" title="其余优化"></a>其余优化</h2><h4 id="实现resolve，reject的静态调用"><a href="#实现resolve，reject的静态调用" class="headerlink" title="实现resolve，reject的静态调用"></a>实现resolve，reject的静态调用</h4><p>Promise支持如下执行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>因此还需要修改一下，增加静态方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> resolve(param) &#123;</span><br><span class="line">    <span class="keyword">if</span>(param <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(param)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> reject (reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 Promise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor)&#123;</span><br><span class="line">    <span class="comment">// executor 是一个执行器，进入会立即执行</span></span><br><span class="line">    <span class="comment">// 并传入resolve和reject方法</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">  status = PENDING;</span><br><span class="line">  <span class="comment">// 成功之后的值</span></span><br><span class="line">  value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 失败之后的原因</span></span><br><span class="line">  reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储成功回调函数</span></span><br><span class="line">  onFulfilledCallbacks = [];</span><br><span class="line">  <span class="comment">// 存储失败回调函数</span></span><br><span class="line">  onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更改成功后的状态</span></span><br><span class="line">  resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 状态修改为成功</span></span><br><span class="line">      <span class="keyword">this</span>.status = FULFILLED;</span><br><span class="line">      <span class="comment">// 保存成功之后的值</span></span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">      <span class="comment">// resolve里面将所有成功的回调拿出来执行</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">this</span>.onFulfilledCallbacks.length) &#123;</span><br><span class="line">        <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，shift不是纯函数，取出后，数组将失去该元素，直到数组为空</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledCallbacks.shift()(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更改失败后的状态</span></span><br><span class="line">  reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 状态成功为失败</span></span><br><span class="line">      <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">      <span class="comment">// 保存失败后的原因</span></span><br><span class="line">      <span class="keyword">this</span>.reason = reason;</span><br><span class="line">      <span class="comment">// resolve里面将所有失败的回调拿出来执行</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">this</span>.onRejectedCallbacks.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.shift()(reason)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> realOnFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fulfilledMicrotask = <span class="function"><span class="params">()</span> =&gt;</span>  &#123;</span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">            <span class="keyword">const</span> x = realOnFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;)  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> rejectedMicrotask = <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">            <span class="keyword">const</span> x = realOnRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;) </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断状态</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        fulfilledMicrotask() </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123; </span><br><span class="line">        rejectedMicrotask()</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">        <span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledCallbacks.push(fulfilledMicrotask);</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.push(rejectedMicrotask);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve (parameter) &#123;</span><br><span class="line">    <span class="comment">// 如果传入 Promise 就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转成常规方式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  &#123;</span><br><span class="line">      resolve(parameter);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reject 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> reject (reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Chaining cycle detected for promise #&lt;Promise&gt;'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断x是不是 Promise 实例对象</span></span><br><span class="line">  <span class="keyword">if</span>(x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">    <span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">    <span class="comment">// 简化之后</span></span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 普通值</span></span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>column-count描述元素的列数</title>
      <link href="/2021/03/01/2021/column-count%E6%8F%8F%E8%BF%B0%E5%85%83%E7%B4%A0%E7%9A%84%E5%88%97%E6%95%B0/"/>
      <url>/2021/03/01/2021/column-count%E6%8F%8F%E8%BF%B0%E5%85%83%E7%B4%A0%E7%9A%84%E5%88%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count" target="_blank" rel="noopener">column-count</a><br>将元素划分几列</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP缓存</title>
      <link href="/2021/02/26/2021/HTTP%E7%BC%93%E5%AD%98/"/>
      <url>/2021/02/26/2021/HTTP%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>Http缓存的主要三个角色：浏览器、浏览器缓存数据库、服务器；</p><p>缓存类型：<code>强缓存</code>、<code>协商缓存</code>。</p><a id="more"></a><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>两个规则字段，基本原理：所请求的数据在缓存数据库中尚未过期时，不与服务器进行交互，直接使用缓存数据库中的数据。</p><p>当缓存未过期时基本流程如下</p><ol><li>Expire(http1.0字段)</li><li>Cache-Control(通用消息头，通过指定指令实现缓存机制)<ul><li>private：客户端可以缓存；</li><li>public：客户端和代理服务器都可以缓存；</li><li>max-age=xxx：缓存内容将在XXX秒后失效；</li><li>s-max-age=xxx：仅适用共享缓存，并且私有缓存中忽略；</li><li>no-cache：需要使用协商缓存来验证缓存数据；</li><li>no-store：所有内容都不缓存，强缓存和协商缓存都不生效；</li><li>must-revalidate：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</li></ul></li></ol><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>基本原理：</p><ol><li>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将两者备份至缓存数据库中；</li><li>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功返回304状态码，通知客户端使用缓存数据。</li></ol><p><em>规则字段：</em></p><ol><li>Last-Modified</li></ol><ul><li>服务器在响应请求时，告诉浏览器的最后修改时间。</li></ul><ol start="2"><li>If-Modified-Since规则：</li></ol><ul><li>再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。</li><li>服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。</li><li>若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；</li><li>若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</li></ul><p><em>以下优先级高于上面两者！</em></p><ol><li>Etag：</li></ol><ul><li>服务器资源的唯一标识符, 浏览器可以根据ETag值缓存数据, 节省带宽. 如果资源已经改变, etag可以帮助防止同步更新资源的相互覆盖. ETag 优先级比 Last-Modified 高.</li></ul><ol start="2"><li>If-None-Match</li></ol><ul><li>再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。</li><li>服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，</li><li>不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；</li><li>相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</li></ul><p><img src="/2021/02/26/2021/HTTP缓存/NO1.png" alt="NO1" title="NO1"></p><h3 id="Q？"><a href="#Q？" class="headerlink" title="Q？"></a>Q？</h3><ul><li>哪些不能缓存？<ol><li>不能被缓存的请求HTTP 信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0 等告诉浏览器不用缓存的请求</li><li>需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的</li><li>经过HTTPS安全加密的请求（有人也经过测试发现，ie 其实在头部加入 Cache-Control：max-age 信息，firefox 在头部加入 Cache-Control:Public 之后，能够对HTTPS的资源进行缓存）</li><li>HTTP 响应头中不包含 Last-Modified/Etag，也不包含 Cache-Control/Expires 的请求无法被缓存</li><li>目前浏览器的实现是不会对POST请求的响应做缓存的（从语义上来说也不应该），并且规范中也规定了返回状态码不允许是304。不过这并不表示POST的响应不能被缓存，根据RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content中描述的，如果在POST请求对应的响应中包含Freshness相关信息的话，这次响应也是可以被缓存，具体可以参考上面的那个链接</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS与stylus与CSSVar的相互作用</title>
      <link href="/2021/01/08/2021/JS%E4%B8%8Estylus%E4%B8%8ECSSVar%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8/"/>
      <url>/2021/01/08/2021/JS%E4%B8%8Estylus%E4%B8%8ECSSVar%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>场景是这样的：<br>使用stylus给所有的stylus文件混入一个”是否适配”的变量，<br>从而达到改变这个CSS变量，同时可以影响JS中的rem设定，以及Sylus的响应。</p><p><em>stylusVariableMixin.styl</em><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mediaVersion = <span class="literal">false</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>而本身在JS中需要设置font-size<br><em>mixin.ts</em><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 菜单定义等应用会设置font-size,故需要重置一下,不能在目录直接一次设置 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Vue</span>, <span class="type">Component</span>, <span class="type">Watch</span> &#125; from <span class="symbol">'vue</span>-property-decorator';</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">fontSizeMixin</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算rem</span></span><br><span class="line">    <span class="keyword">private</span> setFontSize() &#123;</span><br><span class="line">        let htmlDOM = document.documentElement,</span><br><span class="line">        clientWidth = htmlDOM.offsetWidth;</span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         htmlDOM.style.fontSize = <span class="number">10</span> * (clientWidth / <span class="number">1366</span>) + <span class="symbol">'p</span>x';</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setFontSize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> activated() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setFontSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以思考着能不能将stylus中的”适配标识“让JS能操作到</p><p>后来查阅多重资料发现，JS并不能对stylus预处理器做什么操作</p><p>再后来，希望借由  CSS,达到这个目的</p><p>stylus — css — JS</p><p>借助CSS之手，让JS实现读取这一变量</p><p>实现如下：<br>①定义全局变量<br><em>stylusVariableMixin.styl</em><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mediaVersion = <span class="literal">false</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>②在打包时混入，（这一步还有给其他stylus文件使用的原因）</p><p><em>webpack_dev_xxx.config.js</em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attribute">test</span>: /\.<span class="built_in">styl</span>(us)?$/,</span><br><span class="line">      use: [<span class="string">"style-loader"</span>, <span class="string">"vue-style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"stylus-loader"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">              loader: <span class="string">'style-resources-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                  patterns: [</span><br><span class="line">                      path.<span class="built_in">resolve</span>(__dirname, <span class="string">'./css/stylusVariableMixin.styl'</span>)</span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>③自定义CSS变量接收全局变量<br><em>common.stylus</em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--global-bool</span>: $mediaVersion;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>④JS读取<br><em>mixin.ts</em><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> setFontSize() &#123;</span><br><span class="line">        <span class="keyword">let</span> htmlDOM = <span class="built_in">document</span>.documentElement,</span><br><span class="line">        clientWidth = htmlDOM.offsetWidth;</span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据  stylusVariableMixin.styl 及 common.stylus 混入的变量进行的适配判断</span></span><br><span class="line">        <span class="keyword">let</span> rootStyle = getComputedStyle(<span class="built_in">document</span>.documentElement); </span><br><span class="line">        <span class="keyword">let</span> judgeBool = rootStyle.getPropertyValue(<span class="string">'--global-bool'</span>).trim();</span><br><span class="line">        <span class="keyword">if</span>(judgeBool === <span class="string">'true'</span>) &#123;</span><br><span class="line">            htmlDOM.style.fontSize = <span class="number">10</span> * (clientWidth / <span class="number">1366</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            htmlDOM.style.fontSize = <span class="number">10</span>  + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>—-结束—<br>写的匆忙，可能描述不够细致，见谅。</p><p>读取CSS中自定义变量的方法<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let rootStyle</span> = getComputedStyle(document.documentElement); </span><br><span class="line"><span class="attribute">        let judgeBool</span> = rootStyle.getPropertyValue(<span class="string">'--global-bool'</span>).trim();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> Stylus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS&amp;HTML</title>
      <link href="/2021/01/01/web/CSS/"/>
      <url>/2021/01/01/web/CSS/</url>
      
        <content type="html"><![CDATA[<h4 id="重绘回流"><a href="#重绘回流" class="headerlink" title="重绘回流"></a>重绘回流</h4><p>👉： <a href="/2020/02/03/2020/重绘回流">浏览器重绘回流复习</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Web </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2021/01/01/web/HTTP/"/>
      <url>/2021/01/01/web/HTTP/</url>
      
        <content type="html"><![CDATA[<h4 id="三次握手-amp-四次挥手"><a href="#三次握手-amp-四次挥手" class="headerlink" title="三次握手&amp;四次挥手"></a>三次握手&amp;四次挥手</h4><p>👉： <a href="/2020/07/09/2020/三次挥手四次握手">三次握手四次挥手复习</a> </p><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><p>👉： <a href="/2020/10/28/2020/HTTP常见状态码">HTTP常见状态码</a> </p><h4 id="输入URL到页面构建"><a href="#输入URL到页面构建" class="headerlink" title="输入URL到页面构建"></a>输入URL到页面构建</h4><p>👉： <a href="/2021/04/12/2021/浏览器的多线程">输入URL到页面构建，向后翻一点</a> </p><h4 id="HTTPS连接过程"><a href="#HTTPS连接过程" class="headerlink" title="HTTPS连接过程"></a>HTTPS连接过程</h4><p>👉： <a href="/2020/07/09/2020/HTTPS连接过程">HTTPS连接过程</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题</title>
      <link href="/2021/01/01/web/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2021/01/01/web/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>打算开多一个目录，收录遇到的题目，包含算法或者Web的各方面</p><p>加油吧，少年！</p><p><img src="/2021/01/01/web/每日一题/learning.jpg" alt="NO2" title="NO2"></p><a id="more"></a><h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h4><p>👉： <a href="/2021/04/12/2021/最长回文子串">最长回文子串</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/2021/01/01/web/JS/"/>
      <url>/2021/01/01/web/JS/</url>
      
        <content type="html"><![CDATA[<h4 id="call函数模拟"><a href="#call函数模拟" class="headerlink" title="call函数模拟"></a>call函数模拟</h4><p>👉： <a href="/2019/01/23/2019/JScall模拟">JS-Call实现</a></p><h4 id="apply函数模拟"><a href="#apply函数模拟" class="headerlink" title="apply函数模拟"></a>apply函数模拟</h4><p>👉： <a href="/2019/01/23/2019/JSapply模拟">JS-Apply实现</a></p><h4 id="bind函数模拟"><a href="#bind函数模拟" class="headerlink" title="bind函数模拟"></a>bind函数模拟</h4><p>👉： <a href="/2019/01/24/2019/JSbind模拟">JS-bind实现</a></p><a id="more"></a><h4 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = fn.length; <span class="comment">// function.length即参数个数, 此处为3</span></span><br><span class="line">    <span class="keyword">var</span> args_ = args || [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _args = args_.slice(<span class="number">0</span>), args, i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            args = <span class="built_in">arguments</span>[i];</span><br><span class="line">            _args.push(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(_args.length &lt; length) &#123; <span class="comment">// 与预设参数个数的比较</span></span><br><span class="line">            <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([a, b, c]);</span><br><span class="line">&#125;)</span><br><span class="line">fn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">fn(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="JS-EventLoop"><a href="#JS-EventLoop" class="headerlink" title="JS EventLoop"></a>JS EventLoop</h4><p>👉：<a href="/2020/06/12/2020/EventLoop">EventLoop</a></p><h4 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流? 防抖?"></a>节流? 防抖?</h4><p>防抖: 在事件被触发n秒内再执行回调，若n秒内再次触发，则重新开始计时。<br>节流: 每隔一段时间，只执行一次函数。<br>区别：</p><ul><li>在timer存在时，处理方式不同</li><li>执行结束后，节流会使timer = null;</li></ul><p>防抖：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function debounce(fn, <span class="built_in">delay</span>) &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">timer</span>;</span><br><span class="line">    <span class="built_in">return</span> funtion() &#123;</span><br><span class="line">        <span class="built_in">var</span> _this = this;</span><br><span class="line">        <span class="built_in">var</span> <span class="built_in">args</span> = arguments;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">timer</span>) &#123;</span><br><span class="line">            clearTimeout(<span class="built_in">timer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">timer</span> = setTimeout(function() &#123;</span><br><span class="line">            fn.<span class="built_in">apply</span>(_this, <span class="built_in">args</span>);</span><br><span class="line">        &#125;, <span class="built_in">delay</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>节流：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// return </span></span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(_this, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="async函数原理"><a href="#async函数原理" class="headerlink" title="async函数原理"></a>async函数原理</h4><p>👉：<a href="/2020/06/30/2020/async-await原理">Async/await原理</a></p><h4 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h4><p>👉：<a href="/2020/05/11/2020/cors跨域">跨域请求</a></p><h4 id="XSS、CSRF"><a href="#XSS、CSRF" class="headerlink" title="XSS、CSRF"></a>XSS、CSRF</h4><p>👉：<a href="/2020/08/11/2020/XSS-CSRF">XSS、CSRF相关</a></p><h4 id="JS类型判断"><a href="#JS类型判断" class="headerlink" title="JS类型判断"></a>JS类型判断</h4><ol><li><p>typeof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tyepof <span class="string">''</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(); <span class="comment">// Symbol</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object(无效)</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object(无效)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>(); <span class="comment">// object(无效)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// object(无效)</span></span><br></pre></td></tr></table></figure></li><li><p>instanceof<br>instanceof的机制是检测构造函数的prototype属性是否出现在某个实例对象的原型链上，是则返回true，否则false。</p></li><li><p>constructor<br>函数的constructor是不稳定的，这个主要是如果是自定义对象，重写prototype之后，原有的constructor会丢失。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.constructor == <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>).constructor == <span class="built_in">Number</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span>.constructor == <span class="built_in">Boolean</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span>().constructor == <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().constructor == <span class="built_in">Date</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Error</span>().constructor == <span class="built_in">Error</span> <span class="comment">// true</span></span><br><span class="line">[].constructor == <span class="built_in">Array</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>toString<br>toString()是调用Object的原型方法，调用该方法，但会当前对象Class</p></li></ol><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(''); // [object <span class="type">String</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(1); // [object <span class="type">Number</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(true); // [object <span class="type">Boolean</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(<span class="type">Symbol</span>()); // [object <span class="type">Symbol</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(undefined); // [object <span class="type">Undefined</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(null); // [object <span class="type">Null</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(new <span class="type">Function</span>()); // [object <span class="type">Function</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(new <span class="type">Date</span>()); // [object <span class="type">Date</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call([]); // [object <span class="type">Array</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(new <span class="type">Error</span>()); // [object <span class="type">Error</span>]</span><br><span class="line"><span class="type">Object</span>.proto<span class="keyword">type</span>,toString.call(document); // [object <span class="type">HTMLDocument</span>]</span><br></pre></td></tr></table></figure><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><p>👉：<a href="/2019/10/17/2019/this指向">this指向</a></p><h4 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a>JS垃圾回收机制</h4><p>👉：<a href="/2020/09/23/2020/垃圾回收机制">垃圾回收机制</a></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。<br>其实简单了讲就是：在函数外拿到了函数内的变量(个人理解)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'haveFun'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = makeFun();</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>👉：<a href="/2019/12/15/2019/JS原型链">原型链</a></p><h4 id="JS模块化演进"><a href="#JS模块化演进" class="headerlink" title="JS模块化演进"></a>JS模块化演进</h4><p>👉：<a href="/2020/09/28/2020/JS模块化演进">模块化</a></p><h4 id="JS继承"><a href="#JS继承" class="headerlink" title="JS继承"></a>JS继承</h4><p>👉：<a href="/2019/01/23/2019/JavaScript继承">JS继承</a></p><h4 id="JS手写Promise"><a href="#JS手写Promise" class="headerlink" title="JS手写Promise"></a>JS手写Promise</h4><p>👉：<a href="/2021/04/01/2021/JS手写Promise">JS手写Promise</a></p><h4 id="浏览器进程相关"><a href="#浏览器进程相关" class="headerlink" title="浏览器进程相关"></a>浏览器进程相关</h4><p>👉：<a href="/2021/04/12/2021/浏览器的多线程">浏览器的多线程</a></p><h4 id="JS设计模式相关"><a href="#JS设计模式相关" class="headerlink" title="JS设计模式相关"></a>JS设计模式相关</h4><p>👉：<a href="/2020/09/29/2020/JS设计模式">JS设计模式</a></p><p><em>未完待续…</em>s</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interview</title>
      <link href="/2021/01/01/web/interview/"/>
      <url>/2021/01/01/web/interview/</url>
      
        <content type="html"><![CDATA[<p>收集整理的前端面试相关…</p><p><img src="/2021/01/01/web/interview/MO1.png" alt="NO1" title="NO1"></p><a id="more"></a><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>👉： <a href="/2021/01/01/web/JS">JS面试相关</a></p><h2 id="CSS-amp-HTML"><a href="#CSS-amp-HTML" class="headerlink" title="CSS&amp;HTML"></a>CSS&amp;HTML</h2><p>👉： <a href="/2021/01/01/web/CSS">CSS、HTML面试相关</a></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>👉： <a href="/2021/01/01/web/HTTP">HTTP面试相关</a></p><h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p>👉： <a href="/2021/01/01/web/每日一题">每日一题，包含算法及Web的各方面</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stylus_media</title>
      <link href="/2020/12/26/2020/stylus-media/"/>
      <url>/2020/12/26/2020/stylus-media/</url>
      
        <content type="html"><![CDATA[<p>渲染字体响应</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">media_queries = &#123;</span><br><span class="line">  small: <span class="string">"only screen and (width: 1366px)"</span>,</span><br><span class="line">  big: <span class="string">"only screen and (width: 1920px)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fontSizeIter</span><span class="params">(smallSize, bigSize)</span></span></span><br><span class="line">    +for_fontSize(small)</span><br><span class="line">        fontSize(smallSize)</span><br><span class="line">    +for_fontSize(big)</span><br><span class="line">        fontSize(bigSize)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for_fontSize</span><span class="params">(breakpoints)</span></span></span><br><span class="line">  conditions = ()</span><br><span class="line">  <span class="keyword">for</span> breakpoint <span class="keyword">in</span> breakpoints</span><br><span class="line">    push(conditions, media_queries[breakpoint])</span><br><span class="line">  conditions = join(<span class="string">""</span>, conditions)</span><br><span class="line">  @media conditions</span><br><span class="line">    &#123;block&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fontSize</span><span class="params">(<span class="variable">$size</span>)</span></span></span><br><span class="line">  <span class="attribute">font-size</span> <span class="variable">$size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#unicomView</span><br><span class="line">    .<span class="attribute">font</span>-<span class="number">12</span>-<span class="number">17</span></span><br><span class="line">        fontSizeIter(<span class="number">12px</span>, <span class="number">17px</span>)</span><br><span class="line">    .<span class="attribute">font</span>-<span class="number">14</span>-<span class="number">20</span></span><br><span class="line">        fontSizeIter(<span class="number">14px</span>, <span class="number">20px</span>)</span><br><span class="line">    .<span class="attribute">font</span>-<span class="number">16</span>-<span class="number">22</span></span><br><span class="line">        fontSizeIter(<span class="number">16px</span>, <span class="number">22px</span>)</span><br><span class="line">    .<span class="attribute">font</span>-<span class="number">24</span>-<span class="number">34</span></span><br><span class="line">        fontSizeIter(<span class="number">24px</span>, <span class="number">34px</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Stylus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My</title>
      <link href="/2020/12/01/2020/My/"/>
      <url>/2020/12/01/2020/My/</url>
      
        <content type="html"><![CDATA[<p>今年，最大的收获，就是，疫情期间，开始给自己做大厨了…</p><p><img src="/2020/12/01/2020/My/NO12.jpg" alt="NO12" title="NO12"></p><p><strong>丢人现菜😏</strong></p><a id="more"></a><p><img src="/2020/12/01/2020/My/NO1.jpg" alt="NO1" title="NO1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP常见状态码</title>
      <link href="/2020/10/28/2020/HTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2020/10/28/2020/HTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>在XMLHttpRequest请求中，也有五个状态码:</p><p>XMLHttpRequest的状态码：<br>0— 未初始化，尚未调用open()方法<br>1—启动，已经调用open()方法，并未send()<br>2—发送，已经send,但未收到响应<br>3—接收<br>4—完成</p><p>HTTP的状态码：</p><a id="more"></a><h4 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h4><p>表示请求已经接受，需要继续处理，HTTP/1.0协议中没有定义1xx状态码，除非在某些实验下，否则服务器禁止发送1xx响应</p><h5 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h5><p>服务端已经接收，且仍未拒绝，客户端应该继续请求</p><h4 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h4><h5 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h5><p>请求已经成功，响应与数据都随此返回。</p><h5 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h5><p>服务器已经接收请求，但尚未处理；<br>返回目的是允许服务器执行其他过程请求，例如每天执行一次的批请求，不必让客户端与服务器一直连接等待完成，所有可以先返回202。</p><h5 id="204-Not-Content"><a href="#204-Not-Content" class="headerlink" title="204 Not Content"></a>204 Not Content</h5><p>服务器已经处理请求，但没有返回任何实体内容，浏览器显示的页面不会发生更新</p><h5 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h5><p>服务器成功处理请求，且没有返回任何实体内容，但希望请求者重置文档视图，更新浏览器页面，这一点与204不同，例如重置表单</p><h5 id="Partial-Content"><a href="#Partial-Content" class="headerlink" title="Partial Content"></a>Partial Content</h5><p>服务器成功处理部分GET请求，类似FlashGet或者迅雷这里HTTP下载工具，使用这种响应断点续传或者下载，返回之后让用户自行选择下载之类的行为</p><h4 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h4><p>3xx这类状态码需要客户端采取进一步操作，才能完成请求，一般是重定向问题，当且请求的方法是GET或者HEAD时，浏览器才会自动提交执行后续操作，一般尝试次数不超过五次</p><h5 id="301-Moved-Permanently-永久重定向"><a href="#301-Moved-Permanently-永久重定向" class="headerlink" title="301 Moved Permanently    永久重定向"></a>301 Moved Permanently    永久重定向</h5><p>请求资源已经永久移动到新位置，返回的是新URI在响应的location域，如果不是<code>GET</code>或<code>HEAD</code>，浏览器将禁止重定向</p><h5 id="302-Found-临时重定向"><a href="#302-Found-临时重定向" class="headerlink" title="302 Found    临时重定向"></a>302 Found    临时重定向</h5><p>请求的资源临时从不同的URL中请求，这样的重定向是临时的</p><h5 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h5><p>请求的资源中存在另一个URL，将重定向使用GET方法获取，与302的区别是302不会改变请求的方法，对于303使用POST请求后，重定向会转为GET方法</p><h5 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h5><p>客户端发送附带条件的GET请求后，服务器处理而返回的文档内容自从上次访问依赖没有改变，则服务器返回这个状态码，例如在协商缓存的情况下，获取资源</p><p><em>浏览器缓存复习</em></p><p>👉：<a href="/2021/02/26/2021/HTTP缓存">HTTP缓存机制</a></p><h5 id="307-Temporart-Redirect"><a href="#307-Temporart-Redirect" class="headerlink" title="307 Temporart Redirect"></a>307 Temporart Redirect</h5><p>请求的资源临时从不同URL中响应，这样的重定向是临时的<br>307不指定客户端用什么样的请求方法，与302、303不同，不改变方法</p><h4 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h4><p>客户端发生错误</p><h5 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h5><p>包含语法错误，当前请求无法被理解，客户端修改后再试</p><h5 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h5><p>需要认证？</p><h5 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h5><p>服务器理解客户请求，但拒绝处理它，资源不可用，通常服务器上文件或者目录设置导致，例如在nginx转发，上次文件超过nginx大小限制时。</p><h5 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h5><p>服务器找不到指定资源，通常被用于不想透露拒绝请求的原因，可参看403</p><h5 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h5><p>请求的方法无法同于请求响应的资源，返回的响应会指明Allow接受的请求方法</p><h4 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h4><p>服务器本身出错，或者没有足够的能力来处理请求，有异常状态</p><h5 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h5><p>服务器遇到未曾预料的状态，导致无法完成请求处理</p><h5 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h5><p>服务器不支持当前请求所需要的功能，服务器无法识别请求的方法</p><h5 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h5><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应，也就是中转的那个服务器收到更上层服务器的无效响应，例如在nginx代理的时候，断网的时候。</p><h5 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h5><p>服务器临时维护，服务器当前无法处理请求，在一段时间后恢复；</p><h5 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h5><ol><li>作为网关或代理工作的服务器尝试执行请求时，<strong>未能及时</strong>从上游服务器接收到响应；</li><li><strong>与502的区别</strong>，502已经建立了连接，但超时，504与后端连接未建立，超时。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式</title>
      <link href="/2020/09/29/2020/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/29/2020/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h3><p>本篇将介绍以下几种设计模式：</p><ol><li>构造器模式</li><li>模块化模式</li><li>暴露模块模式</li><li>单例模式</li><li>观察者模式</li><li>发布订阅模式</li><li>中介者模式</li><li>原型模式</li><li>命令模式</li><li>外观模式</li><li>工厂模式</li><li>Mixin模式</li><li>装饰模式</li><li>MVC模式</li><li>创建者模式</li></ol><a id="more"></a><p>对于JSer来说，可能实际开发上用到的可能会没有那么多，但是学学也不错😭，（本菜可能接触的也不过几种）。</p><h4 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h4><ol><li>构造函数：<br>在这个构造器内部，关键字this引用到刚被创建的对象。回到对象创建，一个基本的构造函数看起来像这样:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.model&#125;</span> + <span class="subst">$&#123;<span class="keyword">this</span>.year&#125;</span> + <span class="subst">$&#123;<span class="keyword">this</span>.miles&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> civic = <span class="keyword">new</span> Car( <span class="string">"Honda Civic"</span>, <span class="number">2009</span>, <span class="number">20000</span> );</span><br><span class="line"><span class="keyword">var</span> mondeo = <span class="keyword">new</span> Car( <span class="string">"Ford Mondeo"</span>, <span class="number">2010</span>, <span class="number">5000</span> );</span><br><span class="line"><span class="built_in">console</span>.log(civic.toString());</span><br></pre></td></tr></table></figure><p>缺陷: 每个对象都会带上 <code>toString</code> 之类的函数</p><ol start="2"><li>原型链版构造器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car_prop</span>(<span class="params"> model, year, miles </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">Car_prop.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> civic_prop = <span class="keyword">new</span> Car_prop( <span class="string">"Honda Civic"</span>, <span class="number">2009</span>, <span class="number">20000</span> );</span><br><span class="line"><span class="keyword">var</span> mondeo_prop = <span class="keyword">new</span> Car_prop( <span class="string">"Ford Mondeo"</span>, <span class="number">2010</span>, <span class="number">5000</span> );</span><br><span class="line"><span class="built_in">console</span>.log(civic_prop.toString());</span><br></pre></td></tr></table></figure></li></ol><h4 id="模块化模式"><a href="#模块化模式" class="headerlink" title="模块化模式"></a>模块化模式</h4><ol><li>模块化模式最初被定义为一种对传统软件工程中的类提供私有和公共封装的方法。</li><li>通过这种方式 可以在单一对象中包含公共/私有方法和变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testModuleMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        incrementCounter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> counter++;</span><br><span class="line">        &#125;,</span><br><span class="line">        resetCounter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`reset counter`</span>);</span><br><span class="line">            counter = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">testModule.incrementCounter();</span><br><span class="line">testModule.resetCounter();</span><br></pre></td></tr></table></figure><p><em>进阶</em></p><p>包含了命名控件，公共变量，私有变量，潜藏闭包的形式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySpaceName = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myPrivateVar = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> myPrivateMethod = <span class="function"><span class="keyword">function</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        myPublicVar: <span class="string">'Foo'</span>,</span><br><span class="line">        muPubliceMethod: <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">            myPrivateVar++;</span><br><span class="line">            myPrivateMethod(bar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>缺陷：定义了公共/私用成员 但是要改的时候 就得在成员的方法上修改代码</p><h4 id="暴露模块模式"><a href="#暴露模块模式" class="headerlink" title="暴露模块模式"></a>暴露模块模式</h4><ol><li>我们可以简单地在私有域中定义我们所有的函数和变量，并且返回一个匿名对象，这个对象包含有一些指针，这些指针指向我们想要暴露出来的私有成员，使这些私有成员公有化</li><li>这个模式可以用于将私有函数和属性以更加规范的命名方式展现出来。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myRevealingModule = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> privateVar = <span class="string">"Ben Cherry"</span>,</span><br><span class="line">        publicVar  = <span class="string">"Hey there!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"Name:"</span> + privateVar );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicSetName</span>(<span class="params"> strName </span>) </span>&#123;</span><br><span class="line">        privateVar = strName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicGetName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        privateFunction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Reveal public pointers to </span></span><br><span class="line">    <span class="comment">// private functions and properties</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setName: publicSetName,</span><br><span class="line">        greeting: publicVar,</span><br><span class="line">        getName: publicGetName</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">myRevealingModule.setName( <span class="string">"Paul Kinlan"</span> );</span><br></pre></td></tr></table></figure></li></ol><ul><li>优势: 使脚本语法更加一致 公共访问更加清晰 增强了可读性</li><li>缺陷: <ol><li>这个模式的一个缺点是如果私有函数需要使用公有函数，那么这个公有函数在需要打补丁的时候就不能被重载。因为私有函数仍然使用的是私有的实现，并且这个模式不能用于公有成员，只用于函数。</li><li>公有成员使用私有成员也遵循上面不能打补丁的规则。因为上面的原因，使用暴露式模块模式创建的模块相对于原始的模块模式更容易出问题，因此在使用的时候需要小心。</li></ol></li></ul><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul><li>特点：唯一、全局访问</li></ul><ol><li>简单版单例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.instace)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sunner = Singleton.getInstance(<span class="string">"sunner"</span>);   <span class="comment">//winner</span></span><br><span class="line"><span class="built_in">console</span>.log(sunner.getName())</span><br></pre></td></tr></table></figure><p>不足：创建对象和实例操作耦合在一起 不符合 单一职责</p><ol start="2"><li><p>改良版，使用闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createSingleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">if</span>(instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">createSingleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> winner = <span class="keyword">new</span> createSingleton(<span class="string">"winner"</span>);  <span class="comment">//winner</span></span><br><span class="line"><span class="built_in">console</span>.log(winner.getName());</span><br></pre></td></tr></table></figure></li><li><p>代理版单例</p></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let proxyCreateSingleton = function() &#123;</span><br><span class="line">    let<span class="built_in"> instance </span>= <span class="literal">null</span>;</span><br><span class="line">    return function(name) &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance) &#123; return<span class="built_in"> instance </span>&#125;</span><br><span class="line">        return<span class="built_in"> instance </span>= new singleProxy(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function singleProxy(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">singleProxy.prototype.getName = function() &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">let winner_Proxy = new proxyCreateSingleton(<span class="string">"winner"</span>);</span><br><span class="line">console.log(winner_Proxy.getName());</span><br></pre></td></tr></table></figure><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>被观察者 - 观察者</p><ol><li>一个或者更多的观察者对一个被观察者的状态感兴趣，将自身的这种兴趣通过附着自身的方式注册在被观察者身上；</li><li>当被观察者发生变化，而这种便可也是观察者所关心的，就会产生一个通知，这个通知将会被送出去，最后将会调用每个观察者的更新方法；</li><li>当观察者不在对被观察者的状态感兴趣的时候，它们只需要简单的将自身剥离即可</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span>    <span class="comment">Subject</span>      <span class="comment">(notify)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;      <span class="comment">Observer1</span></span><br><span class="line"><span class="comment"></span>        <span class="comment">|</span></span><br><span class="line"><span class="comment"></span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(notify)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;       <span class="comment">Observer2</span></span><br><span class="line"><span class="comment"></span>        <span class="comment">|</span></span><br><span class="line"><span class="comment"></span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(notify)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;       <span class="comment">Observer3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span> <span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>实现ObserList</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">function ObserverList()&#123;</span><br><span class="line">    this.observerList = [];</span><br><span class="line">&#125;</span><br><span class="line">ObserverList.prototype.add = function( obj )&#123;</span><br><span class="line">    return this.observerList.push( obj );</span><br><span class="line">&#125;;</span><br><span class="line">ObserverList.prototype.count = function()&#123;</span><br><span class="line">    return this.observerList.length;</span><br><span class="line">&#125;;</span><br><span class="line">ObserverList.prototype.get = function( index )&#123;</span><br><span class="line">    if( index &gt; -1 &amp;&amp; index &lt; this.observerList.length )&#123;</span><br><span class="line">        return this.observerList[ index ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ObserverList.prototype.indexOf = function( obj, startIndex )&#123;</span><br><span class="line">    var i = startIndex;</span><br><span class="line">    while( i &lt; this.observerList.length )&#123;</span><br><span class="line">        if( this.observerList[i] === obj )&#123;</span><br><span class="line">            return i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">i++;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;;</span><br><span class="line">ObserverList.prototype.removeAt = function( index )&#123;</span><br><span class="line">    this.observerList.splice( index, 1 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现Subject</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subject</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">&#125;</span><br><span class="line">Subject.prototype.addObserver = <span class="function"><span class="keyword">function</span><span class="params">( observer )</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.add( observer );</span><br><span class="line">&#125;;</span><br><span class="line">Subject.prototype.removeObserver = <span class="function"><span class="keyword">function</span><span class="params">( observer )</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.removeAt( <span class="keyword">this</span>.observers.indexOf( observer, <span class="number">0</span> ) );</span><br><span class="line">&#125;;</span><br><span class="line">Subject.prototype.notify = <span class="function"><span class="keyword">function</span><span class="params">( context )</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> observerCount = <span class="keyword">this</span>.observers.count();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; observerCount; i++)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.get(i).update( context );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实现Observer </li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>test</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer1 = <span class="keyword">new</span> Observer();</span><br><span class="line">observer1.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'observer1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> observer2 = <span class="keyword">new</span> Observer();</span><br><span class="line">observer2.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'observer2'</span>);</span><br><span class="line">&#125;</span><br><span class="line">subject.addObserver(observer1);</span><br><span class="line">subject.addObserver(observer2);</span><br><span class="line">subject.notify();    <span class="comment">// 输出 observer1 observer2</span></span><br></pre></td></tr></table></figure><h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><ol><li><p>观察者对象是个消息容器 拥有订阅 发布订阅 取消订阅的消息方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Observe = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> topics = &#123;&#125;; <span class="comment">// 回调函数存放的数组</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        subscribe: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span>, fn</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果此消息不存在则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!topics[<span class="keyword">type</span>]) &#123;</span><br><span class="line">                topics[<span class="keyword">type</span>] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将动作推入到该消息对应的动作执行序列中</span></span><br><span class="line">            topics[<span class="keyword">type</span>].push(fn);</span><br><span class="line">        &#125;,</span><br><span class="line">        publish: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span>, args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果该消息没有被注册，则返回</span></span><br><span class="line">            <span class="keyword">if</span> (!topics[<span class="keyword">type</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> subscribers = topics[<span class="keyword">type</span>], len = subscribers ? subscribers.length: <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    <span class="comment">// 依次执行注册的消息对应的动作序列</span></span><br><span class="line">                    subscribers[i].call(self, args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unsubscribe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> subscribers = topics[<span class="keyword">type</span>];</span><br><span class="line">            <span class="comment">// 判断是否存在    </span></span><br><span class="line">            <span class="keyword">if</span> (subscribers <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> i = subscribers.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (;i &gt;= <span class="number">0</span>; i-- ) &#123;</span><br><span class="line">                    <span class="comment">// 如果存在该动作则在消息动作序列中移除响应动作    </span></span><br><span class="line">                    subscribers[i] === fn &amp;&amp; subscribers.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>test</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> listener1 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listener1:'</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> listener2 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listener2:'</span> + data);</span><br><span class="line">&#125;</span><br><span class="line">Observer.subscribe(<span class="string">'example1'</span>, listener1);</span><br><span class="line">Observer.subscribe(<span class="string">'example1'</span>, listener2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//发布通知</span></span><br><span class="line">Observer.publish(<span class="string">'example1'</span>, <span class="string">'hello world!'</span>);</span><br><span class="line">Observer.publish(<span class="string">'example1'</span>, [<span class="string">'test'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">Observer.unsubscribe(<span class="string">'example1'</span>, listener2);</span><br><span class="line">Observer.publish(<span class="string">'example1'</span>, <span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><ul><li><p>观察者与发布订阅的不同</p><ol><li>Publish/Subscribe(发布/订阅)模式使用一个主题/事件通道，这个通道介于订阅者和发布者之间；</li><li>该设计模式允许代码定义应用程序的特定事件，这些事件可以传递自定义参数，自定义参数包含订阅者需要的信息，采用事件通道可以避免发布者和订阅者之间产生依赖关系；</li><li>Observer(观察者)模式允许观察者实例对象(订阅者)执行适当的事件处理程序来注册和接收目标实例对象(发布者)发出的通知（即在观察者实例对象上注册update方法）。<br>使订阅者和发布者之间产生了依赖关系，且没有事件通道。</li></ol></li><li><p>优点: 解耦 @$%@#%</p></li><li>缺陷: 缺陷 具有不稳定性 发布订阅都是无状态的</li></ul><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><ol><li>如果系统组件之间存在大量的直接关系，就可能是时候，使用一个中心的控制点，来让不同的组件通过它来通信；</li><li>中介者通过将组件之间显式的直接的引用替换成通过中心点来交互的方式，来做到松耦合。这样可以帮助我们解耦，和改善组件的重用性；</li><li>中介者模式主要用于一个系统中存在大量的对象，而且这些大量的对象需要互相通信，因为两个对象需要通信，一个对象必须要持有另一个对象，这样就会导致，系统里，每个对象都互相引用，会引起混乱，中介者把所有的对象都统一管理起来，其他的对象通过中介者去和别的对象通信。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">mediator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">msg,receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.send(msg,<span class="string">'A'</span>,receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveMsg: <span class="function"><span class="keyword">function</span>(<span class="params">msg,sender</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sender+<span class="string">" say:"</span>+msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">mediator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">msg,receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.send(msg,<span class="string">'B'</span>,receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveMsg: <span class="function"><span class="keyword">function</span>(<span class="params">msg,sender</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sender+<span class="string">" say:"</span>+msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mediator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.A = <span class="keyword">new</span> A(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.B = <span class="keyword">new</span> B(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">Mediator.prototype = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">msg,sender,receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>[receiver].receiveMsg(msg,sender);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'receiver '</span>+receiver+<span class="string">' is not exsit'</span>);</span><br><span class="line">            <span class="keyword">this</span>[sender].receiveMsg(<span class="string">'receiver '</span>+ receiver +<span class="string">' is not exsit'</span>,<span class="string">'mediator'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _mediator = <span class="keyword">new</span> Mediator();</span><br><span class="line"><span class="keyword">var</span> _a = <span class="keyword">new</span> A(_mediator);</span><br><span class="line"><span class="keyword">var</span> _b = <span class="keyword">new</span> B(_mediator);</span><br><span class="line">_a.send(<span class="string">'hello i am A'</span>,<span class="string">'B'</span>);</span><br><span class="line">_b.send(<span class="string">'hello i am B'</span>,<span class="string">'A'</span>);</span><br></pre></td></tr></table></figure><ul><li>中介者模式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediator = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _channels = [],</span><br><span class="line">        _subUid = <span class="number">-1</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">channel, handler</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!_channels[channel]) _channels[channel] = []</span><br><span class="line">      <span class="keyword">var</span> token = (++_subUid).toString()</span><br><span class="line">      _channels[channel].push(&#123;</span><br><span class="line">        token: token,</span><br><span class="line">        context: <span class="keyword">this</span>,</span><br><span class="line">        handler: handler</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">channel, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!_channels[channel]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">var</span> subscribers = _channels[channel]</span><br><span class="line">      <span class="keyword">var</span> len = subscribers.length</span><br><span class="line">      <span class="keyword">while</span>(len--) &#123;</span><br><span class="line">        subscribers[len].handler.call(subscribers[len].context, data, channel, subscribers[len].token)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> channel <span class="keyword">in</span> _channels) &#123;</span><br><span class="line">        <span class="keyword">var</span> len = _channels[channel].length</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index=<span class="number">0</span>; index&lt;len; index++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(_channels[channel][index].token === token) &#123;</span><br><span class="line">            _channels[channel].splice(index, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> token</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Module模式引出</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      subscribe: subscribe,</span><br><span class="line">      publish: publish,</span><br><span class="line">      unsubscribe: unsubscribe,</span><br><span class="line">      <span class="comment">// 绑定到其他对象使用该设计模式</span></span><br><span class="line">      installTo: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        obj.subscribe = subscribe</span><br><span class="line">        obj.publish = publish </span><br><span class="line">        obj.unsubscribe = unsubscribe</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">  </span><br><span class="line">mediator.subscribe(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, channel, token</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === mediator) </span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="built_in">console</span>.log(channel)</span><br><span class="line">    <span class="built_in">console</span>.log(token)</span><br><span class="line">&#125;)</span><br><span class="line">mediator.publish(<span class="string">'message'</span>, <span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><ol><li>Mediator(中介者)模式：单一目标通常有很多观察者，有时一个目标的观察者是另一个观察者的目标。通信可以实现双向</li><li>Observer(观察者)模式：不存在封装约束的单一对象，目标对象和观察者对象必须合作才能维持约束。 观察者对象向订阅它们的对象发布其感兴趣的事件。通信只能是单向的</li></ol><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><ol><li>原型模式引用为通过克隆的方式基于一个现有对象的模板创建对象的模式</li><li>原型模式可以让多个构造函数对应的实例对象共享同一个原型对象的属性和方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCar = &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    drive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> carInstance = <span class="built_in">Object</span>.create(myCar);</span><br><span class="line"><span class="built_in">console</span>.log(carInstance);</span><br></pre></td></tr></table></figure><p><em>进阶</em></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createProto = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fconstructor</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(_proto)</span> </span>&#123;</span><br><span class="line">        Fconstructor.prototype = _proto;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Fconstructor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ol><li>命令模式将命令执行者和命令发起者解耦，提供更大的整体灵活性。</li><li>用类来做比喻就是，抽象类（类似于命令发起者）定义一个接口，但不为它的成员函数提供实现，作为一个基类派生出其他类，派生类（类似于命令执行者）首先具体接口。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientCustom = &#123;</span><br><span class="line">    name: <span class="string">'a'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cooker = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`do! <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commandFunc</span>(<span class="params">receiver, food</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    <span class="keyword">this</span>.food = food;</span><br><span class="line">&#125;</span><br><span class="line">commandFunc.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params">cooker</span>) </span>&#123;</span><br><span class="line">    cooker.execute(<span class="keyword">this</span>.food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderCommand_1 = <span class="keyword">new</span> commandFunc(clientCustom, <span class="string">'菜1'</span>);</span><br><span class="line">orderCommand_1.execute(cooker);</span><br></pre></td></tr></table></figure><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><ol><li>这一模式提供了面向一种更大型的代码体提供了一个的更高级别的舒适的接口，隐藏了其真正的潜在复杂性</li><li>把这一模式想象成要是呈现给开发者简化的API，一些总是会提升使用性能的东西</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _private = &#123;</span><br><span class="line">        i:<span class="number">5</span>,</span><br><span class="line">        <span class="keyword">get</span> : function() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"current value:"</span> + <span class="keyword">this</span>.i);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> : function( val ) &#123;</span><br><span class="line">            <span class="keyword">this</span>.i = val;</span><br><span class="line">        &#125;,</span><br><span class="line">        run : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"running"</span> );</span><br><span class="line">        &#125;,</span><br><span class="line">        jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"jumping"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        facade : <span class="function"><span class="keyword">function</span>(<span class="params"> args </span>) </span>&#123;</span><br><span class="line">            _private.set(args.val);</span><br><span class="line">            _private.get();</span><br><span class="line">            <span class="keyword">if</span> ( args.run ) &#123;</span><br><span class="line">                _private.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="built_in">module</span>.facade( &#123;<span class="attr">run</span>: <span class="literal">true</span>, <span class="attr">val</span>:<span class="number">10</span>&#125; );</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 类似</span><br><span class="line"><span class="symbol">var</span> <span class="keyword">addMyEvent </span>= <span class="meta">function</span>( el,ev,<span class="meta">fn</span> )&#123;</span><br><span class="line">    <span class="meta">if</span>( el.<span class="keyword">addEventListener </span>)&#123;</span><br><span class="line">        el.<span class="keyword">addEventListener( </span>ev,<span class="meta">fn</span>, false )<span class="comment">;</span></span><br><span class="line">    &#125;<span class="meta">else</span> <span class="meta">if</span>(el.attachEvent)&#123;</span><br><span class="line">        el.attachEvent( <span class="string">"on"</span> + ev, <span class="meta">fn</span> )<span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span>&#123;</span><br><span class="line">        el[<span class="string">"on"</span> + ev] = <span class="meta">fn</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><em>更多思路: 类似于检测浏览器版本、类型, 调用一个方法 方法内部再执行各种判断…</em></p><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><ol><li>工厂模式是另外一种关注对象创建概念的创建模式。它的领域中同其它模式的不同之处在于它并没有明确要求我们使用一个构造器；</li><li>取而代之，一个工厂能提供一个创建对象的公共接口，我们可以在其中指定我们希望被创建的工厂对象的类型；</li><li>试想一下，在我们被要求创建一种类型的UI组件时，我们就有一个UI工厂。并不是通过直接使用new操作符或者通过另外一个构造器来创建这个组件，我们取而代之的向一个工厂对象索要一个新的组件；</li><li>我们告知工厂我们需要什么类型的组件（例如：“按钮”，“面板”），而它会将其初始化，然后返回供我们使用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doors = options.doors || <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">this</span>.state = options.state || <span class="string">"brand new"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = options.color || <span class="string">"silver"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Trunk</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = options.state || <span class="string">"used"</span>;</span><br><span class="line">    <span class="keyword">this</span>.wheelSize = options.wheelSize || <span class="string">"large"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = options.color || <span class="string">"blue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VehicleFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vehicleClass = Car;</span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.prototype.createVehicle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(options.type === <span class="string">'car'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vehicleClass.vehicleClass = Car;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.vehicleClass.vehicleClass = Trunk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.vehicleClass(options);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> carFctory = <span class="keyword">new</span> VehicleFactory();</span><br><span class="line"><span class="keyword">var</span> car = carFactory.createVehicle( &#123;</span><br><span class="line">    type: <span class="string">"car"</span>,</span><br><span class="line">    color: <span class="string">"yellow"</span>,</span><br><span class="line">    doors: <span class="number">6</span> &#125; </span><br><span class="line">);</span><br><span class="line"><span class="comment">// Outputs: true</span></span><br><span class="line"><span class="built_in">console</span>.log( car <span class="keyword">instanceof</span> Car );</span><br><span class="line"><span class="comment">// Outputs: Car object of color "yellow", doors: 6 in a "brand new" state</span></span><br><span class="line"><span class="built_in">console</span>.log( car );</span><br></pre></td></tr></table></figure><p><em>什么时候使用？</em></p><ol><li>当我们的对象或者组件设置涉及到高程度级别的复杂度时；</li><li>当我们需要根据我们所在的环境方便的生成不同对象的实体时；</li><li>当我们在许多共享同一个属性的许多小型对象或组件上工作时；</li><li>当带有其它仅仅需要满足一种API约定(又名鸭式类型)的对象的组合对象工作时.这对于解耦来说是有用的。</li></ol><h4 id="Mixin模式"><a href="#Mixin模式" class="headerlink" title="Mixin模式"></a>Mixin模式</h4><ol><li>子类划分是一个参考了为一个新对象继承来自一个基类或者超类对象的属性的术语.在传统的面向对象编程中,类B能够从另外一个类A处扩展。</li><li>这里我们将A看做是超类,而将B看做是A的子类.如此,所有B的实体都从A处继承了其A的方法.然而B仍然能够定义它自己的方法,包括那些重载的原本在A中的定义的方法。</li><li>B是否应该调用已经被重载的A中的方法,我们将这个引述为方法链.B是否应该调用A(超类)的构造器,我们将这称为构造器链。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person =  <span class="function"><span class="keyword">function</span>(<span class="params"> firstName , lastName </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName =  lastName;</span><br><span class="line">    <span class="keyword">this</span>.gender = <span class="string">"male"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clark = <span class="keyword">new</span> Person( <span class="string">"Clark"</span> , <span class="string">"Kent"</span> );</span><br><span class="line"><span class="keyword">var</span> Superhero = <span class="function"><span class="keyword">function</span>(<span class="params"> firstName, lastName , powers </span>)</span>&#123;</span><br><span class="line">    Person.call( <span class="keyword">this</span>, firstName, lastName );</span><br><span class="line">    <span class="keyword">this</span>.powers = powers;</span><br><span class="line">&#125;;</span><br><span class="line">SuperHero.prototype = <span class="built_in">Object</span>.create( Person.prototype );</span><br><span class="line"><span class="keyword">var</span> superman = <span class="keyword">new</span> Superhero( <span class="string">"Clark"</span> ,<span class="string">"Kent"</span> , [<span class="string">"flight"</span>,<span class="string">"heat-vision"</span>] );</span><br><span class="line"><span class="built_in">console</span>.log( superman );</span><br></pre></td></tr></table></figure><p><em>进阶</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define a simple Car constructor</span></span><br><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params"> settings </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = settings.model || <span class="string">"no model provided"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = settings.color || <span class="string">"no colour provided"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Mixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Mixin.prototype = &#123;</span><br><span class="line">    driveForward: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"drive forward"</span> );</span><br><span class="line">    &#125;,</span><br><span class="line">    driveBackward: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"drive backward"</span> );</span><br><span class="line">    &#125;,</span><br><span class="line">    driveSideways: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"drive sideways"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">augment</span>(<span class="params"> receivingClass, givingClass </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// only provide certain methods</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>[<span class="number">2</span>] ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">2</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++ ) &#123;</span><br><span class="line">            receivingClass.prototype[<span class="built_in">arguments</span>[i]] = givingClass.prototype[<span class="built_in">arguments</span>[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// provide all methods</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> methodName <span class="keyword">in</span> givingClass.prototype ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">Object</span>.hasOwnProperty(receivingClass.prototype, methodName) ) &#123;</span><br><span class="line">                receivingClass.prototype[methodName] = givingClass.prototype[methodName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// extend</span></span><br><span class="line">augment( Car, Mixin, <span class="string">"driveForward"</span>, <span class="string">"driveBackward"</span> );</span><br><span class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> Car(&#123;</span><br><span class="line">    model: <span class="string">"Ford Escort"</span>,</span><br><span class="line">    color: <span class="string">"blue"</span></span><br><span class="line">&#125;);</span><br><span class="line">myCar.driveForward();</span><br><span class="line">myCar.driveBackward();</span><br><span class="line"></span><br><span class="line"><span class="comment">// extend</span></span><br><span class="line">augment( Car, Mixin );</span><br><span class="line"><span class="keyword">var</span> mySportsCar = <span class="keyword">new</span> Car(&#123;</span><br><span class="line">    model: <span class="string">"Porsche"</span>,</span><br><span class="line">    color: <span class="string">"red"</span></span><br><span class="line">&#125;);</span><br><span class="line">mySportsCar.driveSideways();</span><br></pre></td></tr></table></figure><h4 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h4><ol><li>装饰器模式并不去深入依赖于对象是如何创建的，而是专注于扩展它们的功能这一问题上。不同于只依赖于原型继承，我们在一个简单的基础对象上面逐步添加能够提供附加功能的装饰对象。</li><li>它的想法是，不同于子类划分，我们向一个基础对象添加（装饰）属性或者方法，因此它会是更加轻巧的。</li></ol><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vehicle</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vehicleType = vehicleType || <span class="string">"car"</span>;</span><br><span class="line">    <span class="keyword">this</span>.model = <span class="string">"default"</span>;</span><br><span class="line">    <span class="keyword">this</span>.license = <span class="string">"00000-000"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> veInstance = <span class="keyword">new</span> vehicle(<span class="string">'car'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> trunk = <span class="keyword">new</span> vehicle(<span class="string">'trunk'</span>);</span><br><span class="line"><span class="comment">// add</span></span><br><span class="line">trunk.setModel = <span class="function"><span class="keyword">function</span>(<span class="params"> modelName </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = modelName;</span><br><span class="line">&#125;;</span><br><span class="line">truck.setColor = <span class="function"><span class="keyword">function</span>(<span class="params"> color </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="built_in">color</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><em>进阶</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// The constructor to decorate</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MacBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cost = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">997</span>; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.screenSize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">11.6</span>; &#125;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Decorator 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Memory</span>(<span class="params"> macbook </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> v + <span class="number">75</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engraving</span>(<span class="params"> macbook </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  v + <span class="number">200</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insurance</span>(<span class="params"> macbook </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  v + <span class="number">250</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> mb = <span class="keyword">new</span> MacBook();</span><br><span class="line">Memory( mb );</span><br><span class="line">Engraving( mb );</span><br><span class="line">Insurance( mb );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: 1522</span></span><br><span class="line"><span class="built_in">console</span>.log( mb.cost() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: 11.6</span></span><br><span class="line"><span class="built_in">console</span>.log( mb.screenSize() );</span><br></pre></td></tr></table></figure></p><ol><li>我们的装饰器重载了超类对象MacBook()的 object.cost()函数，使其返回的Macbook的当前价格加上了被定制后升级的价格；</li><li>这被看做是对原来的Macbook对象构造器方法的装饰，它并没有将其重写（例如，screenSize())，我们所定义的Macbook的其它属性也保持不变，完好无缺。</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decorator = <span class="function"><span class="keyword">function</span><span class="params">(dom, fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> dom.onclick === <span class="string">'function'</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> origin = dom.onclick;</span><br><span class="line">        dom.onclick = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">            origin.call(dom, event); <span class="comment">// 原事件</span></span><br><span class="line">            fn.call(dom, event); <span class="comment">// 装饰</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dom.onclick = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h4><ol><li>工厂模式可有效的创建可复用的实例对象，关心的是最终创建的对象是什么，不关心创建的过程，因此通过工厂模式得到的都是对象实例或者类簇。</li><li>建造者模式相对比工厂模式复杂一些，关心的是创建对象的过程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Job</span>(<span class="params">job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(job) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'teacher'</span>:</span><br><span class="line">        <span class="keyword">this</span>.job = <span class="string">'教师'</span></span><br><span class="line">        <span class="keyword">this</span>.jobDesc = <span class="string">'数学教师'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'doctor'</span>:</span><br><span class="line">        <span class="keyword">this</span>.job = <span class="string">'医生'</span></span><br><span class="line">        <span class="keyword">this</span>.jobDesc = <span class="string">'骨科医生'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'coder'</span>:</span><br><span class="line">        <span class="keyword">this</span>.job = <span class="string">'程序员'</span></span><br><span class="line">        <span class="keyword">this</span>.jobDesc = <span class="string">'Web前端程序员'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.job = job</span><br><span class="line">        <span class="keyword">this</span>.jobDesc = <span class="string">'不清楚您的职位的相关描述'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Job.prototype.changeJobDesc = <span class="function"><span class="keyword">function</span>(<span class="params">desc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jobDesc = desc</span><br><span class="line">&#125;</span><br><span class="line">Job.prototype.changeJob = <span class="function"><span class="keyword">function</span>(<span class="params">job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.job = job</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hobby</span>(<span class="params">hobby</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobby = []</span><br><span class="line">    <span class="keyword">this</span>.hobby.push(hobby)</span><br><span class="line">&#125;</span><br><span class="line">Hobby.prototype.addHobby = <span class="function"><span class="keyword">function</span>(<span class="params">hobby</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobby.concat(hobby)</span><br><span class="line">&#125;</span><br><span class="line">Hobby.prototype.getHobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hobby.split(<span class="string">','</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Skill</span>(<span class="params">skill</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.skill = []</span><br><span class="line">    <span class="keyword">this</span>.skill.push(skill)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Resume</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.person = <span class="keyword">new</span> Person(name, age)</span><br><span class="line">    <span class="keyword">this</span>.person.job = <span class="keyword">new</span> Job()</span><br><span class="line">    <span class="keyword">this</span>.person.hobby = <span class="keyword">new</span> Hobby()</span><br><span class="line">    <span class="keyword">this</span>.person.skill = <span class="keyword">new</span> Skill()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> resume = <span class="keyword">new</span> Resume(<span class="string">'ziyi2'</span>, <span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(resume)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS模块化演进</title>
      <link href="/2020/09/28/2020/JS%E6%A8%A1%E5%9D%97%E5%8C%96%E6%BC%94%E8%BF%9B/"/>
      <url>/2020/09/28/2020/JS%E6%A8%A1%E5%9D%97%E5%8C%96%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'url'</span>;</span><br><span class="line">    <span class="keyword">var</span> config = &#123;</span><br><span class="line">        obj: <span class="string">'x'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    root.config = config;</span><br><span class="line">    root.api = api;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制全局变量数量</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h4><ul><li>模块的标识应遵循的规则</li><li>定义全局函数require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的API</li><li>如果被require函数引入的模块中也包含依赖，那么依次加载这些依赖</li><li>如果引入模块失败，那么require函数应该报一个异常</li><li>模块通过变量exports来向往暴漏API，exports只能是一个对象，暴漏的API须作为此对象的属性</li></ul><p>起初用于服务端, 后来考虑到浏览器使用, require需要支持浏览器发送请求读取模块<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// increment.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;</span><br><span class="line">exports.inc = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(e) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pro.js</span></span><br><span class="line"><span class="keyword">var</span> incr = <span class="built_in">require</span>(<span class="string">'increment'</span>).inc;</span><br><span class="line"><span class="keyword">var</span> q = <span class="number">1</span>;</span><br><span class="line">incr(q);</span><br></pre></td></tr></table></figure><p>后来有所衍生…</p><p>Async 2.x派</p><ol><li>既然浏览器必须异步加载代码，那么模块在定义的时候就必须指明所依赖的模块，然后把本模块的代码写在回调函数里。</li><li>模块的加载也是通过下载-回调这样的过程来进行。</li><li>这就成为了AMD</li></ol><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>AMD / RequireJS异军突起</p><ol><li>用全局函数define来定义模块，用法为：define(id?, dependencies?, factory)</li><li>id为模块标识，遵从CommonJS Module Identifiers规范</li><li>dependencies为依赖的模块数组，在factory中需传入形参与之一一对应</li><li>如果dependencies的值中有”require”、”exports”或”module”，则与commonjs中的实现保持一致</li><li>如果dependencies省略不写，则默认为[“require”, “exports”, “module”]，factory中也会默认传入require,exports,module</li><li>如果factory为函数，模块对外暴漏API的方法有三种：return任意类型的数据、exports.xxx=xxx、module.exports=xxx</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Hello a.js'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Hello b.js'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'main'</span>);</span><br><span class="line">    a.hello();</span><br><span class="line">    $(<span class="string">'#b'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        b.hello();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>运行结果是?</em></p><p>a.js执行 - b.js执行 - main.js执行 - hello, a.js - (点击按钮后)hello, b.js</p><p>但是如果细细来看，b.js被预先加载并且预先执行了，（第二行输出），b.hello这个方法是在点击了按钮之后才会执行，如果用户压根就没点，那么b.js中的代码应不应该执行呢 ?</p><p>这就造成了一些问题</p><ol><li>如果依赖模块过多, 会把所以模块都引入并执行了。</li><li>另外一点: 引入过长, require([‘a’, ‘b’, ‘c’, …], function(a, b, c, …) {})</li></ol><ul><li>懒加载， 会引起操作时引入的卡顿</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        a.hello();</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'#b'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>([<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;b.hello();&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>后来AMD做了兼容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        a.hello()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: test</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>由于AMD有种种问题, 而别的规范也因此衍生, CMD / seajs </p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">    <span class="keyword">var</span> spining = <span class="built_in">require</span>(<span class="string">'./spining'</span>);</span><br><span class="line"></span><br><span class="line">    exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 通过exports 对外提供Api</span></span><br><span class="line">    <span class="built_in">module</span>.exports = spining; <span class="comment">// 通过module.exports 提供接口</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h4><p>2015年6月，ECMAScript2015也就是ES6发布了，JavaScript终于在语言标准的层面上，实现了模块功能。<br>使得在编译时就能确定模块的依赖关系，以及其输入和输出的变量，不像 CommonJS、AMD之类的需要在运行时才能确定（例如FIS这样的工具只能预处理依赖关系，本质上还是运行时解析），成为浏览器和服务器通用的模块解决方案<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> helloInLang = &#123;</span><br><span class="line">    en: <span class="string">'Hello world!'</span>,</span><br><span class="line">    es: <span class="string">'¡Hola mundo!'</span>,</span><br><span class="line">    ru: <span class="string">'Привет мир!'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getHello = <span class="function">(<span class="params">lang</span>) =&gt;</span> (</span><br><span class="line">    helloInLang[lang]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sayHello = <span class="function">(<span class="params">lang</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getHello(lang));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">'ru'</span>);</span><br></pre></td></tr></table></figure><h4 id="Q"><a href="#Q" class="headerlink" title="Q?"></a>Q?</h4><p>Q1：<br>我们在看 node 代码时，应该会发现，关于接口导出，有的地方使用module.exports，而有的地方使用exports，这两个有什么区别呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">module</span> = &#123;</span><br><span class="line">    <span class="keyword">exports</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">exports</span> = <span class="keyword">module</span>.<span class="keyword">exports</span>;</span><br><span class="line">console.log(<span class="keyword">module</span>.<span class="keyword">exports</span> === <span class="keyword">exports</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'i am ronffy'</span></span><br><span class="line"><span class="keyword">exports</span> = s; <span class="comment">// module.exports 不受影响</span></span><br><span class="line">console.log(<span class="keyword">module</span>.<span class="keyword">exports</span> === <span class="keyword">exports</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>模块初始化时，exports和module.exports指向同一块内存，exports被重新赋值后，就切断了跟原内存地址的关系。<br>所以，exports要这样使用：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exports.s</span> = <span class="string">'i am ronffy'</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.s); <span class="comment">// i am ronffy</span></span><br></pre></td></tr></table></figure><p>Q2：</p><ul><li>CommonJS与AMD, CommonJS 和 AMD 都是   <strong><em> 运行时加载 </em></strong></li><li>CommonJS 是服务器端模块规范，AMD 是浏览器端模块规范。</li><li>CommonJS 加载模块是同步的，即执行var a = require(‘./a.js’);时，在 a.js 文件加载完成后，才执行后面的代码。AMD 加载模块是异步的，所有依赖加载完成后以回调函数的形式执行代码。</li><li>[如下代码]fs和chalk都是模块，不同的是，fs是 node 内置模块，chalk是一个 npm 包。这两种情况在 CommonJS 中才有，AMD 不支持</li></ul><p>Q3：<br>在ES6中，import命令可以具体指定加载模块中用export命令暴露的接口（不指定具体的接口，默认加载export default），没有指定的是不会加载的。<br>因此会在编译时就完成模块的加载，这种加载方式称为编译时加载或者静态加载。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收机制</title>
      <link href="/2020/09/23/2020/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/09/23/2020/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>👉：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">MDN-内存管理</a></p><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个Javascript对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）。</p><a id="more"></a><p>在这里，“对象”的概念不仅特指 JavaScript 对象，还包括函数作用域（或者全局词法作用域）</p><p>限制：无法处理循环引用的事例</p><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。</p><p>这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</p><p>这个算法比前一个要好，因为“有零引用的对象”总是不可获得的，但是相反却不一定，参考“循环引用”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-CSRF</title>
      <link href="/2020/08/11/2020/XSS-CSRF/"/>
      <url>/2020/08/11/2020/XSS-CSRF/</url>
      
        <content type="html"><![CDATA[<h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。</p><ol><li>存储型</li><li>反射型</li><li>DOM型三种</li></ol><table><thead><tr><th>类型</th><th>存储区</th><th>插入点</th></tr></thead><tbody><tr><td>存储型</td><td>后端数据库</td><td>HTML</td></tr><tr><td>反射型</td><td>URL</td><td>HTML</td></tr><tr><td>DOM型</td><td>后端数据库、前端、URL</td><td>JS</td></tr></tbody></table><a id="more"></a><p>常用防范方法</p><ol><li>httpOnly</li><li>输入过滤</li><li>转义HTML，进行输入输出的编码转义</li></ol><p>DOM型XSS：</p><ol><li>利用innerHTML修改页面；</li><li>利用document.onkeypress偷取记录键盘事件。</li></ol><p><em>如何抵御DOMXSS?</em></p><ol><li>避免客户端文档重写、重定向或其他敏感操作，同时避免使用客户端数据，这些操作尽量在服务器端使用动态页面来实现；</li><li>分析和强化客户端JS代码，特别是受到用户影响的DOM对象，注意能直接修改DOM和创建HTML文件的相关函数或方法，并在输出变量到页面时先进行编码转义，如输出到HTML则进行HTML编码、输出到则进行JS编码。</li></ol><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><p>跨站请求伪造（英语：Cross-site request forgery），攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的</p><p>CSRF特点：</p><ol><li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。   </li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。</li><li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li></ol><p><em>如何抵御CSRF?</em></p><ul><li>阻止不明外域的访问<ol><li>同源检测</li><li>Samesite Cookie</li></ol></li></ul><p><code>组织不明外域</code></p><ol><li>根据origin或referer头进行判断</li><li>如果都不存在，建议阻止</li></ol><ul><li>提交时要求附加本域才能获取的信息<ol><li>CSRF Token</li><li>双重Cookie验证</li></ol></li></ul><p><code>CSRFToken</code><br>我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。<br>三个步骤：</p><ol><li>将CSRF Token输出到页面中，最好服务端输出，置于session中；</li><li>页面请求时携带；</li><li>服务端输出。</li></ol><p>Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。但是此方法的实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面）。<br>每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS连接过程</title>
      <link href="/2020/07/09/2020/HTTPS%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/07/09/2020/HTTPS%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>我们前面分析了HTTP的握手与挥手，到了HTTPS这一步，涉及一些加密及证书，我们再单独复习一下。</p><p><img src="/2020/07/09/2020/HTTPS连接过程/NO1.png" alt="NO1" title="NO1"></p><a id="more"></a><h4 id="客户端访问HTTPS连接"><a href="#客户端访问HTTPS连接" class="headerlink" title="客户端访问HTTPS连接"></a>客户端访问HTTPS连接</h4><ol><li>我们在浏览器输入url并且回车，这个时候客户端会将客户端支持的加密算法套件（CIpher）发给服务端。</li></ol><h4 id="服务端发送证书（公钥）给客户端"><a href="#服务端发送证书（公钥）给客户端" class="headerlink" title="服务端发送证书（公钥）给客户端"></a>服务端发送证书（公钥）给客户端</h4><ol><li>服务端接收到Cipher后，和自己支持的加密算法对比，如果不符合则断开连接，否则，服务端把符合的算法和证书发送给客户端，包括证书时间、日期、机构。</li></ol><h4 id="客户端验证服务端证书"><a href="#客户端验证服务端证书" class="headerlink" title="客户端验证服务端证书"></a>客户端验证服务端证书</h4><ol><li>客户端验证证书，包括颁发证书的机构<code>是否合法</code>与<code>过期</code>，证书中包含的网站地址是否与正访问的地址一致等；</li><li>验证通过后，客户端会生成一个随机字符串，然后用服务端的公钥进行加密，这里就保证只有服务端可以看到这串字符串；</li><li>生成握手信息，用约定好的HASH，对握手信息进行取HASH，然后用随机字符串加密握手信息和握手信息的签名HASH，把结果发给服务端，这里要带上握手HASH是因为防止信息篡改，如果信息被篡改，那么服务端接收到信息进行HASH后，会发现HASH和客户端传回来的不一样。</li></ol><h4 id="服务端接收加密信息，解密得到客户端提供的随机字符串"><a href="#服务端接收加密信息，解密得到客户端提供的随机字符串" class="headerlink" title="服务端接收加密信息，解密得到客户端提供的随机字符串"></a>服务端接收加密信息，解密得到客户端提供的随机字符串</h4><ol><li>服务端接收到加密信息后，首先使用私钥解密得到随机字符串，然后使用随机字符串解密握手信息，获得握手信息和握手信息的HASH值，服务端对握手信息进行HASH，对比传回来的HASH，如果相同，则说明信息没有被篡改。</li><li>服务端验证完客户端后，同样用随机字符串加密握手信息和握手信息的HASH值发给客户端。</li></ol><h4 id="客户端验证服务端返回的握手信息，完成握手"><a href="#客户端验证服务端返回的握手信息，完成握手" class="headerlink" title="客户端验证服务端返回的握手信息，完成握手"></a>客户端验证服务端返回的握手信息，完成握手</h4><ol><li>客户端接收到服务端发回来的握手信息后，用一开始生成的随机字符串对密文进行解密，得到握手信息和握手HASH值，校验通过后，握手完毕，从这开始，客户端和服务端的通信就使用那串随机字符串进行AES对称加密。</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>使用RSA非对称算法，服务端向客户端发送公钥证书等；</li><li>客户端向第三方验证公钥合法性，验证通过后向服务端约定对称加密的随机字符串，保证随机字符串只有通信双方知道。</li><li>接下来通信就使用这个随机符串串进行加密通信，因为随机字符串只有双方知道，所有信息不会被截获。</li></ol><p><img src="/2020/07/09/2020/HTTPS连接过程/NO2.png" alt="NO2" title="NO2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三次握手四次挥手</title>
      <link href="/2020/07/09/2020/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2020/07/09/2020/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p><img src="/2020/07/09/2020/三次握手四次挥手/NO1.png" alt="NO1" title="NO1"></p><a id="more"></a><ol><li>TCP服务器进程先创建传输控制块TCB，时刻准备接收客户进程的连接请求，此时服务器进入LISTEN（监听状态）；</li><li>TCP客户进程创建传输控制块TCB，然后向服务器发出连接请求报文，此时报文首部同部位SYN=1，此时TCP客户端进程进入SYN-SENT状态，TCP规定，SYN=1报文不能携带数据；</li><li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文，确认报文中ACK=1,SYN=1，此时TCP服务器进程进入SYNC-RCVD状态，这个报文也不能携带数据；</li><li>TCP客户进程收到确认后，要给服务器发出确认，确认报文中ACK=1，此时TCP连接建立，客户端进入ESTABLISHED状态，TCP规定，ACK报文可以携带数据；</li><li>TCP服务器收到确认后，也进入ESTABLISHED状态，可以开始通信。</li></ol><p><em>类似是这样的：</em></p><ul><li>第一次握手：客户端发包，服务端接收<ol><li>服务端收到了，服务端就可以确认客户端发送能力、服务端接收能力是正常的；</li></ol></li><li>第二次握手：服务端发包，客户端接收<ol><li>这样客户端得出结论，服务端的接收、发送能力正常，客户端的接收、发送能力正常，不过此时服务器不能确认客户端接收是否正常；</li></ol></li><li>第三次握手：客户端发包，服务端接收<ol><li>这样服务端就可以得出结论，客户端接收，发送能力正常，服务端自己的发送，接收能力正常。</li></ol></li></ul><h5 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h5><p>握手少了，无法确认双方连接；<br>握手多了没必要；<br>如果只有两次握手，那么服务端向客户端发送 SYN/ACK 报文后，就会认为连接建立。但是如果客户端没有收到报文，那么客户端是没有建立连接的。这就导致服务端会浪费资源。</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="/2020/07/09/2020/三次握手四次挥手/NO2.png" alt="NO2" title="NO2"></p><ol><li>客户端向服务端发送连接释放报文，FIN=1,ACK=1，主动关闭连接，等待服务端确认；</li><li>服务端收到连接释放报文后，立即发出确认报文，ACK=1，此时TCP处于半关闭状态，即客户端到服务端的连接已经释放了，但是服务端到客户端的连接还未十分，这表示客户端已经没有数据发送了，但是服务端可能还有数据给客户端发送；</li><li>服务端向客户端发送释放报文，FIN=1,ACK=1，主动关闭连接，同时等待确认；</li><li>客户端收到服务连接释放报文后，立即发出确认报文，ACK=1，服务端收到客户端的确认后，就会立即进入close状态。</li></ol><p><em>什么情况呢？形象比喻：</em></p><ul><li>A和B打电话，通话结束后</li><li>A：我没啥要说的了（开始发呆）；</li><li>B：我知道了，我还有要说的；</li><li>B：2#$#@$@#$@#说了一堆，然后说我也说完了；</li><li>A：好的，我知道了</li></ul><h5 id="为什么需要四次挥手？"><a href="#为什么需要四次挥手？" class="headerlink" title="为什么需要四次挥手？"></a>为什么需要四次挥手？</h5><p>因为 TCP 是全双工的，一方关闭连接后，另一方还可以继续发送数据。所以四次挥手，将断开连接分成两个独立的过程。</p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="握手，挥手阶段包丢失怎么办？"><a href="#握手，挥手阶段包丢失怎么办？" class="headerlink" title="握手，挥手阶段包丢失怎么办？"></a>握手，挥手阶段包丢失怎么办？</h5><p>简而言之，通过定时器 + 超时重试机制，尝试获取确认，直到最后会自动断开连接。</p><p>具体而言，TCP 设有一个保活计时器。服务器每收到一次客户端的数据，都会重新复位这个计时器，时间通常是设置为 2 小时。若 2 小时还没有收到客户端的任何数据，服务器就开始重试：每隔 75 分钟发送一个探测报文段，若一连发送 10 个探测报文后客户端依然没有回应，那么服务器就认为连接已经断开了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await原理</title>
      <link href="/2020/06/30/2020/async-await%E5%8E%9F%E7%90%86/"/>
      <url>/2020/06/30/2020/async-await%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>async其实就是Generator的语法糖。<br>async函数对Generator的改进:</p><ol><li>内置执行器；</li><li>更好的语义， async/await；</li><li>更广的适应性；</li><li>返回Promise。</li></ol><p>async本质上是封装了Generator的自动执行器。</p><p><em>题外话：为什么Generator可以在next之前暂停?</em><br><a id="more"></a><br>A：协程。</p><p>一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。<br>协程是一种比线程更加轻量级的存在。普通线程是抢先式的，会争夺cpu资源，而协程是合作的，可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>我们看一点题目:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">console. <span class="built_in">log</span>(<span class="string">'script start'</span> )</span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">async1</span><span class="params">()</span> &#123;</span></span><br><span class="line">    await async2() </span><br><span class="line">    console. <span class="built_in">log</span>( <span class="string">' async1 end'</span> )</span><br><span class="line">&#125;</span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">async2</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="number">1</span>og( <span class="string">'async2 end '</span> )</span><br><span class="line">&#125;    </span><br><span class="line">async1()</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console. <span class="built_in">log</span>( <span class="string">'setTimeout'</span> )</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">new Promise(resolve =&gt; &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">' Promise'</span> )</span><br><span class="line">    resolve() </span><br><span class="line">&#125;).<span class="keyword">then</span>( <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console。<span class="built_in">log</span>( <span class="string">' promise1'</span> )</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="number">1</span>og( <span class="string">" promise2'</span> )</span><br><span class="line">&#125;)</span><br><span class="line">console. <span class="built_in">log</span>( <span class="string">'script end'</span> )</span><br></pre></td></tr></table></figure><p><em>你知道答案是什么吗?</em><br>script start - async2 end - Promise - script end  -  promise1 - promise2 - async1 end - setTimeout</p><p><em>解析：</em></p><ol><li>执行代码，输出script start。</li><li>执行async1(),会调用async2(),然后输出async2 end,此时将会保留async1函数的上下文，然后跳出async1函数。(async 返回一个Promise， Promise是立即执行的。)</li><li>遇到setTimeout，产生一个宏任务</li><li>执行Promise，输出Promise。遇到then，产生第一个微任务</li><li>继续执行代码，输出script end</li><li>代码逻辑执行完毕(当前宏任务执行完毕)，开始执行当前宏任务产生的微任务队列，输出promise1，该微任务遇到then，产生一个新的微任务</li><li>执行产生的微任务，输出promise2,当前微任务队列执行完毕。执行权回到async1</li><li>执行await,实际上会产生一个promise返回</li><li>执行完成，执行await后面的语句，输出async1 end</li><li>最后，执行下一个宏任务，即执行setTimeout，输出setTimeout</li></ol><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><p>实现一个Sleep, 每隔一秒输出1，2，3，4，5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(resolve, interval);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">one2FiveInAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">one2FiveInAsync();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventLoop</title>
      <link href="/2020/06/12/2020/EventLoop/"/>
      <url>/2020/06/12/2020/EventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>先了解下任务队列</p><ul><li>所有同步任务都在主线程上执行，形成一个执行栈</li><li>主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li><p>主线程不断重复上面的第三步。<br>此时区分为浏览器的事件循环和Node端的事件循环。下面将一一详解。<br>主线程从任务队列中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop(事件循环)</p><a id="more"></a><p>在一个事件循环当中，执行的步骤如下：</p></li><li><p>首先将同步代码放入执行栈进行执行，若存在异步事件则将其的返回结果会被放到一个任务队列中。任务队列又分为宏任务队列和微任务队列。</p></li><li>当执行栈为空时，会优先查看微任务队列中是否有事件存在</li><li>若存在，则依次执行队列事件中的对应回调，直到微任务队列为空，再进入下一步</li><li>若不存在，跳往下一步</li><li>查看宏任务队列中是否有事件存在</li><li>若存在，则将队列中的事件的对应回调放入执行栈执行</li><li>若不存在，跳往下一步</li><li>若执行栈中又有异步代码，则放入下一个任务队列。如此反复循环前三个步骤</li></ul><p>从以上我们得知重点是执行栈为空后优先处理<code>微任务</code>再处理<code>宏任务</code>。</p><p>微任务：</p><ul><li>process.nextTick</li><li>promise、then、catch</li><li>Object.observe</li></ul><p>宏任务：</p><ul><li>setTimeout</li><li>setInterval</li><li>I\O</li><li>setImmediate</li></ul><p>eg.<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line"></span><br><span class="line">const interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout 1'</span>)</span><br><span class="line">  Promise.resolve()</span><br><span class="line">      .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 3'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 4'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'setTimeout 2'</span>)</span><br><span class="line">          Promise.resolve()</span><br><span class="line">              .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 5'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 6'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearInterval(interval)</span><br><span class="line">              &#125;)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Promise.resolve()</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise 1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise 2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><em>会输出什么呢?</em></p><p>答案:</p><ol><li>start</li><li>promise 1</li><li>promise 2</li><li>setInterval</li><li>setTimeout 1</li><li>promise 3</li><li>promise 4</li><li>setInterval</li><li>setTimeout 2</li><li>promise 5</li><li>promise 6</li></ol><p>其实按照以上的思路，宏任务-微任务-宏任务，是很好理解的。</p><p><code>then</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const p = function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">        const p1 = <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            resolve(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        p1.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        resolve(<span class="number">4</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><p><em>你知道答案吗?</em></p><p>A： 3-end-2-4<br>你答对了吗?</p><p>解析:<br>执行代码，Promise本身是同步的立即执行函数，.then是异步执行函数。遇到setTimeout，先把其放入宏任务队列中遇到p1.then会先放到微任务队列中，接着往下执行，输出 3<br>遇到 p().then 会先放到微任务队列中，接着往下执行，输出 end<br>同步代码块执行完成后，开始执行微任务队列中的任务，首先执行 p1.then，输出 2, 接着执行p().then, 输出 4<br>微任务执行完成后，开始执行宏任务，setTimeout, resolve(1)，但是此时 p1.then已经执行完成，此时 1不会输出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域访问</title>
      <link href="/2020/05/11/2020/cors%E8%B7%A8%E5%9F%9F/"/>
      <url>/2020/05/11/2020/cors%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Cross-Origin Resource Sharing（CORS）跨来源资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><em>同源策略?</em></p><p>源(origin)其实就是指的URL。<br>eg. <a href="https://jayantxu.cn:80/p/abcd#123?query=cool">https://jayantxu.cn:80/p/abcd#123?query=cool</a></p><table><thead><tr><th>protocol</th><th>host</th><th>port</th><th>pathname</th><th>hash</th><th>query string</th></tr></thead><tbody><tr><td>https</td><td>jayantxu.cn</td><td>80</td><td>/p/abcd</td><td>123</td><td>query=cool</td></tr><tr><td>location.protocol</td><td>location.host</td><td>location.port</td><td>location.pathname</td><td>location.hash</td><td>location.search</td></tr></tbody></table><p>同源就是指URL中<code>protocol协议</code>、<code>host域名</code>、<code>port端口</code>这三个部分相同，其中一者不同即不同。</p><p>源不同会限制你：</p><ul><li>AJAX 请求不能发送。</li><li>无法获取DOM元素并进行操作。</li><li>无法读取Cookie、LocalStorage 和 IndexDB 。</li></ul><a id="more"></a><p>有些请求是不受跨域请求限制的, eg. WebSocket、script、img、iframe、video、audio…</p><p>跨域错误：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Error] Origin http://127.0.0.1:8080 is not allowed by Access-Control-Allow-Origin.</span><br><span class="line">[Error] Failed to <span class="keyword">load</span> <span class="keyword">resource</span>: Origin <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">by</span> <span class="keyword">Access</span>-Control-<span class="keyword">Allow</span>-Origin. (<span class="keyword">normal</span>, line <span class="number">0</span>)</span><br><span class="line">[<span class="keyword">Error</span>] XMLHttpRequest cannot <span class="keyword">load</span> <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>/getInfo due <span class="keyword">to</span> <span class="keyword">access</span> control checks.</span><br></pre></td></tr></table></figure></p><h3 id="常见解决方法"><a href="#常见解决方法" class="headerlink" title="常见解决方法"></a>常见解决方法</h3><h4 id="1、jsonp请求"><a href="#1、jsonp请求" class="headerlink" title="1、jsonp请求"></a>1、jsonp请求</h4><p>只接受get这一种请求。<br>eg.Ajax<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dataType:</span> <span class="string">'jsonp'</span></span><br></pre></td></tr></table></figure></p><h4 id="2、postMessage跨域"><a href="#2、postMessage跨域" class="headerlink" title="2、postMessage跨域"></a>2、postMessage跨域</h4><p>H5的新API</p><ol><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ol><p>例如：使用iframe兼容老系统，嵌入打开的时候，可以使用此进行通信。</p><p><em>a.html</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.domain2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">       </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript">    iframe.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'aym'</span></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="javascript">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 接受domain2返回数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'data from domain2 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>b.html</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 接收domain1的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'data from domain1 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="undefined">            data.number = 16;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 处理后再发回domain1</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain1.com'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="3、cors跨域资源共享"><a href="#3、cors跨域资源共享" class="headerlink" title="3、cors跨域资源共享"></a>3、cors跨域资源共享</h4><p>浏览器将cors请求分为了两类：简单请求，非简单请求。</p><p>简单请求: 在头信息中，增加一个origin字段，用于说明，本次请求来自哪个源，服务器根据这个值，决定是否同意此请求。</p><ol><li>HEAD</li><li>GET</li><li>POST<br>(content-type只限于三个值：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>)</li></ol><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。<br>浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。<br><strong>所以：请求是发送出去了的！返回之后浏览器处理后报错</strong></p><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//api.alipay.com  // 表示接受的域名</span></span><br><span class="line">Access-Control-Allow-<span class="string">Credentials:</span> <span class="literal">true</span> <span class="comment">// 是否允许发送cookie</span></span><br><span class="line">Access-Control-Expose-<span class="string">Headers:</span> FooBar</span><br><span class="line">Content-<span class="string">Type:</span> text/html; charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure></p><p>非简单请求</p><p>预检请求：在正式通信前，会先请求查询当前域名是否在服务器许可名单内，以及使用哪些头信息等，在肯定答复后，才会正式发出请求，否则报错。<br>预检的请求方法是<code>OPTION</code></p><p>eg.<br>这个请求：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">url</span> = <span class="string">'http://api.alipay.com/cors'</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="built_in">url</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'value'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><p>浏览器发现是非简单请求，所以会<code>预检</code><br>预检：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/<span class="number">1.1</span></span><br><span class="line">Origin: http:<span class="comment">//api.alipay.com</span></span><br><span class="line">Access-Control-Request-<span class="function"><span class="keyword">Method</span>:</span> PUT <span class="comment">// 因为是PUT，所以列出PUT</span></span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header <span class="comment">// 指定浏览器CORS请求会额外发送的头信息字段</span></span><br><span class="line">Host: api.alice.com </span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure></p><p>预检的回应：<br>服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="string">Date:</span> Mon, <span class="number">01</span> Dec <span class="number">2020</span> <span class="number">01</span>:<span class="number">15</span>:<span class="number">39</span> GMT</span><br><span class="line"><span class="string">Server:</span> Apache/<span class="number">2.0</span><span class="number">.61</span> (Unix)</span><br><span class="line">Access-Control-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//api.alipay.com  // 表示接受的源</span></span><br><span class="line">Access-Control-Allow-<span class="string">Methods:</span> GET, POST, PUT <span class="comment">// 接受的方法</span></span><br><span class="line">Access-Control-Allow-<span class="string">Headers:</span> X-Custom-Header</span><br><span class="line">Content-<span class="string">Type:</span> text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Content-<span class="string">Encoding:</span> gzip</span><br><span class="line">Content-<span class="string">Length:</span> <span class="number">0</span></span><br><span class="line">Keep-<span class="string">Alive:</span> timeout=<span class="number">2</span>, max=<span class="number">100</span></span><br><span class="line"><span class="string">Connection:</span> Keep-Alive</span><br><span class="line">Content-<span class="string">Type:</span> text/plain</span><br></pre></td></tr></table></figure></p><p>如果浏览器不接受，则返回一个正常回应，没有任何cors头信息，浏览器认定不同意预检请求，就报错了。</p><p><em>withCredentials</em><br>刚刚提到要发送cookie，除了浏览器同意，指定了<code>Access-Control-Allow-Credentials</code>字段外，前端的请求也需要开启<code>xhr.withCredentials = true</code></p><p>图示：</p><p><img src="/2020/05/11/2020/cors跨域/NO1.png" alt="NO1" title="NO1"></p><h4 id="4、代理型-nginx-node"><a href="#4、代理型-nginx-node" class="headerlink" title="4、代理型:nginx / node"></a>4、代理型:nginx / node</h4><ol><li><p>使用nginx做代理，把请求分发去服务器。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8090;</span><br><span class="line">    server_name  xxx;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   xxx:8080;  #反向代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>node搭一个中转。</p></li></ol><h4 id="5、websocket"><a href="#5、websocket" class="headerlink" title="5、websocket"></a>5、websocket</h4><p>H5的新协议。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费舍尔.耶茨混洗</title>
      <link href="/2020/04/07/2020/%E8%B4%B9%E8%88%8D%E5%B0%94-%E8%80%B6%E8%8C%A8%E6%B7%B7%E6%B4%97/"/>
      <url>/2020/04/07/2020/%E8%B4%B9%E8%88%8D%E5%B0%94-%E8%80%B6%E8%8C%A8%E6%B7%B7%E6%B4%97/</url>
      
        <content type="html"><![CDATA[<h6 id="费舍尔-耶茨混洗"><a href="#费舍尔-耶茨混洗" class="headerlink" title="费舍尔.耶茨混洗"></a>费舍尔.耶茨混洗</h6><p>.from url <a href="https://bost.ocks.org/mike/shuffle/" target="_blank" rel="noopener">费舍尔.耶茨混洗</a></p><p>数字 1 - N 之间的一组混排，大概一下子可以想到的是：</p><ul><li>从数组中取数组长度中的一个随机数 K。</li><li>然后将数组 K 索引处的 数值取出 splice，堆如新数组。</li><li>重复…</li></ul><p>混洗的算法中，使用从数组的高位开始。<br>我们使用数组的后部存储随机组合的元素，并使用数组的前部存储其余元素。<br>只要我们在选取时进行统一采样，我们就不会关心其余元素的顺序！为了实现就地O（n）随机播放，然后，从前面选择一个随机剩余的元素，并将其放置在新位置（在后面）。<br>后面的未改组元素交换到前面，在此处等待后续改组：</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span><span class="params">(array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">array</span>.length, t, i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// While there remain elements to shuffle…</span></span><br><span class="line">  <span class="keyword">while</span> (m) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick a remaining element…</span></span><br><span class="line">    i = Math.floor(Math.random() * m--);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// And swap it with the current element.</span></span><br><span class="line">    t = <span class="keyword">array</span>[m];</span><br><span class="line">    <span class="keyword">array</span>[m] = <span class="keyword">array</span>[i];</span><br><span class="line">    <span class="keyword">array</span>[i] = t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即是:</p><p>index   0   1   2   3   4   5   6   7   8   9   10  11   12<br>value   1   2   3   4   5   6   7   8   9   10  J   Q   K</p><p><strong>第一轮：</strong><br>将 从 数组长度 12 中随机取出的索引，与最后一位置换:</p><p>.eg<br>m = 12<br>i = 3<br>index   0   1   2   3   4   5   6   7   8   9   10  11   12<br>value   1   2   3   K   5   6   7   8   9   10  J   Q   4</p><p><strong>第二轮</strong><br>.eg<br>m = 11<br>i = … (0 ~ 11 之间，不会再影响到已排序数组元素，即 11 之后的元素了~)</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轮播</title>
      <link href="/2020/03/30/2020/%E8%BD%AE%E6%92%AD/"/>
      <url>/2020/03/30/2020/%E8%BD%AE%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p><em>2020-07-03更新描述：回头再看，这个处理过程并不优雅🤒，写的也不好🤣，权当当时的思路记录吧</em></p><h4 id="仿造-CloudCarousel-3D轮播"><a href="#仿造-CloudCarousel-3D轮播" class="headerlink" title="仿造 CloudCarousel 3D轮播"></a>仿造 CloudCarousel 3D轮播</h4><p>先上效果图:<br><img src="/2020/03/30/2020/轮播/NO1.gif" alt="NO1" title="NO1"><br>（很是粗糙，还未做成通用型，未优化，先做记录下，以 <strong>8</strong> 图位为例子）</p><a id="more"></a><h5 id="首先我们需要将几个元素排列成圆"><a href="#首先我们需要将几个元素排列成圆" class="headerlink" title="# 首先我们需要将几个元素排列成圆"></a># <strong>首先我们需要将几个元素排列成圆</strong></h5><p>我们可以先计算 每一个元素之间间隔多少角度<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">distance</span> = <span class="number">360</span> / this.carouselData.<span class="built_in">length</span> ;</span><br><span class="line"><span class="keyword">const</span> itemdis = <span class="built_in">distance</span> * Math.PI / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 180° = Π * 弧度</span></span><br><span class="line"><span class="comment">// =&gt; 弧度 = 180° / Π</span></span><br><span class="line"><span class="comment">// 所以当我们知道了每一个所占的角度，就可以知道它 每两个间定长的弧度</span></span><br></pre></td></tr></table></figure></p><p><img src="/2020/03/30/2020/轮播/NO2.gif" alt="NO2" title="NO2"></p><p><strong>以 数组中每一位 数的 index 索引与 弧度相乘，结合 cos 、 sin 函数，我们就可以让他们围绕成为圆</strong></p><p>而半径则交给 <strong>radius</strong> 去决定</p><ul><li>Math.sin( (itemdis  <em> index) ) </em> radiusH + ‘px’</li><li>Math.cos( (itemdis <em> index) ) </em> radiusH + ‘px’</li></ul><p>所以第一步，我们可以在界面上画出：<br><img src="/2020/03/30/2020/轮播/NO3.png" alt="NO3" title="NO3"></p><p><strong>为什么它只有两个？</strong></p><p>这就是因为圆心我们并没有进行设置。</p><p>所以我们需要在上一步的基础上获取它的父容器的 宽高 作为中心点。（中心点可以自由去设置，此图为了完整展现，数据不完全。）</p><p><img src="/2020/03/30/2020/轮播/NO4.png" alt="NO4" title="NO4"></p><p>于是我们完成了第一步，将他们排列成<strong>圆</strong>。</p><h5 id="放扁，有立体感"><a href="#放扁，有立体感" class="headerlink" title="# 放扁，有立体感"></a># <strong>放扁，有立体感</strong></h5><p>第二步的操作其实并不麻烦，我们仅需要将他们 bottom 竖轴的半径进行压缩，他们随之就可以成为一个立体的椭圆了。<strong>靠想象</strong></p><p><img src="/2020/03/30/2020/轮播/NO5.png" alt="NO5" title="NO5"></p><h5 id="动起来"><a href="#动起来" class="headerlink" title="# 动起来"></a># <strong>动起来</strong></h5><p>起初想依靠 对 <strong>数据数组</strong> 进行 头部删除，尾部插入改变序列位置，从而达到动起来的效果。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">    <span class="comment">// 临界条件，单 0 索引的位置等于目标元素 的时候即停止。</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.carouselData[<span class="number">0</span>][<span class="string">'name'</span>] === item[<span class="string">'name'</span>]) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出 0号位置</span></span><br><span class="line">    unitItem = JSON.parse(JSON.stringify(<span class="keyword">this</span>.carouselData[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">this</span>.carouselData.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(() =&gt; &#123;</span><br><span class="line">        <span class="comment">// 入 数组尾部</span></span><br><span class="line">        <span class="keyword">this</span>.carouselData.push(unitItem);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition <span class="keyword">all</span> .<span class="number">8</span>s ease</span><br></pre></td></tr></table></figure><p><strong>跑题：</strong><br>transition 属性是一个简写属性，用于设置四个过渡属性：</p><ul><li>transition-property：<br>规定设置过渡效果的 CSS 属性的名称</li><li>transition-duration：<br>规定完成过渡效果需要多少秒或毫秒。</li><li>transition-timing-function：<br>规定速度效果的速度曲线。</li><li>transition-delay<br>定义过渡效果何时开始。</li></ul><p><strong>over</strong></p><p>这样的确可以有效针对中间元素的移动改变。但是每一次插入 数组尾部 的该元素来说，由于无法跟踪它插入前的位置，元素信息等等等。所以transition对它来说是无效的。<br>这就造成了下面（如图）的问题。</p><p><img src="/2020/03/30/2020/轮播/NO6.png" alt="NO6" title="NO6"></p><p>至少我们实现了第二步，动起来。</p><h5 id="更完美的动起来"><a href="#更完美的动起来" class="headerlink" title="# 更完美的动起来"></a># <strong>更完美的动起来</strong></h5><p>后来，一下想不着怎么办，就回家去想了。~ ~</p><p>后来，我想到的解决方式（事实上应该不止，我只能想到一种。。）</p><p><strong>我可以允许它数组以及每一位的索引位置等等不变，我可以动态计算，我应该在每一轮给它什么位置。即 我可以算给它，它在某一个时刻，应该在什么相对位置了。</strong></p><p><img src="/2020/03/30/2020/轮播/NO4.png" alt="NO7" title="NO7"></p><p><strong>解析：</strong><br>以数组及其索引为例子：(以 <strong>4图位</strong> 为例子)<br>索引位置：     [0]——–[1]——–[2]——–[3]</p><p>假设我点了 <strong>索引2</strong> 处的位置，那么 [2] 就应该来到 [0] 的位置，它所需要经历的路径有 [1]、[0]的这两个位置。</p><p>所以它需要遍历两次</p><hr><p>样式位置：     [0]——–[1]——–[2]——–[3]</p><hr><p>初始时候：     [0]——–[1]——–[2]——–[3]<br>   第一次：<br>一次结束：     [1]——–[2]——–[3]——–[0]<br>   第二次：<br>二次结束：     [2]——–[3]——–[0]——–[1]</p><hr><p>startIndex = 0; // 开始位置索引  0<br>step = 点击位置 - 开始索引 = &gt; 2 - 0 = 2; // 循环2次<br>iterStep = 1; 当前位移次数</p><hr><p>初始时候： [0]——–[1]——–[2]——–[3]</p><ul><li>第一次执行：</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 1  —&gt; [0]应该获得[3] 的样式 | length - iterStep + i  —&gt;  4 - 1 + 0 = 3;<br>[1]  |  1 !&lt; 1 —&gt; [1]应该获得[0] 的样式 | i - iterStep —&gt; 1 - 1 = 0;<br>[2]  |  2 !&lt; 1 —&gt; [2]应该获得[1] 的样式 | i - iterStep —&gt; 2 - 1 = 1;<br>[3]  |  3 !&lt; 1 —&gt; [3]应该获得[2] 的样式 | i - iterStep —&gt; 3 - 1 = 2;</p><p>获得样式对应 ：<br>[1]——–[2]——–[3]——–[0]</p><p>iterStep += 1; —&gt; iterStep = 2;<br>step -= 1; —&gt; step = 1;<br>step === 0 ？结束 ：继续；<br><strong>继续</strong></p><hr><ul><li>第二次执行：</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 2  —&gt; [0]应该获得[2] 的样式 | length - iterStep + i  —&gt;  4 - 2 + 0 = 2;<br>[1]  |  1 &lt; 2 —&gt; [1]应该获得[3] 的样式 | length - iterStep + i —&gt; 4 - 2 + 1 = 3;<br>[2]  |  2 !&lt; 2 —&gt; [2]应该获得[0] 的样式 | i - iterStep —&gt; 2 - 2 = 0;<br>[3]  |  3 !&lt; 2 —&gt; [3]应该获得[1] 的样式 | i - iterStep —&gt; 3 - 2 = 1;</p><p>获得样式对应 ：<br>[2]——–[3]——–[0]——–[1]</p><p>iterStep += 1; —&gt; iterStep = 3;<br>step -= 1; —&gt; step = 0;<br>step === 0 ？结束 ：继续；<br><strong>结束</strong></p><p>我们就可以先完善第一段代码：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let oldIndex = <span class="keyword">this</span>.nowFrontIndex; <span class="comment">// 当前初索引Index</span></span><br><span class="line">let step = index - oldIndex; <span class="comment">// 遍历次数</span></span><br><span class="line">let iterStep = <span class="number">1</span>; <span class="comment">// 临界条件</span></span><br><span class="line">let length = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nowFrontIndex = index; <span class="comment">// 更新初始Index</span></span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">        <span class="keyword">this</span>.interval = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    let result;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; iterStep) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle(length - iterStep + i);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle(i - iterStep);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iterStep += <span class="number">1</span>;</span><br><span class="line">    step -= <span class="number">1</span>;</span><br><span class="line">&#125;, <span class="number">400</span>);</span><br></pre></td></tr></table></figure></p><h6 id="再一次点击"><a href="#再一次点击" class="headerlink" title="再一次点击"></a>再一次点击</h6><p>当前位置  [2]——–[3]——–[0]——–[1]</p><p>假设我点了 <strong>索引3</strong> 处的位置，那么 [3] 就应该来到 [0] 的位置，它所需要经历的路径有 [0]的这个位置。</p><p>所以它需要遍历一次</p><hr><p>样式位置：     [0]——–[1]——–[2]——–[3]</p><hr><p>初始时候：     [2]——–[3]——–[0]——–[1]<br>   第一次：<br>一次结束：     [3]——–[0]——–[1]——–[2]</p><hr><p>startIndex = 2; // 开始位置索引  2<br>step = 点击索引 - 开始索引 = &gt; 3 - 2 = 1; // 循环2次<br>iterStep = 1; 当前位移次数  关键！ </p><p><strong>oldIndex ? iterStep += oldIndex : iterStep</strong> —&gt; iterStep = 3;</p><p>如果因为此次点击是在存在了第一次点击的情况下，所以对于目前的索引位置其实已经偏移过了。</p><hr><p>初始时候： [2]——–[3]——–[0]——–[1]</p><ul><li>第一次执行：</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 3  —&gt; [0]应该获得[1] 的样式 | length - iterStep + i  —&gt;  4 - 3 + 0 = 1;<br>[1]  |  1 &lt; 3 —&gt; [1]应该获得[2] 的样式 | length - iterStep + i —&gt; 4 - 3 + 1 = 2;<br>[2]  |  2 &lt; 3 —&gt; [2]应该获得[3] 的样式 | length - iterStep + i —&gt; 4 - 3 + 2= 3;<br>[3]  |  3 !&lt; 3 —&gt; [3]应该获得[0] 的样式 | i - iterStep —&gt; 3 - 3 = 0;</p><p>获得样式对应 ：<br>[3]——–[0]——–[1]——–[2]</p><p>iterStep += 1; —&gt; iterStep = 4;;<br>step -= 1; —&gt; step = 0;<br>step === 0 ？结束 ：继续；<br><strong>结束</strong></p><p>所以我们再一次完善一下我们的代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">let oldIndex = <span class="keyword">this</span>.nowFrontIndex; <span class="comment">// 当前初索引Index</span></span><br><span class="line">let step = index - oldIndex; <span class="comment">// 遍历次数</span></span><br><span class="line">let iterStep = <span class="number">1</span>; <span class="comment">// 临界条件</span></span><br><span class="line">let length = <span class="keyword">this</span>.arr.length;</span><br><span class="line">+++++</span><br><span class="line">+ <span class="keyword">if</span>(oldIndex) &#123;</span><br><span class="line">+     iterStep += oldIndex;</span><br><span class="line">+ &#125;</span><br><span class="line">+++++</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nowFrontIndex = index; <span class="comment">// 更新初始Index</span></span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">        <span class="keyword">this</span>.interval = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    let result;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; iterStep) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle( length - iterStep + i);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle(i - iterStep);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iterStep += <span class="number">1</span>;</span><br><span class="line">    step -= <span class="number">1</span>;</span><br><span class="line">&#125;, <span class="number">400</span>);</span><br></pre></td></tr></table></figure></p><h6 id="再再一次点击"><a href="#再再一次点击" class="headerlink" title="再再一次点击"></a>再再一次点击</h6><p>当前位置  [3]——–[0]——–[1]——–[2]</p><p>假设我点了 <strong>索引1</strong> 处的位置，那么 [1] 就应该来到 [0] 的位置，它所需要经历的路径有 [0]，[1]的这个位置。</p><p>所以它需要遍历一次</p><hr><p>样式位置：     [0]——–[1]——–[2]——–[3]</p><hr><p>初始时候：     [3]——–[0]——–[1]——–[2]<br>   第一次：<br>一次结束：     [0]——–[1]——–[2]——–[3]<br>   第二次：<br>二次结束：     [1]——–[2]——–[3]——–[0]</p><hr><p>还记得我们的计算方式吗？我们快速走一遍。</p><p>startIndex = 3; // 开始位置索引  3<br>step = 点击索引 - 开始索引 = &gt; 1 - 3 = <strong>-2</strong> ； //  ？ ？ ？<br>iterStep = 1; 当前位移次数  关键！ </p><p><strong>oldIndex ? iterStep += oldIndex : iterStep</strong> —&gt; 1 + 3 = 4；;</p><ul><li>第一次执行</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 4  —&gt; [0]应该获得[0] 的样式 | length - iterStep + i  —&gt;  4 - 4 + 0 = 0;<br>[1]  |  1 &lt; 4 —&gt; [1]应该获得[1] 的样式 | length - iterStep + i —&gt; 4 - 4 + 1 = 1;<br>[2]  |  2 &lt; 4 —&gt; [2]应该获得[2] 的样式 | length - iterStep + i —&gt; 4 - 4 + 2 = 2;<br>[3]  |  3 &lt; 3 —&gt; [3]应该获得[3] 的样式 | length - iterStep + i —&gt; 4 - 4 + 3 = 3;</p><p>获得样式对应 ：<br>[0]——–[1]——–[2]——–[3]</p><p>iterStep += 1; —&gt; iterStep = 5;<br>step -= 1; —&gt; step = -3;<br>step === 0 ？结束 ：继续；<br><strong>继续</strong>【同时我们应该注意到，它将不会停止了！】</p><p>所以我们需要修改我们的循环次数了。</p><p>[3]——–[0]——–[1]——–[2]<br>当我们点击 [0]  —&gt; 0 - 3 = -3 —&gt; step = -3 — 实际循环 1 次<br>当我们点击 [1]  —&gt; 1 - 3 = -2 —&gt; step = -2 — 实际循环 2 次<br>当我们点击 [2]  —&gt; 2 - 3 = -1 —&gt; step = -1 — 实际循环 3 次<br>-3 + length —&gt; -3 + 4 = 1<br>-2 + length —&gt; -2 + 4 = 2<br>-1 + length —&gt; -1 + 4 = 3<br><strong>so</strong><br>我们需要更改完善一下我们的代码了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">let oldIndex = <span class="keyword">this</span>.nowFrontIndex; <span class="comment">// 当前初索引Index</span></span><br><span class="line">let step = index - oldIndex; <span class="comment">// 遍历次数</span></span><br><span class="line">let iterStep = <span class="number">1</span>; <span class="comment">// 临界条件</span></span><br><span class="line">let length = <span class="keyword">this</span>.arr.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(oldIndex) &#123;</span><br><span class="line">   iterStep += oldIndex;</span><br><span class="line">&#125;</span><br><span class="line">+++++</span><br><span class="line">+ <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">+   step += length;</span><br><span class="line">+ &#125;</span><br><span class="line">+++++</span><br><span class="line"><span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nowFrontIndex = index; <span class="comment">// 更新初始Index</span></span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">        <span class="keyword">this</span>.interval = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    let result;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; iterStep) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle( length - iterStep + i);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle(i - iterStep);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iterStep += <span class="number">1</span>;</span><br><span class="line">    step -= <span class="number">1</span>;</span><br><span class="line">&#125;, <span class="number">400</span>);</span><br></pre></td></tr></table></figure><p>所以我们再重复一下以上点击，执行看看。</p><h6 id="再再再一次点击"><a href="#再再再一次点击" class="headerlink" title="再再再一次点击"></a>再再再一次点击</h6><p>当前位置  [3]——–[0]——–[1]——–[2]</p><p>假设我点了 <strong>索引1</strong> 处的位置，那么 [1] 就应该来到 [0] 的位置，它所需要经历的路径有 [0]，[1]的这个位置。</p><p>所以它需要遍历一次</p><hr><p>样式位置：     [0]——–[1]——–[2]——–[3]</p><hr><p>初始时候：     [3]——–[0]——–[1]——–[2]<br>   第一次：<br>一次结束：     [0]——–[1]——–[2]——–[3]<br>   第二次：<br>二次结束：     [1]——–[2]——–[3]——–[0]</p><hr><p>还记得我们的计算方式吗？我们快速走一遍。</p><p>startIndex = 3; // 开始位置索引  3<br>step = 点击索引 - 开始索引 = &gt; 1 - 3 = -2<br><strong>step &lt; 0 ? step += length : step</strong> —&gt; -2 + 4 = 2； step = 2;</p><p>iterStep = 1; 当前位移次数  关键！ </p><p><strong>oldIndex ? iterStep += oldIndex : iterStep</strong> —&gt; 1 + 3 = 4； iterStep = 4;</p><ul><li>第一次执行</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 4  —&gt; [0]应该获得[0] 的样式 | length - iterStep + i  —&gt;  4 - 4 + 0 = 0;<br>[1]  |  1 &lt; 4 —&gt; [1]应该获得[1] 的样式 | length - iterStep + i —&gt; 4 - 4 + 1 = 1;<br>[2]  |  2 &lt; 4 —&gt; [2]应该获得[2] 的样式 | length - iterStep + i —&gt; 4 - 4 + 2 = 2;<br>[3]  |  3 &lt; 4 —&gt; [3]应该获得[3] 的样式 | length - iterStep + i —&gt; 4 - 4 + 3 = 3;</p><p>获得样式对应 ：<br>[0]——–[1]——–[2]——–[3]</p><p>iterStep += 1; —&gt; iterStep = 5;<br>step -= 1; —&gt; step = 1;<br>step === 0 ？结束 ：继续；<br><strong>继续</strong></p><ul><li>第二次执行</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong><br>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 5  —&gt; [0]应该获得[3] 的样式 | length - iterStep + i  —&gt;  4 - 5 + 0 = -1;  —  ？ ？ ？<br>[1]  |  1 &lt; 5 —&gt; [1]应该获得[0] 的样式 | length - iterStep + i —&gt; 4 - 5 + 1 = 0;<br>[2]  |  2 &lt; 5 —&gt; [2]应该获得[1] 的样式 | length - iterStep + i —&gt; 4 - 5 + 2 = 1;<br>[3]  |  3 &lt; 5 —&gt; [3]应该获得[2] 的样式 | length - iterStep + i —&gt; 4 - 5 + 3 = 2;</p><p>获得样式对应 ：<br>[1]——–[2]——–[3]——–[0 // <strong>-1</strong> ？？？]</p><p>iterStep += 1; —&gt; iterStep = 6;<br>step -= 1; —&gt; step = 0;<br>step === 0 ？结束 ：继续；<br><strong>结束</strong><br>我们可以注意到 -1 位置 ? 那 0 的样式就完全错了。后续也肯定会全错！<br>那问题就在我们的判断分支上了。</p><p>即使存在上一轮的 iterStep, 也不应该持续不断的 + oldIndex 或者 + 1 下去。<br>但它轮转了length 长度的圈度之后，它应该重新从 “0”开始计数。</p><p>也就是 iterStep &gt; length 的时候，它应该 <strong>iterStep - length</strong>;</p><p>所以我们再再一次改变我们的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">let oldIndex = <span class="keyword">this</span>.nowFrontIndex; <span class="comment">// 当前初索引Index</span></span><br><span class="line">let step = index - oldIndex; <span class="comment">// 遍历次数</span></span><br><span class="line">let iterStep = <span class="number">1</span>; <span class="comment">// 临界条件</span></span><br><span class="line">let length = <span class="keyword">this</span>.arr.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(oldIndex) &#123;</span><br><span class="line">   iterStep += oldIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">   step += length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nowFrontIndex = index; <span class="comment">// 更新初始Index</span></span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">        <span class="keyword">this</span>.interval = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    let result;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; length; i ++) &#123;</span><br><span class="line">        +++++</span><br><span class="line">        + <span class="keyword">if</span> (iterStep &gt; length) &#123;</span><br><span class="line">        +    iterStep -= length;</span><br><span class="line">        + &#125;</span><br><span class="line">        +++++</span><br><span class="line">        <span class="keyword">if</span> (i &lt; iterStep) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle( length - iterStep + i);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.transformAtCircle(i - iterStep);</span><br><span class="line">            <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.arr, i, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    iterStep += <span class="number">1</span>;</span><br><span class="line">    step -= <span class="number">1</span>;</span><br><span class="line">&#125;, <span class="number">400</span>);</span><br></pre></td></tr></table></figure><h6 id="再再再再一次点击"><a href="#再再再再一次点击" class="headerlink" title="再再再再一次点击"></a>再再再再一次点击</h6><p>当前位置  [3]——–[0]——–[1]——–[2]</p><p>假设我点了 <strong>索引1</strong> 处的位置，那么 [1] 就应该来到 [0] 的位置，它所需要经历的路径有 [0]，[1]的这个位置。</p><p>所以它需要遍历一次</p><hr><p>样式位置：     [0]——–[1]——–[2]——–[3]</p><hr><p>初始时候：     [3]——–[0]——–[1]——–[2]<br>   第一次：<br>一次结束：     [0]——–[1]——–[2]——–[3]<br>   第二次：<br>二次结束：     [1]——–[2]——–[3]——–[0]</p><hr><p>还记得我们的计算方式吗？我们快速走一遍。</p><p>startIndex = 3; // 开始位置索引  3<br>step = 点击索引 - 开始索引 = &gt; 1 - 3 = -2<br><strong>step &lt; 0 ? step += length : step</strong> —&gt; -2 + 4 = 2； step = 2;</p><p>iterStep = 1; 当前位移次数  关键！ </p><p><strong>oldIndex ? iterStep += oldIndex : iterStep</strong> —&gt; 1 + 3 = 4； iterStep = 4;</p><ul><li>第一次执行</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong></p><p><strong>iterStep &gt; length ? iterStep -= length : iterStep</strong> —&gt; iterStep = 4;</p><p>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 4  —&gt; [0]应该获得[0] 的样式 | length - iterStep + i  —&gt;  4 - 4 + 0 = 0;<br>[1]  |  1 &lt; 4 —&gt; [1]应该获得[1] 的样式 | length - iterStep + i —&gt; 4 - 4 + 1 = 1;<br>[2]  |  2 &lt; 4 —&gt; [2]应该获得[2] 的样式 | length - iterStep + i —&gt; 4 - 4 + 2 = 2;<br>[3]  |  3 &lt; 4 —&gt; [3]应该获得[3] 的样式 | length - iterStep + i —&gt; 4 - 4 + 3 = 3;</p><p>获得样式对应 ：<br>[0]——–[1]——–[2]——–[3]</p><p>iterStep += 1; —&gt; iterStep = 5;<br>step -= 1; —&gt; step = 1;<br>step === 0 ？结束 ：继续；<br><strong>继续</strong></p><ul><li>第二次执行</li></ul><p>length = 4;<br><strong>for(let i = 0 ; i &lt;= length - 1; i++)</strong></p><p><strong>iterStep &gt; length ? iterStep -= length : iterStep</strong> —&gt; iterStep = 5 &gt; 4 —&gt; 1;</p><p>判断条件： i &lt; iterStep<br>[0]  |  0 &lt; 1  —&gt; [0]应该获得[3] 的样式 | length - iterStep + i  —&gt;  4 - 1 + 0 = 3;<br>[1]  |  1 &lt; 1 —&gt; [1]应该获得[0] 的样式 | i - iterStep —&gt; 1 - 1 = 0；<br>[2]  |  2 &lt; 1 —&gt; [2]应该获得[1] 的样式 | i - iterStep —&gt; 2 - 1 = 1；<br>[3]  |  3 &lt; 1 —&gt; [3]应该获得[2] 的样式 | i - iterStep —&gt; 3 - 1 = 2；</p><p>获得样式对应 ：<br>[1]——–[2]——–[3]——–[0]</p><p>iterStep += 1; —&gt; iterStep = 2;<br>step -= 1; —&gt; step = 0;<br>step === 0 ？结束 ：继续；<br><strong>结束</strong></p><hr><p>这样就暂时完成单向的转轮。<br>还有双向循环的旋转，就不做介绍了。<br>贴代码。</p><h5 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h5><p>以 8 图 为例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.interval) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    let oldIndex = <span class="keyword">this</span>.nowFrontIndex; <span class="comment">// 当前初索引Index</span></span><br><span class="line">    let midIndex,</span><br><span class="line">        isRight = <span class="literal">false</span>; <span class="comment">// middleIndex</span></span><br><span class="line">    <span class="keyword">if</span> (oldIndex &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        midIndex = oldIndex - <span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        midIndex = oldIndex + <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    isRight = <span class="keyword">this</span>.computedIsRightPart(midIndex, index, oldIndex); <span class="comment">// 左右</span></span><br><span class="line"></span><br><span class="line">    let step = index - oldIndex; <span class="comment">// 遍历次数</span></span><br><span class="line">    <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        step = <span class="number">8</span> + step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRight) &#123;</span><br><span class="line">        step = oldIndex - index;</span><br><span class="line">        <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            step = <span class="number">8</span> + step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let iterStep = <span class="number">1</span>; <span class="comment">// 临界条件</span></span><br><span class="line">    <span class="keyword">if</span> (oldIndex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isRight) &#123;</span><br><span class="line">            iterStep += oldIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.nowFrontIndex = index; <span class="comment">// 更新初始Index</span></span><br><span class="line">            clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">            <span class="keyword">this</span>.interval = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        let result;</span><br><span class="line">        <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isRight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; oldIndex) &#123;</span><br><span class="line">                    let key = <span class="number">8</span> - oldIndex;</span><br><span class="line">                    <span class="keyword">if</span> ((key + i + iterStep) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                        result = <span class="keyword">this</span>.transformAtCircle(key + i + iterStep);</span><br><span class="line">                        <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result = <span class="keyword">this</span>.transformAtCircle((key + i + iterStep) - <span class="number">8</span>);</span><br><span class="line">                        <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i - oldIndex + iterStep) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                        result = <span class="keyword">this</span>.transformAtCircle(i - oldIndex + iterStep);</span><br><span class="line">                        <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result = <span class="keyword">this</span>.transformAtCircle(i - oldIndex + iterStep - <span class="number">8</span>);</span><br><span class="line">                        <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (iterStep &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">                    iterStep = iterStep - <span class="number">8</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (i &lt; iterStep) &#123;</span><br><span class="line">                    <span class="comment">// let key = 8 - iterStep + i;</span></span><br><span class="line">                    <span class="comment">// if (key &lt; 0) &#123;</span></span><br><span class="line">                    <span class="comment">//     key = iterStep - 9</span></span><br><span class="line">                    <span class="comment">// &#125;</span></span><br><span class="line">                    result = <span class="keyword">this</span>.transformAtCircle(<span class="number">8</span> - iterStep + i);</span><br><span class="line">                    <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = <span class="keyword">this</span>.transformAtCircle(i - iterStep);</span><br><span class="line">                    <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.computedCarouselLoca, i, result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        iterStep += <span class="number">1</span>;</span><br><span class="line">        step -= <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">400</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adv</title>
      <link href="/2020/02/15/2020/adv/"/>
      <url>/2020/02/15/2020/adv/</url>
      
        <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>2020开年就遭遇了疫情，来势汹汹，武汉加油🙏</p><p>本该回去上班的大家，都改成了远程办公，合着实际的业务工作也没有下发多少，就在假期把小组任务做了，尝试封装一些组内的通用组件。</p><p>分别由<code>input</code>、<code>select</code>、<code>button</code>、<code>time</code>、<code>Date</code>、<code>Tab</code>。<br>样式有一些是模仿了<code>Element</code>的组件样式，并且在遇到内部的一些逻辑不太明了的时候，可以通过查看Element的相关组件源码从而进行解决了。</p><p>话不多说，先上效果图…</p><a id="more"></a><h6 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h6><p><img src="/2020/02/15/2020/adv/NO1.gif" alt="NO1" title="NO1"></p><h6 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h6><p><img src="/2020/02/15/2020/adv/NO2.gif" alt="NO2" title="NO2"></p><h6 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h6><p><img src="/2020/02/15/2020/adv/NO3.gif" alt="NO3" title="NO3"></p><h6 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h6><p><img src="/2020/02/15/2020/adv/NO4.gif" alt="NO4" title="NO4"></p><h6 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h6><p><img src="/2020/02/15/2020/adv/NO5.gif" alt="NO5" title="NO5"></p><h6 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h6><p><img src="/2020/02/15/2020/adv/NO6.gif" alt="NO6" title="NO6"></p><h6 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h6><p>其实封装一些通用组件对整一个结构路径的学习把握，比多看一些源码的作用和影响相对来说也大一些。<br>内部有很多的事件，逻辑其实也没有考量的很清楚，毕竟也是不到一个月内完成的内容，如果要优化和改进，可以修改的地方其实还有很多。<br>但是也是这个过程学习到了很多，例如再次模仿<code>Element</code>重新写了一些适用的失焦指令，日期时间面板的计算函数、周数的计算函数等等等…<br>这些都是很有趣的知识点，一下子的总结还有很多，接下来会慢慢介绍这些内容：</p><p><em>未完待续…</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> Adv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重绘回流</title>
      <link href="/2020/02/03/2020/%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/"/>
      <url>/2020/02/03/2020/%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="重绘（repaint）"><a href="#重绘（repaint）" class="headerlink" title="重绘（repaint）"></a>重绘（repaint）</h4><p>由于节点的几何属性发生了改变或者由于样式发生改变而不影响布局的，称为重绘，例如outline，visibility，color，background-color。</p><h4 id="回流（reflow）"><a href="#回流（reflow）" class="headerlink" title="回流（reflow）"></a>回流（reflow）</h4><p>回流是布局或者几何属性需要改变就称为回流，回流是影响浏览器性能的关键因素，因为回流设计涉及到部分页面、或者整个页面的布局更新，一个元素的回流会导致其所有子元素以及DOM紧随其后的节电等元素的回流。</p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>回流会引发重绘，重绘不一定会引起回流。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul><li><code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code>、<code>offsetHeight</code></li><li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li><li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li><li><code>width</code>、<code>height</code></li><li><code>getComputedStyle</code></li></ul><p>这些属性，均会引起强制渲染刷新队列。</p><h4 id="减少重绘与回流"><a href="#减少重绘与回流" class="headerlink" title="减少重绘与回流"></a>减少重绘与回流</h4><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ol><li>使用transform代替top；</li><li>使用visibility代替display: none，前者重绘，后者回流；</li><li>避免使用table布局；</li><li>尽可能再DOM树最末端改变class；</li><li><p>避免多层内联样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将动画效果应用到position为absolute或者fixed的元素上，避免影响其他元素布局；</p></li></ol><h5 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h5><ol><li>避免频繁操作样式，最好一次性写style，不要分开很多个，或者一次性更改class；</li><li>避免频繁操作DOM；</li><li>避免频繁读取会引起重绘、回流的属性；</li><li>有负责动画的元素使用绝对定位，脱离文档流，否则引起父元素及后续元素的频繁回流。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Diff</title>
      <link href="/2020/01/17/2020/Vue-Diff/"/>
      <url>/2020/01/17/2020/Vue-Diff/</url>
      
        <content type="html"><![CDATA[<p>大部分内容引用自此博客：<a href="http://hcysun.me/vue-design/zh/renderer-diff.html" target="_blank" rel="noopener">vue-design</a>， 内容更全面和易懂，推荐大家看原文。</p><h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><p><strong>什么是虚拟DOM？：</strong></p><p>在内部的计算中，使用JS对象来描述并记录下一个DOM节点，这个就是虚拟DOM</p><a id="more"></a><p><img src="/2020/01/17/2020/Vue-Diff/NO1.png" alt="NO1" title="NO1"><br><img src="/2020/01/17/2020/Vue-Diff/NO2.png" alt="NO2" title="NO2"></p><p><strong>起因：</strong><br><em>浏览器DOM树太多庞杂，具备的属性十分复杂，更新渲染所耗费的性能多、大。</em></p><p><strong>实际上的的作用？：</strong><br><img src="/2020/01/17/2020/Vue-Diff/NO3.png" alt="NO3" title="NO3"></p><p><strong>VDOM定义的位置：</strong><br><em>src/core/vdom/vnode.js   是一个构造函数</em><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义了VNode</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> VNode &#123;</span><br><span class="line">  tag: <span class="built_in">string</span> | <span class="built_in">void</span>; <span class="comment">/** 最终得vnode标签属性 */</span></span><br><span class="line">  data: VNodeData | <span class="built_in">void</span>; <span class="comment">/** 包含最终节点上的style class attr */</span></span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;; <span class="comment">/** 子节点 */</span></span><br><span class="line">  text: <span class="built_in">string</span> | <span class="built_in">void</span>; <span class="comment">/** 文本属性 */</span></span><br><span class="line">  elm: Node | <span class="built_in">void</span>; <span class="comment">/** 对应得真是dom */</span></span><br><span class="line">  ns: <span class="built_in">string</span> | <span class="built_in">void</span>;</span><br><span class="line">  context: Component | <span class="built_in">void</span>; <span class="comment">// rendered in this component's scope</span></span><br><span class="line">  key: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">void</span>; <span class="comment">/** key值， diff时可以提高效率， 具体入v-for时 需要声明 :key */</span></span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="built_in">void</span>;</span><br><span class="line">  componentInstance: Component | <span class="built_in">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  parent: VNode | <span class="built_in">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line">  <span class="comment">// strictly internal</span></span><br><span class="line">  raw: <span class="built_in">boolean</span>; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  isStatic: <span class="built_in">boolean</span>; <span class="comment">// hoisted static node</span></span><br><span class="line">  isRootInsert: <span class="built_in">boolean</span>; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  isComment: <span class="built_in">boolean</span>; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  isCloned: <span class="built_in">boolean</span>; <span class="comment">// is a cloned node?</span></span><br><span class="line">  isOnce: <span class="built_in">boolean</span>; <span class="comment">// is a v-once node?</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="built_in">void</span>; <span class="comment">// async component factory function</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="built_in">void</span>;</span><br><span class="line">  isAsyncPlaceholder: <span class="built_in">boolean</span>;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="built_in">void</span>;</span><br><span class="line">  fnContext: Component | <span class="built_in">void</span>; <span class="comment">// real context vm for functional nodes</span></span><br><span class="line">  fnOptions: ?ComponentOptions; <span class="comment">// for SSR caching</span></span><br><span class="line">  devtoolsMeta: ?<span class="built_in">Object</span>; <span class="comment">// used to store functional render context for devtools</span></span><br><span class="line">  fnScopeId: ?<span class="built_in">string</span>; <span class="comment">// functional scope id support</span></span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    tag?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    data?: VNodeData,</span></span><br><span class="line"><span class="params">    children?: ?<span class="built_in">Array</span>&lt;VNode&gt;,</span></span><br><span class="line"><span class="params">    text?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    elm?: Node,</span></span><br><span class="line"><span class="params">    context?: Component,</span></span><br><span class="line"><span class="params">    componentOptions?: VNodeComponentOptions,</span></span><br><span class="line"><span class="params">    asyncFactory?: <span class="built_in">Function</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.children = children</span><br><span class="line">    <span class="keyword">this</span>.text = text</span><br><span class="line">    <span class="keyword">this</span>.elm = elm</span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory</span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="keyword">get</span> child (): Component | <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>那我们要定义多少种类型的VNODE呢？</strong></p><ul><li>注释节点</li><li>文本节点</li><li>元素节点</li><li>组件节点</li><li>函数式组件节点</li><li>克隆节点</li></ul><p><em>前边的基本就是读取一个DOM元素之后，去拆解去组装成一个相对应DOM的VNODE元素，再回头看看这个虚拟DOM全程，最麻烦的地方在哪里呢？</em></p><p><strong>而VNODE更新的这个过程？</strong><br><em>DOM-Diff、patch：</em> 打补丁</p><p>简而言之，就是对旧的VNODE根据新的VNODE进行修补的这么一个过程，使得最终新旧VNODE保持一致。<strong>以newVNODE为基准，改造oldVNODE，这就是patch干的事，当然的前提是相同类型的VNODE才有对比的意义。</strong></p><p><strong>当新旧的VNODE类型不同时：</strong>调用一些replace将新的Vnode替换了旧Vnode。</p><p><strong>更新标签元素的基本规则，更新相同标签的VNode时：</strong>例如都为div<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧的 VNodeconst prevVNode = h('div', &#123;</span></span><br><span class="line">  <span class="attribute">style</span>: &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="string">'100px'</span>,</span><br><span class="line">    <span class="attribute">height</span>: <span class="string">'100px'</span>,</span><br><span class="line">    <span class="attribute">backgroundColor</span>: <span class="string">'red'</span></span><br><span class="line">  &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的 VNodeconst nextVNode = h('div', &#123;</span></span><br><span class="line">  <span class="attribute">style</span>: &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="string">'100px'</span>,</span><br><span class="line">    <span class="attribute">height</span>: <span class="string">'100px'</span>,</span><br><span class="line">    <span class="attribute">border</span>: <span class="string">'1px solid green'</span></span><br><span class="line">  &#125;&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>第 1 步：当新的 VNodeData 存在时，遍历新的 VNodeData。</li><li>第 2 步：根据新 VNodeData 中的 key，分别尝试读取旧值和新值，即 prevValue 和 nextValue。</li><li>第 3 步：使用 switch…case 语句匹配不同的数据进行不同的更新操作</li></ul><p><strong>更新完VNode后，其下更新子节点：</strong></p><p><img src="/2020/01/17/2020/Vue-Diff/NO4.png" alt="NO4" title="NO4"></p><p><strong>3 x 3 种组合</strong></p><ul><li><p>一、新旧节点都是单子节点，那我们对比他们替换不同即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">patch</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>二、旧节点一个子节点，新节点无子节点，我们将旧节点子节点移除即可</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">removeChild()</span></span><br></pre></td></tr></table></figure></li><li><p>三、旧节点有一个子节点，新节点有多个子节点的情况，我们可以移除旧节点子节点，再将新节点子节点遍历挂载上去。</p></li></ul><p><img src="/2020/01/17/2020/Vue-Diff/NO5.png" alt="NO5" title="NO5"></p><ul><li>四、五、六、当旧节点没有子节点的时候，新节点有一个子节点，或者多个子节点，那么依次挂载上去即可，若新节点没有子节点，那就什么都不用做了。</li><li>七、当旧节点有多个子节点的时候，新节点只有一个子节点，那么删了旧节点的所有子节点，挂载上新节点的那一个子节点。</li><li>八、当旧节点有多个子节点的时候，新节点没有子节点，那么删空旧节点的所有子节点即可。</li><li>九、当旧节点有多个子节点时候，新节点也有多个子节点的时候，就是核心的Diff对比</li></ul><p><strong>对于两多的情况，大家能想到用什么形式进行DOM的更新呢？</strong><br><strong>全部删除？再全部增加</strong></p><h6 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h6><p>新旧DOM的内部节点庞杂且复杂，所以核心的Diff是居于同层级间的比较，即是 oldVnode中有多个子节点，newVnode有多个子节点的情况</p><p><img src="/2020/01/17/2020/Vue-Diff/NO6.png" alt="NO6" title="NO6"></p><p>我们再VNode的el中挂载了DOM元素</p><p><img src="/2020/01/17/2020/Vue-Diff/NO7.png" alt="NO7" title="NO7"></p><p>如果标签什么的相同，我们用之前列举的集中patch即可进行比较。</p><p><img src="/2020/01/17/2020/Vue-Diff/NO8.png" alt="NO8" title="NO8"></p><p><img src="/2020/01/17/2020/Vue-Diff/NO9.png" alt="NO9" title="NO9"></p><p>如果新的VNode列表相较于旧的VNode是长的，那么最后的节点我们依然要创建节点，旧的VNode节点相较于新的VNode节点是短的，那么我们最后要删除销毁多余的DOM节点。</p><h6 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h6><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">假设 第三个参数是<span class="built_in">key</span>标识</span><br><span class="line"><span class="comment">// 旧</span></span><br><span class="line">[</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">2</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">3</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新</span></span><br><span class="line">[</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">3</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, <span class="keyword">null</span>, <span class="number">2</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果我们按照之前的对比。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">h</span><span class="params">(<span class="string">'li'</span>, null, <span class="number">1</span>)</span></span></span><br><span class="line"><span class="comment">// vs</span></span><br><span class="line"><span class="function"><span class="title">h</span><span class="params">(<span class="string">'li'</span>, null, <span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>毫无疑问我们可能三次对比中都会去执行一下对比方法，但是根据我们直接观察，我们是可以通过移动他们的顺序从而达到更新DOM的效果的。</p><p>为了方便通过key进行对比的过程，我们在创建VNode的时候还需要保留对它的key的记录。</p><p><img src="/2020/01/17/2020/Vue-Diff/NO10.png" alt="NO10" title="NO10"></p><p><strong>我们通过key知道了他们之间的映射关系</strong>，我们只需要遍历新的children中的每一个节点，去旧的children中寻找是否有相同的key值节点即可。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历新的 childrenfor (let i = 0; i &lt; nextChildren.length; i++) &#123;</span></span><br><span class="line">  <span class="keyword">const</span> nextVNode = nextChildren[i]</span><br><span class="line">  let j = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 遍历旧的 children</span></span><br><span class="line">  <span class="keyword">for</span> (j; j &lt; prevChildren.<span class="built_in">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevVNode = prevChildren[j]</span><br><span class="line">    <span class="comment">// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更</span></span><br><span class="line">    <span class="keyword">if</span> (nextVNode.key === prevVNode.key) &#123;</span><br><span class="line">      <span class="keyword">patch</span>(prevVNode, nextVNode, container)</span><br><span class="line">      <span class="keyword">break</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>用key标记后又怎么找到需要移动的节点呢？</strong></p><p><img src="/2020/01/17/2020/Vue-Diff/NO11.png" alt="NO11" title="NO11"></p><p>我们对新的Vnode节点进行遍历，去旧节点找寻所在的索引位置，例如：我们在新节点中找到li-a，发现在旧节点中所对应的索引是0，依次类推，最后的索引就是0-1-2。<br>这个索引对我们有什么帮助呢？<br><strong>这是一个递增的顺序，这说明如果在寻找的过程中遇到的索引呈现递增趋势，则说明新旧 children 中节点顺序相同，不需要移动操作。相反的，如果在寻找的过程中遇到的索引值不呈现递增趋势，则说明需要移动操作</strong></p><p><img src="/2020/01/17/2020/Vue-Diff/NO12.png" alt="NO12" title="NO12"></p><p>按照这个例子，我们最终找出来的索引是2-0-1</p><p>我们一开始找到的索引是2，而后是0，我们遇到了比2小的索引数，打破了递增的规律，我们此时知道了，在旧的Vnode中，li-c所处的位置是比li-a要靠后的，我们即 得出 li-a如果要更新在新的VNode中，它需要后移，<strong>并以li-c做最大索引参照物</strong></p><h6 id="移动节点"><a href="#移动节点" class="headerlink" title="移动节点"></a>移动节点</h6><p>新的节点在经过对比后也将拥有对真实DOM的引用</p><p><img src="/2020/01/17/2020/Vue-Diff/NO13.png" alt="NO13" title="NO13"></p><p><strong>我们需要怎么移动元素呢？</strong><br>li-c作为第一各元素，我们完成对它的内部的对比更新即可</p><p>我们遍历到li-a的时候，我们知道它在旧DOMchildren中的索引是0，所以0 &lt; 2，我们需要移动li-a元素<br>而此时我们遍历的为新节点数组的li-a位置，我们拿到el真实DOM之后，在上一个元素之后插入即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const refNode = nextChildren[<span class="selector-tag">i</span> - <span class="number">1</span>]<span class="selector-class">.el</span><span class="selector-class">.nextSibling</span> <span class="comment">// 上一个元素原本的下一个元素</span></span><br><span class="line"><span class="comment">// 调用 insertBefore 函数移动 DOM</span></span><br><span class="line">container.insertBefore(prevVNode<span class="selector-class">.el</span>, refNode)</span><br></pre></td></tr></table></figure><p><img src="/2020/01/17/2020/Vue-Diff/NO14.png" alt="NO14" title="NO14"></p><h6 id="添加新元素"><a href="#添加新元素" class="headerlink" title="添加新元素"></a>添加新元素</h6><p><img src="/2020/01/17/2020/Vue-Diff/NO15.png" alt="NO15" title="NO15"></p><p>我们可以找到，在旧的children中li-d是不存在的。<br>我们只需要将新的此节点挂载在正确位置上即可。<br><strong>如何知道此节点不存在？</strong><br>我们添加一个标志变量，在遍历新的children是声明为false，在旧的内部遍历时，找到此key节点，则置为true，最终验证此变量即可</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; nextChildren.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> nextVNode = nextChildren[i]</span><br><span class="line">  let j = <span class="number">0</span>,</span><br><span class="line">    find = <span class="literal">false</span> <span class="comment">//   &lt;== 这</span></span><br><span class="line">  <span class="keyword">for</span> (j; j &lt; prevChildren.<span class="built_in">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevVNode = prevChildren[j]</span><br><span class="line">    <span class="keyword">if</span> (nextVNode.key === prevVNode.key) &#123;</span><br><span class="line">      find = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">patch</span>(prevVNode, nextVNode, container)</span><br><span class="line">      <span class="keyword">if</span> (j &lt; lastIndex) &#123;</span><br><span class="line">        <span class="keyword">const</span> refNode = nextChildren[i - <span class="number">1</span>].el.nextSibling</span><br><span class="line">        container.insertBefore(prevVNode.el, refNode)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 更新 lastIndex</span></span><br><span class="line">        lastIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!find) &#123;</span><br><span class="line">    <span class="comment">// 挂载新节点</span></span><br><span class="line">    <span class="keyword">const</span> refNode =</span><br><span class="line">          i - <span class="number">1</span> &lt; <span class="number">0</span></span><br><span class="line">            ? prevChildren[<span class="number">0</span>].el</span><br><span class="line">            : nextChildren[i - <span class="number">1</span>].el.nextSibling</span><br><span class="line">        mount(nextVNode, container, <span class="literal">false</span>, refNode)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个i-1&lt;0 是因为当前一个子节点为第一个节点的时候，我们把它插在最前面即可。</p><h6 id="移除不存在了的元素"><a href="#移除不存在了的元素" class="headerlink" title="移除不存在了的元素"></a>移除不存在了的元素</h6><p><img src="/2020/01/17/2020/Vue-Diff/NO16.png" alt="NO16" title="NO16"></p><p>我们用什么方法去移除寻找需要移除的DOM节点？<br>还记得我们一开始遍历的即是新的children吗，在内部才遍历旧children的吗？我们只会执行两次，第一次解决li-a、第二次解决li-b，然后就退出循环了</p><p>**所以我们需要在新的children遍历结束后，在进行一遍旧children的遍历，并且用旧children节点去新的children中寻找相同节点，如果找不到，则说明已经没有这个DOM了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除已经不存在的节点</span></span><br><span class="line"><span class="comment">// 遍历旧的节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prevChildren.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> prevVNode = prevChildren[i]</span><br><span class="line">  <span class="comment">// 拿着旧 VNode 去新 children 中寻找相同的节点</span></span><br><span class="line">  <span class="keyword">const</span> has = nextChildren.find(</span><br><span class="line">    nextVNode =&gt; nextVNode.key === prevVNode.key</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (!has) &#123;</span><br><span class="line">    <span class="comment">// 如果没有找到相同的节点，则移除</span></span><br><span class="line">    container.removeChild(prevVNode.el)</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p>上面的对比缺陷？</p><p><img src="/2020/01/17/2020/Vue-Diff/NO17.png" alt="NO17" title="NO17"></p><p><img src="/2020/01/17/2020/Vue-Diff/NO18.png" alt="NO18" title="NO18"></p><h5 id="VUE的对比？：双端比较"><a href="#VUE的对比？：双端比较" class="headerlink" title="VUE的对比？：双端比较"></a>VUE的对比？：双端比较</h5><p><img src="/2020/01/17/2020/Vue-Diff/NO19.png" alt="NO19" title="NO19"></p><p>我们使用四个索引指向着 old 与 new 的开始与结束，即双端</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">oldStartIdx</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">oldEndIdx</span> = prevChildren.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">newStartIdx</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">newEndIdx</span> = nextChildren.length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">// 同时</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">oldStartVNode</span> = prevChildren[oldStartIdx]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">oldEndVNode</span> = prevChildren[oldEndIdx]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">newStartVNode</span> = nextChildren[newStartIdx]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">newEndVNode</span> = nextChildren[newEndIdx]</span><br></pre></td></tr></table></figure><p><strong>每一次的对比都会执行以下四步：</strong><br>newStartIndex - oldStartIndex<br>newEndIndex - oldEndIndex<br>oldStartIndex - newEndIndex<br>newStartIndex - oldEndIndex</p><p><img src="/2020/01/17/2020/Vue-Diff/NO20.png" alt="NO20" title="NO20"></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤一：oldStartVNode 和 newStartVNode 比对&#125; </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤二：oldEndVNode 和 newEndVNode 比对&#125; </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤三：oldStartVNode 和 newEndVNode 比对&#125;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤四：oldEndVNode 和 newStartVNode 比对&#125;</span></span><br></pre></td></tr></table></figure><p> 在第四步中我们可以得到可以复用的节点<br> 我们将li-d移动到开头</p> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤一：oldStartVNode 和 newStartVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤二：oldEndVNode 和 newEndVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">  <span class="comment">// 步骤三：oldStartVNode 和 newEndVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">   * * * * * * * *  * * * * * * * * * * * * * 这 * * * * * * * * * *</span><br><span class="line">      <span class="comment">// 步骤四：oldEndVNode 和 newStartVNode 比对</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 先调用 patch 函数完成更新</span></span><br><span class="line">      patch(oldEndVNode, <span class="keyword">new</span><span class="type">StartVNode</span>, container)</span><br><span class="line">      <span class="comment">// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点</span></span><br><span class="line">      container.insertBefore(oldEndVNode.el, oldStartVNode.el)</span><br><span class="line">      <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">      oldEndVNode = prevChildren[--oldEndIdx]</span><br><span class="line">      <span class="keyword">new</span><span class="type">StartVNode</span> = nextChildren[++<span class="keyword">new</span><span class="type">StartIdx</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 而后我们进行下一次的对比：</p><p><img src="/2020/01/17/2020/Vue-Diff/NO21.png" alt="NO21" title="NO21"></p><p><img src="/2020/01/17/2020/Vue-Diff/NO22.png" alt="NO22" title="NO22"></p><p><strong>什么时候可以结束呢？</strong><br> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤一：oldStartVNode 和 newStartVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤二：oldEndVNode 和 newEndVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤三：oldStartVNode 和 newEndVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤四：oldEndVNode 和 newStartVNode 比对</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p> 当oldStartIndex 大于 olaEndIndex 或者 newStartIndex 大于 newEndIndex的时候</p><p> <em>第二轮中，我们找到了li-c，而它是最后一个节点，DOM顺序的话不需要移动</em></p> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤一：oldStartVNode 和 newStartVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    * * * * * * * * * * * * * * * * * * * * * 这 * * * * * * * * * *</span><br><span class="line">    <span class="comment">// 步骤二：oldEndVNode 和 newEndVNode 比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 patch 函数更新</span></span><br><span class="line">    patch(oldEndVNode, <span class="keyword">new</span><span class="type">EndVNode</span>, container)</span><br><span class="line">    <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">    oldEndVNode = prevChildren[--oldEndIdx]</span><br><span class="line">    <span class="keyword">new</span><span class="type">EndVNode</span> = nextChildren[--<span class="keyword">new</span><span class="type">EndIdx</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤三：oldStartVNode 和 newEndVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤四：oldEndVNode 和 newStartVNode 比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先调用 patch 函数完成更新</span></span><br><span class="line">    patch(oldEndVNode, <span class="keyword">new</span><span class="type">StartVNode</span>, container)</span><br><span class="line">    <span class="comment">// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点</span></span><br><span class="line">    container.insertBefore(oldEndVNode.el, oldStartVNode.el)</span><br><span class="line">    <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">    oldEndVNode = prevChildren[--oldEndIdx]</span><br><span class="line">    <span class="keyword">new</span><span class="type">StartVNode</span> = nextChildren[++<span class="keyword">new</span><span class="type">StartIdx</span>]</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/17/2020/Vue-Diff/NO23.png" alt="NO23" title="NO23"> </p><p> 我们执行第三步的时候在li-a处，满足了<br>oldStartVNode.key === newEndVNode.key<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤一：oldStartVNode 和 newStartVNode 比对</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤二：oldEndVNode 和 newEndVNode 比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 patch 函数更新</span></span><br><span class="line">    patch(oldEndVNode, <span class="keyword">new</span><span class="type">EndVNode</span>, container)</span><br><span class="line">    <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">    oldEndVNode = prevChildren[--oldEndIdx]</span><br><span class="line">    <span class="keyword">new</span><span class="type">EndVNode</span> = <span class="keyword">new</span><span class="type">EndVNode</span>[--<span class="keyword">new</span><span class="type">EndIdx</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    * * * * * * * * * 这 * * * * * * * * *</span><br><span class="line">    <span class="comment">// 步骤三：oldStartVNode 和 newEndVNode 比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 patch 函数更新</span></span><br><span class="line">    patch(oldStartVNode, <span class="keyword">new</span><span class="type">EndVNode</span>, container)</span><br><span class="line">    <span class="comment">// 将 oldStartVNode.el 移动到 oldEndVNode.el 的后面，也就是 oldEndVNode.el.nextSibling 的前面</span></span><br><span class="line">    container.insertBefore(</span><br><span class="line">      oldStartVNode.el,</span><br><span class="line">      oldEndVNode.el.nextSibling</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">    oldStartVNode = prevChildren[++oldStartIdx]</span><br><span class="line">    <span class="keyword">new</span><span class="type">EndVNode</span> = nextChildren[--<span class="keyword">new</span><span class="type">EndIdx</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 步骤四：oldEndVNode 和 newStartVNode 比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先调用 patch 函数完成更新</span></span><br><span class="line">    patch(oldEndVNode, <span class="keyword">new</span><span class="type">StartVNode</span>, container)</span><br><span class="line">    <span class="comment">// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点</span></span><br><span class="line">    container.insertBefore(oldEndVNode.el, oldStartVNode.el)</span><br><span class="line">    <span class="comment">// 更新索引，指向下一个位置</span></span><br><span class="line">    oldEndVNode = prevChildren[--oldEndIdx]</span><br><span class="line">    <span class="keyword">new</span><span class="type">StartVNode</span> = nextChildren[++<span class="keyword">new</span><span class="type">StartIdx</span>]</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>最后一轮</strong><br><img src="/2020/01/17/2020/Vue-Diff/NO24.png" alt="NO24" title="NO24"> </p><p><img src="/2020/01/17/2020/Vue-Diff/NO25.png" alt="NO25" title="NO25"> </p><p>patch li-b 即可</p><p><img src="/2020/01/17/2020/Vue-Diff/NO26.png" alt="NO26" title="NO26"> </p><h6 id="双端比较优势"><a href="#双端比较优势" class="headerlink" title="双端比较优势"></a>双端比较优势</h6><p><strong>还记得这个吗？</strong><br><img src="/2020/01/17/2020/Vue-Diff/NO27.png" alt="NO27" title="NO27"> </p><p><img src="/2020/01/17/2020/Vue-Diff/NO28.png" alt="NO28" title="NO28"> </p><p>在React的比较上基础上，我们使用双端比较来看看</p><p><img src="/2020/01/17/2020/Vue-Diff/NO29.png" alt="NO29" title="NO29"> </p><ul><li>④相同key，可复用，移动li-c</li></ul><p><img src="/2020/01/17/2020/Vue-Diff/NO30.png" alt="NO30" title="NO30"> </p><ul><li>然后我们发现就不再需要改变了</li></ul><h6 id="非理想情况的处理方式"><a href="#非理想情况的处理方式" class="headerlink" title="非理想情况的处理方式"></a>非理想情况的处理方式</h6><p>有这么一种情况，当①②③④都无法进行匹配上的时候</p><p><img src="/2020/01/17/2020/Vue-Diff/NO31.png" alt="NO31" title="NO31"> </p><p>那只能通过newStartIndex的这节点去oldChildren中寻找出来了<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartVNode.key === <span class="keyword">new</span><span class="type">EndVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVNode.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key) &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  * * * * * * * 这 * * * * * * * * *</span><br><span class="line">    <span class="comment">// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素</span></span><br><span class="line">    const idxInOld = prevChildren.findIndex(</span><br><span class="line">      node =&gt; node.key === <span class="keyword">new</span><span class="type">StartVNode</span>.key</span><br><span class="line">    )</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/01/17/2020/Vue-Diff/NO32.png" alt="NO32" title="NO32"> </p><p>else 的关键在于，找到了在oldChildren中的这个DOM，并且明白它已经在newChildren中被移动到了最前面。</p><ul><li>oldChildren 中的DOM被移动到最前面</li><li>调用patch函数完成更新</li><li>把oldChildren的目标节点移动在最前面，即oldStartIndex.el前面</li><li>同时将该位置将被置为undefined</li></ul><p><img src="/2020/01/17/2020/Vue-Diff/NO33.png" alt="NO33" title="NO33"> </p><p>那么前面的对比也需要增加遇到undefinded的情况调过的步骤。</p><h6 id="添加新元素-1"><a href="#添加新元素-1" class="headerlink" title="添加新元素"></a>添加新元素</h6><p><img src="/2020/01/17/2020/Vue-Diff/NO34.png" alt="NO34" title="NO34"> </p><p>用li-d 执行上述的步骤，执行不下去，li-b是新的节点</p><p>那是不是我们①②③④执行不下去的时候，将 li-d 挂载在最前面就可以了呢？<br>即挂载在oldStartIndex.el前面？</p><p>我们再来看一个例子</p><p><img src="/2020/01/17/2020/Vue-Diff/NO35.png" alt="NO35" title="NO35"> </p><p>大家模拟一下：自由思考</p><p>刷</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">刷</span><br></pre></td></tr></table></figure><ul><li>②中找到可复用的节点，同时因为是最后，所以DOM不移动，patch即可</li></ul><p><strong>下一步</strong></p><p><img src="/2020/01/17/2020/Vue-Diff/NO36.png" alt="NO36" title="NO36"> </p><ul><li>②中找到可复用节点，同时DOM也不需要移动，patch即可</li></ul><p><strong>下一步</strong><br><img src="/2020/01/17/2020/Vue-Diff/NO37.png" alt="NO37" title="NO37"> </p><ul><li>②中可复用，依旧处理<br><img src="/2020/01/17/2020/Vue-Diff/NO38.png" alt="NO38" title="NO38"> </li></ul><p>所以我们发现 li-d 并没有被处理到<br>所以我们需要增加多一个判断，oldEndIndex 小于 oldStartIndex的话，就存在没有被处理到的全新节点</p><p><strong>我们需要把这些全新的节点挂载在oldStartIndex前面</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="comment">// 省略...&#125;</span></span><br><span class="line">  * * * * * * * * 这 * * * * * * </span><br><span class="line">  <span class="keyword">if</span> (oldEndIdx &lt; oldStartIdx) &#123;</span><br><span class="line">      <span class="comment">// 添加新节点</span></span><br><span class="line">      <span class="keyword">for</span> (let i = <span class="keyword">new</span><span class="type">StartIdx</span>; i &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>; i++) &#123;</span><br><span class="line">        mount(nextChildren[i], container, <span class="literal">false</span>, oldStartVNode.el)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="移除不存在的元素"><a href="#移除不存在的元素" class="headerlink" title="移除不存在的元素"></a>移除不存在的元素</h6><p>  <img src="/2020/01/17/2020/Vue-Diff/NO39.png" alt="NO39" title="NO39"> </p><p>  <strong>自由思考一下：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/01/17/2020/Vue-Diff/NO41.png" alt="NO41" title="NO41"> </p><ul><li>①中 patch 了 li-a</li></ul><p><strong>下一步</strong><br><img src="/2020/01/17/2020/Vue-Diff/NO42.png" alt="NO42" title="NO42"> </p><ul><li>②中 patch 了 li-c<br><img src="/2020/01/17/2020/Vue-Diff/NO43.png" alt="NO43" title="NO43"> </li></ul><p><strong>结束</strong></p><p>条件 newEndIndex &lt; newStartIndex 了<br>所以以此条件说明有元素被移除了</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="keyword">new</span><span class="type">StartIdx</span> &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>) &#123;</span><br><span class="line">  <span class="comment">// 省略...&#125;</span></span><br><span class="line">      <span class="keyword">if</span> (oldEndIdx &lt; oldStartIdx) &#123;</span><br><span class="line">      <span class="comment">// 添加新节点</span></span><br><span class="line">      <span class="keyword">for</span> (let i = <span class="keyword">new</span><span class="type">StartIdx</span>; i &lt;= <span class="keyword">new</span><span class="type">EndIdx</span>; i++) &#123;</span><br><span class="line">        mount(nextChildren[i], container, <span class="literal">false</span>, oldStartVNode.el)</span><br><span class="line">      &#125;&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">EndIdx</span> &lt; <span class="keyword">new</span><span class="type">StartIdx</span>) &#123;</span><br><span class="line">      <span class="comment">// 移除操作</span></span><br><span class="line">      <span class="keyword">for</span> (let i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;</span><br><span class="line">        container.removeChild(prevChildren[i].el)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型链</title>
      <link href="/2019/12/15/2019/JS%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/12/15/2019/JS%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>👉：<a href="https://segmentfault.com/a/1190000021232132" target="_blank" rel="noopener">原文</a></p><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="/2019/12/15/2019/JS原型链/NO1.png" alt="NO1" title="NO1"></p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><a id="more"></a><p>prototype属性可以看成是一块特殊的存储空间，存储了供“徒弟”、“徒孙”们使用的方法和属性。</p><p><img src="/2019/12/15/2019/JS原型链/NO2.png" alt="NO2" title="NO2"></p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h4><p><strong>proto</strong>属性相当于通往prototype（“琅琊福地”）唯一的路（指针）<br>让“徒弟”、“徒孙” 们找到自己“师父”、“师父的师父” 提供给自己的方法和属性。</p><p><img src="/2019/12/15/2019/JS原型链/NO3.png" alt="NO3" title="NO3"></p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>constructor属性是让“徒弟”、“徒孙” 们知道是谁创造了自己，这里可不是“师父”啊。<br>而是自己的父母，父母创造了自己，父母又是由上一辈人创造的，……追溯到头就是Function() </p><p><img src="/2019/12/15/2019/JS原型链/NO4.png" alt="NO4" title="NO4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑eCharts参数</title>
      <link href="/2019/11/01/2019/%E8%B8%A9%E5%9D%91eCharts%E5%8F%82%E6%95%B0/"/>
      <url>/2019/11/01/2019/%E8%B8%A9%E5%9D%91eCharts%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/11/01/2019/踩坑eCharts参数/NO0.png" alt="NO0" title="NO0"></p><p>在echarts中，当对其中的option参数有所使用的时候，第二个参数是用于判断是否合并旧参数数据。<br>如果为true，则将完全替代，而不会在界面上出现“部分更新”的效果<br>如果为false，则是迭代进入新参数，会出现即使设置了新数据option，还会保留有 部分旧数据的情况。</p><p>搞得我整了好一会不知道为啥数据没响应，也是自己蠢🤣</p>]]></content>
      
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/2019/10/17/2019/this%E6%8C%87%E5%90%91/"/>
      <url>/2019/10/17/2019/this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h4 id="一图解"><a href="#一图解" class="headerlink" title="一图解"></a>一图解</h4><p><img src="/2019/10/17/2019/this指向/NO1.png" alt="NO1" title="NO1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas进行图像像素点着色</title>
      <link href="/2019/10/08/2019/canvas%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9D%80%E8%89%B2/"/>
      <url>/2019/10/08/2019/canvas%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9D%80%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="一、canvas的处理小技巧"><a href="#一、canvas的处理小技巧" class="headerlink" title="一、canvas的处理小技巧"></a>一、canvas的处理小技巧</h4><p>在保障的业务监控里，遇到这么一个难题，需要在场馆保障的同时，对现场的采集的指标进行不同门限预警进行颜色区分…，并且画出来</p><p>这可…<br><img src="/2019/10/08/2019/canvas进行图像像素点着色/NO0.png" alt="NO0" title="NO0"></p><p>UI给了如下两张图片：</p><h6 id="图一："><a href="#图一：" class="headerlink" title="图一："></a>图一：</h6><p><img src="/2019/10/08/2019/canvas进行图像像素点着色/NO1.png" alt="NO1" title="NO1"><br><a id="more"></a></p><h6 id="图二："><a href="#图二：" class="headerlink" title="图二："></a>图二：</h6><p><img src="/2019/10/08/2019/canvas进行图像像素点着色/NO2.png" alt="NO2" title="NO2"><br>需要去合成如下第三张实时指标着色图：</p><h6 id="图三："><a href="#图三：" class="headerlink" title="图三："></a>图三：</h6><p><img src="/2019/10/08/2019/canvas进行图像像素点着色/NO3.png" alt="NO3" title="NO3"></p><p>那么该如何做呢？</p><p>有需要需要根据数据的ID，去判断不同的指标值所带来的颜色，如何给这么一个椭圆形附上颜色呢？</p><p>和UI商量之后，给出了图二这么一个关键信息。<br><strong>能看出有什么奥秘吗?</strong></p><p>我们先来思考一下如何匹配上各个ID，用于给每个区块附上颜色。</p><p>我们拥有一批有ID的数据 <strong>-&gt;</strong> 需要能识别到图上所对应的位置 <strong>-&gt;</strong> 相应位置应该有能标识的关键信息 <strong>-&gt;</strong> 如何为图片打上关键信息</p><p>因此canvas就出场了。</p><p>canvas的关键属性方法：<br><strong>getImageData()</strong> ，可以识别到指定范围的颜色值出来，因此，我们借用这个就可以做到</p><p>没错，图二 是UI分别对各个区块填充的有规律颜色<br>分别只对R，G，B进行了颜色填充<br>由内到外，对图一的座位进行了标出<br>内圈一二层分别由R1排至R64，也就是<br>rgba(1,0,0,1)、rgba(2,0,0,1)…</p><p>因此我们在通过<br><strong>let imgData = ctx1.getImageData(0, 0, FDW, FDH);</strong></p><p>读取到的imgData中，我们就可以通过识别相应的R数组，知道该位置点是哪个ID属性的，并且找寻到相应ID的颜色值，为该点附上，依次类推，就可以建立一个<strong>颜色-ID-图片</strong>的关系出来</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let r = imgData<span class="meta">.data</span>[i], g = imgData<span class="meta">.data</span>[i + <span class="number">1</span>], <span class="keyword">b </span>= imgData<span class="meta">.data</span>[i + <span class="number">2</span>], a = imgData<span class="meta">.data</span>[i + <span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">if(a !== <span class="number">0</span> &amp;&amp; (r!==<span class="number">0</span> <span class="title">||</span> g!== <span class="number">0</span> <span class="title">||</span> <span class="keyword">b!== </span><span class="number">0</span>)) &#123;</span><br><span class="line">    DealColorData2(imgData, ObjData, r, g, <span class="keyword">b, </span>a, i)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/08/2019/canvas进行图像像素点着色/GIF.gif" alt="NO4" title="NO4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个失焦指令的学习</title>
      <link href="/2019/09/26/2019/%E4%B8%80%E4%B8%AA%E5%A4%B1%E7%84%A6%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/26/2019/%E4%B8%80%E4%B8%AA%E5%A4%B1%E7%84%A6%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h4><p>前情，山西项目中由于选择等条件增多，于是抽离出来一个简单的单选多选组件。样式的话，普通极了，也没与完全按照最初UI给的设置稿。当然这是另外的话。<br>遇到的其中一个问题就是:<br>我希望可以有失焦时得回弹，首先就是我想到得是利用指令进行初始加载时候对各组件实例绑定上这么个事件逻辑。<br>于是我写下了这么一串代码：<br><a id="more"></a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bind: <span class="function">(<span class="params">el, event, vM</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _that = vM.context;</span><br><span class="line">    <span class="keyword">const</span> aimdomArr = [<span class="string">'Moretext_'</span>, <span class="string">'MoreTextcontent_'</span>, <span class="string">'MoreTextTriDown_'</span>, <span class="string">'MoreTextTriUp_'</span>, <span class="string">'MoreSelcontent_'</span>,</span><br><span class="line">        <span class="string">'MoreSelUnit_'</span>, <span class="string">'SelUnitIcon_ SelUnitUnCho'</span>, <span class="string">'SelUnitText'</span>, <span class="string">'SelUnitIcon_ SelUnitCho'</span>,</span><br><span class="line">        <span class="string">'Singletext_'</span>, <span class="string">'SingleTextcontent_'</span>, <span class="string">'SingleTextTriDown_'</span>, <span class="string">'SingleTextTriUp_'</span>, <span class="string">'SingleSelcontent_'</span>, </span><br><span class="line">        <span class="string">'SingleSelUnit_'</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">document</span>.body.onclick = <span class="function">(<span class="params">(<span class="params">e</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> TARGETName = e.target.className;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> judgeclick = aimdomArr.indexOf(<span class="params">TARGETName</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span>(<span class="params">judgeclick === -1</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            _that.isclickMore = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">            _that.isclickSingle = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>);</span></span><br><span class="line"><span class="function"> &#125;</span></span><br></pre></td></tr></table></figure><p>我得初衷是记录下组件得this，然后在监听发生在body上得点击事件，如若不是发生在相关得class类上得，则可以进行判断到。<br>但是，实际上绑定得this（_that）并不会一直是正确得那个，在bing得外层并没有响应得作用域，我们打印一下_taht是什么。</p><p><img src="/2019/09/26/2019/一个失焦指令的学习/NO1.png" alt="NO1" title="NO1"></p><p>以及触发事件时得that</p><p><img src="/2019/09/26/2019/一个失焦指令的学习/NO2.png" alt="NO2" title="NO2"></p><p>都在每一次组件实例绑定时把_that不断刷新成最新得那个了<br>那这时候应该怎么解决呢？<br>（什么, 大声🔈）<br>闭包。</p><p>在后来我想到可以看看element是如何实现相关逻辑得呢？于是就找一找element对于el-select的封装。<br><em>element-dev\packages\select\index.js</em><br>我们可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-select"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[selectSize ? 'el-select--' + selectSize : '']"</span></span><br><span class="line">    <span class="meta">@click</span>.stop=<span class="string">"toggleMenu"</span></span><br><span class="line">    v-clickoutside=<span class="string">"handleClose"</span>&gt;</span><br></pre></td></tr></table></figure><p>也以指令得形式 <strong>clickoutside</strong>对这个逻辑进行封装以备复用<br><em>element-dev\src\utils\clickoutside.js</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bind(el, </span><span class="keyword">binding, </span>vnode) &#123;</span><br><span class="line">    nodeList.push(el)<span class="comment">;</span></span><br><span class="line">    const id = seed++<span class="comment">;</span></span><br><span class="line">    el[ctx] = &#123;</span><br><span class="line">      id,</span><br><span class="line"><span class="symbol">      documentHandler:</span> createDocumentHandler(el, <span class="keyword">binding, </span>vnode),</span><br><span class="line"><span class="symbol">      methodName:</span> <span class="keyword">binding.expression,</span></span><br><span class="line"><span class="keyword"> </span>     <span class="keyword">bindingFn: </span><span class="keyword">binding.value</span></span><br><span class="line"><span class="keyword"> </span>   &#125;<span class="comment">;</span></span><br><span class="line">&#125;,</span><br><span class="line">nodeList.forEach(node =&gt; node[ctx].documentHandler(e, startClick))<span class="comment">;</span></span><br><span class="line">if (<span class="keyword">binding.expression </span>&amp;&amp; el[ctx].methodName &amp;&amp; vnode.context[el[ctx].methodName]) &#123; </span><br><span class="line">    vnode.context[el[ctx].methodName]()<span class="comment">; </span></span><br><span class="line">&#125; else &#123;</span><br><span class="line">    el[ctx].<span class="keyword">bindingFn </span>&amp;&amp; el[ctx].<span class="keyword">bindingFn();</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/26/2019/一个失焦指令的学习/NO3.png" alt="NO3" title="NO3"><br><img src="/2019/09/26/2019/一个失焦指令的学习/GIF.gif" alt="GIF" title="GIF"></p><h4 id="Vue指令的编写"><a href="#Vue指令的编写" class="headerlink" title="Vue指令的编写"></a>Vue指令的编写</h4><p>我们顺便回顾一下对于Vue指令的指导吧。</p><h5 id="注册全局指令"><a href="#注册全局指令" class="headerlink" title="注册全局指令"></a>注册全局指令</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="注册局部指令"><a href="#注册局部指令" class="headerlink" title="注册局部指令"></a>注册局部指令</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">directives</span>: &#123;</span><br><span class="line">  <span class="attribute">focus</span>: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.<span class="built_in">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指令接收的钩子函数"><a href="#指令接收的钩子函数" class="headerlink" title="指令接收的钩子函数"></a>指令接收的钩子函数</h5><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li><li>unbind：只调用一次，指令与元素解绑时调用。</li></ul><h5 id="钩子函数接收的参数"><a href="#钩子函数接收的参数" class="headerlink" title="钩子函数接收的参数"></a>钩子函数接收的参数</h5><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象，包含以下 property:<pre><code>name：指令名，不包括 v- 前缀。value：指令的绑定值，例如：v-my-directive=&quot;1 + 1&quot; 中，绑定值为 2。oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。expression：字符串形式的指令表达式。例如 v-my-directive=&quot;1 + 1&quot; 中，表达式为 &quot;1 + 1&quot;。arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &quot;foo&quot;。modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</code></pre></li></ul><p><strong>举例说明</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"hook-arguments-example"</span> v-demo:foo<span class="selector-class">.a</span><span class="selector-class">.b</span>=<span class="string">"message"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'demo'</span>, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    <span class="selector-tag">var</span> s = JSON.stringify</span><br><span class="line">    el<span class="selector-class">.innerHTML</span> =</span><br><span class="line">      <span class="string">'name: '</span>       + s(binding.name) + <span class="string">'&lt;br&gt;'</span> +  <span class="comment">// demo</span></span><br><span class="line">      <span class="string">'value: '</span>      + s(binding.value) + <span class="string">'&lt;br&gt;'</span> + <span class="comment">// message的值</span></span><br><span class="line">      <span class="string">'expression: '</span> + s(binding.expression) + <span class="string">'&lt;br&gt;'</span> + <span class="comment">// 表达式，即message</span></span><br><span class="line">      <span class="string">'argument: '</span>   + s(binding.arg) + <span class="string">'&lt;br&gt;'</span> + <span class="comment">// 指令的传参，即foo</span></span><br><span class="line">      <span class="string">'modifiers: '</span>  + s(binding.modifiers) + <span class="string">'&lt;br&gt;'</span> <span class="comment">// 修饰对象，即a: true, b: true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然，如果有需要自定义传参，foo也是可以修改为动态参数的。</p><h6 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h6><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-mydirective:<span class="string">[argument]</span>=<span class="string">"value"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业了</title>
      <link href="/2019/06/27/2019/%E6%AF%95%E4%B8%9A%E4%BA%86/"/>
      <url>/2019/06/27/2019/%E6%AF%95%E4%B8%9A%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h5 id="毕业了"><a href="#毕业了" class="headerlink" title="毕业了"></a>毕业了</h5><p>诸多不舍，学生时代多好😔</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局的基本属性介绍</title>
      <link href="/2019/05/13/2019/Flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/05/13/2019/Flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="flex的布局定义："><a href="#flex的布局定义：" class="headerlink" title="flex的布局定义："></a>flex的布局定义：</h4><ul><li>display： flex；</li></ul><p>有所区分出，主轴（main-axis）与交叉轴(cross-axis)</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071004.png" alt="1" title="1"></p><a id="more"></a><h4 id="容器（父元素）有以下六个属性"><a href="#容器（父元素）有以下六个属性" class="headerlink" title="容器（父元素）有以下六个属性"></a>容器（父元素）有以下六个属性</h4><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h5><p>（row/row-reverse/column/column-reverse）</p><ul><li>row : 主轴水平，起点左端</li><li>row-reverse : 主轴水平，起点右端</li><li>column : 主轴垂直，起点上端</li><li>column-reverse : 主轴垂直，起点下端</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071005.png" alt="2" title="2"></p><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><p>(nowrap/wrap/wrap-reverse)</p><ul><li>wrap : 当主轴排列不下时，换行</li><li>nowrap : 不换行</li><li>wrap-reverse : 换行，但转向的</li></ul><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><p>(flex-flow是flex-direction与flex-wrap的简写形式)</p><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><p>： 定义了项目在主轴上的对齐方式<br>(flex-start/ flex-end/ center/ space-between/ space-around)</p><ul><li>flex-start : 主轴开始方向对齐</li><li>flex-end : 主轴结束方向对齐</li><li>center : 主轴方向居中</li><li>space-between : 两端对齐，项目间隙相等</li><li>space-around : 项目两侧间隔相等，间隔是与边框的两倍</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071010.png" alt="3" title="3"></p><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h5><p>：定义了 <strong>每行</strong> 项目的在侧轴方向上的对齐方式</p><ul><li>flex-start : 侧轴开始方向对齐</li><li>flex-end : 侧轴结束方向对齐</li><li>center ： 侧轴居中对齐</li><li>baseline ：项目每一行文字的几线对齐</li><li>stretch : 项目高度为auto时，占满整个容器</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071011.png" alt="4" title="4"></p><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h5><p>： 定义了容器在侧轴方向上有额外空间时，如何排布每一行</p><ul><li>felx-start : 侧轴开始方向对齐</li><li>felx-end : 侧轴结束方向对齐</li><li>center : 侧轴中心对齐</li><li>space-between ： 与侧轴两端对齐，每行轴线间隔平均</li><li>space-around : 每根轴线两侧间隔相等</li><li>stretch : 占满整个侧轴</li></ul><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071012.png" alt="5" title="5"></p><h4 id="项目（子元素）有以下六个属性"><a href="#项目（子元素）有以下六个属性" class="headerlink" title="项目（子元素）有以下六个属性"></a>项目（子元素）有以下六个属性</h4><h5 id="order"><a href="#order" class="headerlink" title="order"></a>order</h5><p>：定义了项目的排列顺序，数值越小排列越靠前，默认为0</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071013.png" alt="6" title="6"></p><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h5><p>：定义了属性项目的放大比例；<br>默认为0，即使有剩余空间，也不放大；<br>如果所有都为1，他们将等分剩余空间；<br>如果有一个为2，其他为1时，前者占据后者两倍的项目空间；</p><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h5><p>：定义了项目的缩小比例，若项目空间不足时，项目将缩小<br>如果所有都为1，空间不足时，都将等比例缩小；<br>如果有一个为0，其他为1时，前者空间不缩小，后者等比例均分缩小</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071015.jpg" alt="7" title="7"></p><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><p>：定义了在分配多余空间；在分配多余空间之前，项目所占据的主轴空间，根据这个属性，计算主轴是否还有多余空间<br>可以定义和width和height属性一样的值。</p><h5 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h5><p>：flex是flex-grow、flex-shrink、flex-basis的缩写</p><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><p>：定义允许单个项目与其他项目有不一样的侧轴对齐方式，可覆盖align-item</p><p><img src="/2019/05/13/2019/Flex布局的基本属性介绍/bg2015071016.png" alt="8" title="8"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(三</title>
      <link href="/2019/04/09/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%89/"/>
      <url>/2019/04/09/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="vinyl-fs部分"><a href="#vinyl-fs部分" class="headerlink" title="vinyl-fs部分"></a>vinyl-fs部分</h1><p>当我们进入vinyl-fs的根目录index.js下，我们可以看到vinyl-fs所实现的src、dest接口是被分属于了几个外部模块 =&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们来看一下各自所属的文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 文件的处理上</span></span><br><span class="line">  src: <span class="built_in">require</span>(<span class="string">'./lib/src'</span>),</span><br><span class="line">  dest: <span class="built_in">require</span>(<span class="string">'./lib/dest'</span>),</span><br><span class="line">  symlink: <span class="built_in">require</span>(<span class="string">'./lib/symlink'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="一、glob"><a href="#一、glob" class="headerlink" title="一、glob"></a>一、glob</h2><p>在进入相应的模块方法分析之前，我们先来看一下什么是glob；</p><p>node的glob是指允许你使用一些正则表达式，用于匹配对应规则的文件，</p><a id="more"></a><p>类似于我们通常在gulp打包配置中所写的一样：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'./lib/images/*'</span>, <span class="string">'./lib/images/*/*'</span>])</span><br></pre></td></tr></table></figure></p><p>而这其中即是我们的glob模式，也是如此我们可以匹配我们相应的传入文件。</p><p><strong>接下来，我们将陆续的来看一下</strong>src<strong> 、 </strong>dest<strong> 的具体实现。</strong></p><h2 id="二、src"><a href="#二、src" class="headerlink" title="二、src"></a>二、src</h2><p>我们进入 ./lib/src/index.js 中查看相应的入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gs = <span class="built_in">require</span>(<span class="string">'glob-stream'</span>);</span><br><span class="line"><span class="comment">// 结合流的阵列成使用单个双工流泵和duplexify</span></span><br><span class="line"><span class="comment">// 如果其中一个流关闭/错误，管道中的所有流都将被销毁。</span></span><br><span class="line"><span class="keyword">var</span> pumpify = <span class="built_in">require</span>(<span class="string">'pumpify'</span>);</span><br><span class="line"><span class="comment">// 在transformStream中包装ReadableStream</span></span><br><span class="line"><span class="keyword">var</span> toThrough = <span class="built_in">require</span>(<span class="string">'to-through'</span>);</span><br><span class="line"><span class="keyword">var</span> isValidGlob = <span class="built_in">require</span>(<span class="string">'is-valid-glob'</span>);</span><br><span class="line"><span class="keyword">var</span> createResolver = <span class="built_in">require</span>(<span class="string">'resolve-options'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下各导入模块可以进入相应文件中查看注释分析</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./options'</span>);</span><br><span class="line"><span class="keyword">var</span> prepare = <span class="built_in">require</span>(<span class="string">'./prepare'</span>);</span><br><span class="line"><span class="keyword">var</span> wrapVinyl = <span class="built_in">require</span>(<span class="string">'./wrap-vinyl'</span>);</span><br><span class="line"><span class="keyword">var</span> sourcemap = <span class="built_in">require</span>(<span class="string">'./sourcemap'</span>);</span><br><span class="line"><span class="keyword">var</span> readContents = <span class="built_in">require</span>(<span class="string">'./read-contents'</span>);</span><br><span class="line"><span class="keyword">var</span> resolveSymlinks = <span class="built_in">require</span>(<span class="string">'./resolve-symlinks'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">src</span>(<span class="params">glob, opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处进行默认的配置与传入的配置进行解析配置，详情可见vintl-fs-Test\createResolverTest.js</span></span><br><span class="line">  <span class="comment">// 类似合并默认配置项与用户传入配置项</span></span><br><span class="line">  <span class="keyword">var</span> optResolver = createResolver(config, opt);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有效的glob(简化的正则表达式)</span></span><br><span class="line">  <span class="keyword">if</span> (!isValidGlob(glob)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid glob argument: '</span> + glob);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> streams = [</span><br><span class="line">    <span class="comment">// 使用了glob-stream模块，传入一个(简化的正则表达式)做为第一个参数，opt对象作为第二个参数，</span></span><br><span class="line">    <span class="comment">// 返回创建glob流</span></span><br><span class="line">    gs(glob, opt),</span><br><span class="line">    <span class="comment">// 传入上述的解析配置，创建一个vinly文件对象</span></span><br><span class="line">    wrapVinyl(optResolver),</span><br><span class="line">    <span class="comment">// glob的stat为symlink的情况下，转为硬链接</span></span><br><span class="line">    resolveSymlinks(optResolver),</span><br><span class="line">    <span class="comment">// 进行文件stat以及与optResolver配置选项上进行时间的比较</span></span><br><span class="line">    prepare(optResolver),</span><br><span class="line">    <span class="comment">// 对流进行操作，获取文件内容，写入file.content属性</span></span><br><span class="line">    <span class="comment">// 预设为Buffer是通过readBuffer获取</span></span><br><span class="line">    <span class="comment">// 否则则通过readStream获取</span></span><br><span class="line">    readContents(optResolver),</span><br><span class="line">    <span class="comment">// 对文件的映射，是否开启 sourcemap</span></span><br><span class="line">    sourcemap(optResolver),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    一步步的加工成streams</span></span><br><span class="line"><span class="comment">    传于pumpify</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> outputStream = pumpify.obj(streams);</span><br><span class="line">  <span class="comment">// 返回outputStream作为参数的toThrough流</span></span><br><span class="line">  <span class="keyword">return</span> toThrough(outputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = src;</span><br></pre></td></tr></table></figure><p>至此，简单的将即是我们的gulp.src便是使用于将匹配的文件转换为流的形式进而通过各项处理</p><p><strong>接下来，让我们看一下dest中对stream的处理</strong></p><h2 id="三、dest"><a href="#三、dest" class="headerlink" title="三、dest"></a>三、dest</h2><p>我们依旧进入相应的 ./lib/dest/index.js 中查看其入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dest主要作用是根据src接口接收透过来的输出流，并生成文件于指定文件夹</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 将流信息转为</span></span><br><span class="line"><span class="keyword">var</span> lead = <span class="built_in">require</span>(<span class="string">'lead'</span>);</span><br><span class="line"><span class="comment">// 结合流的阵列成使用单个双工流泵和duplexify</span></span><br><span class="line"><span class="comment">// 如果其中一个流关闭/错误，管道中的所有流都将被销毁。</span></span><br><span class="line"><span class="keyword">var</span> pumpify = <span class="built_in">require</span>(<span class="string">'pumpify'</span>);</span><br><span class="line"><span class="comment">// 在写入文件前确认目标文件夹存在</span></span><br><span class="line"><span class="keyword">var</span> mkdirpStream = <span class="built_in">require</span>(<span class="string">'fs-mkdirp-stream'</span>);</span><br><span class="line"><span class="comment">// 配置选项的解析</span></span><br><span class="line"><span class="keyword">var</span> createResolver = <span class="built_in">require</span>(<span class="string">'resolve-options'</span>);</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./options'</span>);</span><br><span class="line"><span class="comment">// 用于比较</span></span><br><span class="line"><span class="keyword">var</span> prepare = <span class="built_in">require</span>(<span class="string">'./prepare'</span>);</span><br><span class="line"><span class="comment">// 生成sourcemap</span></span><br><span class="line"><span class="keyword">var</span> sourcemap = <span class="built_in">require</span>(<span class="string">'./sourcemap'</span>);</span><br><span class="line"><span class="keyword">var</span> writeContents = <span class="built_in">require</span>(<span class="string">'./write-contents'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folderConfig = &#123;</span><br><span class="line">  outFolder: &#123;</span><br><span class="line">    type: <span class="string">'string'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dest</span>(<span class="params">outFolder, opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果目标outFolder为空---&gt;报错</span></span><br><span class="line">  <span class="keyword">if</span> (!outFolder) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid dest() folder argument.'</span> +</span><br><span class="line">      <span class="string">' Please specify a non-empty string or a function.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 配置与用户传入配置的解析</span></span><br><span class="line">  <span class="keyword">var</span> optResolver = createResolver(config, opt);</span><br><span class="line">  <span class="comment">// 文件路径的配置解析---地址</span></span><br><span class="line">  <span class="keyword">var</span> folderResolver = createResolver(folderConfig, &#123; <span class="attr">outFolder</span>: outFolder &#125;);</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dirpath</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dirMode = optResolver.resolve(<span class="string">'dirMode'</span>, file);</span><br><span class="line"></span><br><span class="line">    callback(<span class="literal">null</span>, file.dirname, dirMode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 流</span></span><br><span class="line">  <span class="keyword">var</span> saveStream = pumpify.obj(</span><br><span class="line">    <span class="comment">// 提取以及校验流信息</span></span><br><span class="line">    prepare(folderResolver, optResolver),</span><br><span class="line">    <span class="comment">// 生成sourcemap地图</span></span><br><span class="line">    sourcemap(optResolver),</span><br><span class="line">    <span class="comment">// 传入解析dirMode的以下方法，...</span></span><br><span class="line">    mkdirpStream.obj(dirpath),</span><br><span class="line">    <span class="comment">// 想合后的相应配置传入writeContents，然后写入相应文件</span></span><br><span class="line">    writeContents(optResolver)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sink the output stream to start flowing</span></span><br><span class="line">  <span class="comment">// 流沉淀为文件</span></span><br><span class="line">  <span class="keyword">return</span> lead(saveStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = dest;</span><br></pre></td></tr></table></figure><p>依据着相应的模块指示，我们也可以大致的清楚了gulp进行打包操作的流程</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(二</title>
      <link href="/2019/04/06/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
      <url>/2019/04/06/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="undertaker模块文件分析"><a href="#undertaker模块文件分析" class="headerlink" title="undertaker模块文件分析"></a>undertaker模块文件分析</h2><p>我们从上一篇的入口文件分析可以得知，<strong>Gulp</strong>进行task、series、parallel等任务时，所执行的方法入口其实来源于<em>undertaker</em>模块</p><p>因此我们也进入相应的<em>undertaker</em>模块一探究竟</p><h2 id="一、undertaker-index-js"><a href="#一、undertaker-index-js" class="headerlink" title="一、undertaker-index.js"></a>一、undertaker-index.js</h2><a id="more"></a><p>undertaker模块下的index.js方法 =&gt;</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node工具函数中的继承</span></span><br><span class="line"><span class="keyword">var</span> inherits = <span class="keyword">require</span>(<span class="string">'util'</span>).inherits;</span><br><span class="line"><span class="comment">// Node中的事件触发器</span></span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="keyword">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultRegistry = <span class="keyword">require</span>(<span class="string">'undertaker-registry'</span>);</span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">require</span>(<span class="string">'./lib/tree'</span>);</span><br><span class="line"><span class="keyword">var</span> task = <span class="keyword">require</span>(<span class="string">'./lib/task'</span>);</span><br><span class="line"><span class="keyword">var</span> series = <span class="keyword">require</span>(<span class="string">'./lib/series'</span>);</span><br><span class="line"><span class="keyword">var</span> lastRun = <span class="keyword">require</span>(<span class="string">'./lib/last-run'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">parallel</span> = <span class="keyword">require</span>(<span class="string">'./lib/parallel'</span>);</span><br><span class="line"><span class="keyword">var</span> registry = <span class="keyword">require</span>(<span class="string">'./lib/registry'</span>);</span><br><span class="line"><span class="keyword">var</span> _getTask = <span class="keyword">require</span>(<span class="string">'./lib/get-task'</span>);</span><br><span class="line"><span class="keyword">var</span> _setTask = <span class="keyword">require</span>(<span class="string">'./lib/set-task'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">inherits(Undertaker, EventEmitter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后继续看一下其他模块方法的具体作用</span></span><br><span class="line">Undertaker.prototype.tree = tree;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.task = task;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.series = series;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.lastRun = lastRun;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.parallel = parallel;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.registry = registry;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._getTask = _getTask;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._setTask = _setTask;</span><br></pre></td></tr></table></figure><p>依旧采用核心工具函数的inherits方法进行构造函数的继承</p><p>inherits(Undertaker, EventEmitter); 此处使得<strong>Undertake</strong>r构造函数继承自<strong>Node</strong>核心模块<strong>EventEmitter</strong> 的原型链上方法，以及将EventEmitter的构造函数绑定在Undertaker构造函数的<strong>super_</strong>上。</p><p>并且将我们在开始部分所require进来的方法函数添加至原始链prototype上，以便调用</p><font color="ffff00"><em>接下来我们来看一下其中还有一个主方法，当中又实现了什么呢 =&gt; ?</em></font><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Undertaker</span><span class="params">(customRegistry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  我们来看一下DefaultRegistry(undertaker-registry)都干了什么</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">this</span>._registry = <span class="keyword">new</span> DefaultRegistry();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 允许用户自定义的寄存器任务</span></span><br><span class="line">  <span class="keyword">if</span> (customRegistry) &#123;</span><br><span class="line">    <span class="keyword">this</span>.registry(customRegistry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// process.env =&gt; 包含对用户环境信息的 对象</span></span><br><span class="line">  <span class="keyword">this</span>._settle = (process.env.UNDERTAKER_SETTLE === <span class="string">'true'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventEmitter.call(this); 将EventEmitter执行函数的this绑定</p><p>this._registry = new DefaultRegistry(); new了一个DefaultRegistry的实例赋予this._registry属性</p><p>// 后两句我们稍后处理</p><p><em>DefaultRegistry</em>来源于<em>undertaker-registry</em></p><p>好的，那让我们现在来看一下，<strong>undertaker-registry</strong> 都将干些什么事。</p><h2 id="二、undertaker-registry-index-js"><a href="#二、undertaker-registry-index-js" class="headerlink" title="二、undertaker-registry - index.js"></a>二、undertaker-registry - index.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 提供了形如get、set的接口,充当寄存器的作用存放着那些任务队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultRegistry</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> DefaultRegistry === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultRegistry();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._tasks = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可能是初始化的作用</span></span><br><span class="line">DefaultRegistry.prototype.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">taker</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上边的_tasks对象中去key=name的那个</span></span><br><span class="line">DefaultRegistry.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._tasks[name];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set的时候,针对传入的name作为key,存放相应的处理方法fn</span></span><br><span class="line">DefaultRegistry.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._tasks[name] = fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DefaultRegistry.prototype.tasks = <span class="function"><span class="keyword">function</span> <span class="title">tasks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 接收一个函数作为累加器-&gt;扩展-&gt;reduce()的用法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>._tasks).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tasks, name</span>) </span>&#123;</span><br><span class="line">    tasks[name] = self.get(name);</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="comment">// &#123;&#125;将作为tasks的初始值-&gt;也就是=&gt; 相当于令一开始的  tasks=&#123;&#125;,  最终返回</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = DefaultRegistry;</span><br></pre></td></tr></table></figure><p>undertaker-registry方法，增加在其构造函数中创建一个空对象_tasks = {}</p><p>并且在其原型链上提供了四个方法</p><ul><li>init</li><li>get</li><li>set</li><li>tasks</li></ul><p>也就是定义了一个内部属性_registry作为寄存器<strong>注册/寄存器模式的实现，提供统一接口来存储和读取 tasks</strong></p><h3 id="回到undertaker-index-js"><a href="#回到undertaker-index-js" class="headerlink" title="回到undertaker-index.js"></a>回到undertaker-index.js</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许用户自定义的寄存器任务</span></span><br><span class="line">  <span class="keyword">if</span> <span class="comment">(customRegistry)</span> &#123;</span><br><span class="line">    this.registry<span class="comment">(customRegistry)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接下来的这一句：</p><p>是根据前部引入的来实现的，那么它具体实现了什么功能呢？<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var registry</span> = require(<span class="string">'./lib/registry'</span>);</span><br></pre></td></tr></table></figure></p><p>我们接下来看一下 =&gt; </p><h2 id="三、-lib-registry"><a href="#三、-lib-registry" class="headerlink" title="三、 ./lib/registry"></a>三、 ./lib/registry</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTasks</span></span>(inst, task, name) &#123;</span><br><span class="line">  inst.<span class="keyword">set</span>(name, task);</span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registry</span></span>(<span class="keyword">new</span><span class="type">Registry</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span><span class="type">Registry</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._registry;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//验证是否有效，主要判断是否带有 .get/.set/.tasks/.init 接口，若不符合则抛出错误</span></span><br><span class="line">  validateRegistry(<span class="keyword">new</span><span class="type">Registry</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tasks = <span class="built_in">this</span>._registry.tasks();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将现有 tasks 拷贝到新的寄存器上</span></span><br><span class="line">  <span class="built_in">this</span>._registry = reduce(tasks, setTasks, <span class="keyword">new</span><span class="type">Registry</span>);</span><br><span class="line">  <span class="comment">//调用初始化接口（无论是否需要，寄存器务必带有一个init接口）</span></span><br><span class="line">  <span class="built_in">this</span>._registry.init(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = registry;</span><br></pre></td></tr></table></figure><p>至此，将来逐步分析其余各任务方法模块的作用</p><p>其中包括</p><p>Undertaker.prototype.tree = tree; </p><p>Undertaker.prototype.task = task; </p><p>Undertaker.prototype.series = series;</p><p>Undertaker.prototype.lastRun = lastRun;</p><p>Undertaker.prototype.parallel = parallel;</p><p>Undertaker.prototype.registry = registry;</p><p>Undertaker.prototype._getTask = _getTask;</p><p>Undertaker.prototype._setTask = _setTask;</p><p>将按以下顺序进行 =&gt; </p><p><strong>/lib/set-task</strong></p><p><strong>/lib/get-task</strong></p><p><strong>/lib/last-run</strong></p><p><strong>/lib/task</strong></p><p><strong>/lib/tree</strong></p><p><strong>/lib/series</strong></p><p><strong>/lib/parallel</strong></p><h2 id="四、-lib-set-task"><a href="#四、-lib-set-task" class="headerlink" title="四、./lib/set-task"></a>四、./lib/set-task</h2><p>set-task</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var WM = require('es6-weak-map');</span></span><br><span class="line"><span class="comment">var metadata = new WM();</span></span><br><span class="line"><span class="comment">=&gt;ES6中的WeakMap新类型,在其中引用的对象不计入垃圾回收机制,例如书中讲可用于存放一些DOM相关对象</span></span><br><span class="line"><span class="comment">=&gt;此处为什么用WeakMap不用Map,可能是方便任务执行结束,有效清理内存</span></span><br><span class="line"><span class="comment">提供get、set等方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set方法采用了map(WeakMap)的数据类型进行存放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露了一个set方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其中对task第一个参数的name进行类型判断=&gt;错误则报</span></span><br><span class="line">  assert(name, <span class="string">'Task name must be specified'</span>);</span><br><span class="line">  assert(<span class="keyword">typeof</span> name === <span class="string">'string'</span>, <span class="string">'Task name must be a string'</span>);</span><br><span class="line">  assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">'Task function must be specified'</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 绑定this, 在this中使用参数 fn 对象的方法以及参数</span></span><br><span class="line">  <span class="comment">// 因为WeakMap中要求的key对象不能被引用过</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">taskWrapper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个新包装this后的函数</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unwrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回原本的fn函数方法</span></span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将name、fn包装</span></span><br><span class="line">  taskWrapper.unwrap = unwrap;</span><br><span class="line">  taskWrapper.displayName = name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`taskWrapper： <span class="subst">$&#123;taskWrapper&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn) || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`meta: <span class="subst">$&#123;meta&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nodes = [];</span><br><span class="line">  <span class="keyword">if</span> (meta.branch) &#123;</span><br><span class="line">    nodes.push(meta.tree);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> task = <span class="keyword">this</span>._registry.set(name, taskWrapper) || taskWrapper;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`task: <span class="subst">$&#123;task&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存入WeakMap对象</span></span><br><span class="line">  metadata.set(task, &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    orig: fn,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: name,</span><br><span class="line">      type: <span class="string">'task'</span>,</span><br><span class="line">      nodes: nodes,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印一下输出是什么 =&gt; </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`metadata: <span class="subst">$&#123;metadata.get(task)&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><h2 id="五、-lib-get-task"><a href="#五、-lib-get-task" class="headerlink" title="五、./lib/get-task"></a>五、./lib/get-task</h2><p>get-task方法模块代码很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也就是对undertaker-registry中的get方法提取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从_registry寄存器中get</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._registry.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">get</span>;</span><br></pre></td></tr></table></figure><h2 id="六、-lib-last-run"><a href="#六、-lib-last-run" class="headerlink" title="六、./lib/last-run"></a>六、./lib/last-run</h2><p>用来记录和获取针对某个方法的执行前/后时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// npm中其介绍的功能为,记录函数的时间点 =&gt; 对metadata对象的属性一顿操作</span></span><br><span class="line"><span class="keyword">var</span> retrieveLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastRun</span>(<span class="params">task, timeResolution</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (timeResolution == <span class="literal">null</span>) &#123;</span><br><span class="line">    timeResolution = process.env.UNDERTAKER_TIME_RESOLUTION;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn = task;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> task === <span class="string">'string'</span>) &#123;</span><br><span class="line">    fn = <span class="keyword">this</span>._getTask(task);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (meta) &#123;</span><br><span class="line">    fn = meta.orig || fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> retrieveLastRun(fn, timeResolution);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = lastRun;</span><br></pre></td></tr></table></figure><h2 id="七、-lib-tree"><a href="#七、-lib-tree" class="headerlink" title="七、./lib/tree"></a>七、./lib/tree</h2><p>通过遍历metadata，获取当前注册过的所有任务的metadata</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var defaults = <span class="built_in">require</span>(<span class="string">'object.defaults'</span>);</span><br><span class="line">var map = <span class="built_in">require</span>(<span class="string">'collection-map'</span>);</span><br><span class="line"></span><br><span class="line">var metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line">// 可用于获取当前注册过的所有任务的metadata-WeakMap</span><br><span class="line">// 也就是说,可以获取到当前我们定义了那些任务,对应方法,任务间依赖等关系</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree</span><span class="params">(opts)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  // 此方法会覆盖判断是否存在opts,并覆盖其中的&#123;deep: <span class="literal">false</span>&#125;</span><br><span class="line">  opts = defaults(opts || &#123;&#125;, &#123;</span><br><span class="line">    deep: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 获取寄存器中的tasks</span><br><span class="line">  var tasks = this._registry.tasks();</span><br><span class="line">  </span><br><span class="line">  // 遍历tasks并且返回WeakMap(metadata)的“任务数组” </span><br><span class="line">  var nodes = map(tasks, <span class="function"><span class="keyword">function</span><span class="params">(task)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    var meta = metadata.get(task);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.deep) &#123;</span><br><span class="line">      <span class="keyword">return</span> meta.tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> meta.tree.label;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    label: <span class="string">'Tasks'</span>,</span><br><span class="line">    nodes: nodes,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">var undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line">ut = new undertaker();</span><br><span class="line"></span><br><span class="line">ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'A'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'B'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'C'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'D'</span>); cb()&#125;);</span><br><span class="line">ut.task(<span class="string">'taskE'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span></span>&#123;console.<span class="built_in">log</span>(<span class="string">'E'</span>); cb()&#125;);</span><br><span class="line"></span><br><span class="line">ut.task(<span class="string">'taskC'</span>, ut.series(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>));</span><br><span class="line">ut.task(<span class="string">'taskE'</span>, ut.parallel(<span class="string">'taskC'</span>, <span class="string">'taskD'</span>));</span><br><span class="line"></span><br><span class="line">var tree = ut.tree();</span><br><span class="line">console.<span class="built_in">log</span>(tree);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="八、-lib-task"><a href="#八、-lib-task" class="headerlink" title="八、./lib/task"></a>八、./lib/task</h2><p>使用举例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css_comm'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'1.css'</span>,<span class="string">'2.css'</span>])</span><br><span class="line">      .pipe(<span class="built_in">concat</span>(<span class="string">'common.css'</span>))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./build/css'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处 if判断 写法为处理“新”打包写法</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  function uglify()&#123;</span></span><br><span class="line"><span class="comment">    return gulp.src(['src/*.js'])</span></span><br><span class="line"><span class="comment">        .pipe(uglify())</span></span><br><span class="line"><span class="comment">        .pipe(gulp.dest('dist'));</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  gulp.task(uglify);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'function'</span>) &#123;</span><br><span class="line">    fn = name;</span><br><span class="line">    name = fn.displayName || fn.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当第二个参数为为空不存在时，即是对相应任务的获取----配合上一段  if 一起看</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    gulp.task('css_comm', function() &#123;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._getTask(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调整好关系,再次存入task</span></span><br><span class="line">  <span class="keyword">this</span>._setTask(name, fn);</span><br><span class="line">  <span class="comment">// console.log(`name: $&#123;name&#125;, fn: $&#123;fn&#125;`)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*此两处的_getTask和_setTask=&gt;可以看一下,类似于一开始DefaultRegistry中对tasks中</span></span><br><span class="line"><span class="comment">    任务的操作(get\set)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = task;</span><br></pre></td></tr></table></figure><h2 id="九、-lib-parallel"><a href="#九、-lib-parallel" class="headerlink" title="九、./lib/parallel"></a>九、./lib/parallel</h2><p>this.parallel的使用 =&gt;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line">ut = new undertaker();</span><br><span class="line"></span><br><span class="line">  ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// taskD 需要在 <span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span> 执行完毕后才开始执行，</span><br><span class="line">// 其中 <span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span> 的执行是异步的</span><br><span class="line">ut.task(<span class="string">'taskD'</span>, ut.parallel(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span>));</span><br></pre></td></tr></table></figure><p><strong>那让我们来看一下parallel中分别实现了些什么吧！</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bach = <span class="built_in">require</span>(<span class="string">'bach'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="built_in">require</span>(<span class="string">'./helpers/buildTree'</span>);</span><br><span class="line"><span class="keyword">var</span> normalizeArgs = <span class="built_in">require</span>(<span class="string">'./helpers/normalizeArgs'</span>);</span><br><span class="line"><span class="keyword">var</span> createExtensions = <span class="built_in">require</span>(<span class="string">'./helpers/createExtensions'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> create = <span class="keyword">this</span>._settle ? bach.settleParallel : bach.parallel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据“任务”数组从寄存器中获取展开的任务数组</span></span><br><span class="line">  <span class="keyword">var</span> args = normalizeArgs(<span class="keyword">this</span>._registry, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 为对象扩展新“”对象</span></span><br><span class="line">  <span class="keyword">var</span> extensions = createExtensions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 将参数与扩展的对象(after,before,create,error)做关联</span></span><br><span class="line">  <span class="comment">// 所以我们来看一下它具体实现了些什么 =&gt; </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// bach.settleParallel+</span></span><br><span class="line">  </span><br><span class="line">  (args, extensions) : bach.parallel(args, extensions)</span><br><span class="line">  <span class="keyword">var</span> fn = create(args, extensions);</span><br><span class="line"></span><br><span class="line">  fn.displayName = <span class="string">'&lt;parallel&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  metadata.set(fn, &#123;</span><br><span class="line">    name: fn.displayName,</span><br><span class="line">    branch: <span class="literal">true</span>,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: fn.displayName,</span><br><span class="line">      type: <span class="string">'function'</span>,</span><br><span class="line">      branch: <span class="literal">true</span>,</span><br><span class="line">      nodes: buildTree(args),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = parallel;</span><br></pre></td></tr></table></figure><p>让我们从上到下的分析一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据“任务”数组从寄存器中获取展开的任务数组</span></span><br><span class="line"><span class="keyword">var</span> args = normalizeArgs(<span class="keyword">this</span>._registry, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><p><strong>normalizeArgs</strong> 方法是来源于模块 <strong>./helpers/normalizeArgs</strong></p><p>那让我们转向来看一下此模块</p><h3 id="九-1-、normalizeArgs"><a href="#九-1-、normalizeArgs" class="headerlink" title="九(1)、normalizeArgs"></a>九(1)、normalizeArgs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nODE的断言测试</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于Array.map()的改进版本=&gt;最终返回的也是数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:npm中的讲解</span></span><br><span class="line"><span class="comment">map(['a', 'b', 'c'], function(ele, i) &#123;</span></span><br><span class="line"><span class="comment">  return i + ele;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">//=&gt; ['0a', '1b', '2c']</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">require</span>(<span class="string">'arr-map'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组展开为平面数组,解除嵌套</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flatten(['a', ['b', ['c']], 'd', ['e']]);</span></span><br><span class="line"><span class="comment">//=&gt; ['a', 'b', 'c', 'd', 'e']*/</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="built_in">require</span>(<span class="string">'arr-flatten'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到寄存器以及相应的“任务数组”</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeArgs</span>(<span class="params">registry, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传递入一个一个的“任务”方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFunction</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// task类型判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> task === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从我们寄存器中找到有没有这个key的function,因为存在旧的写法----不知是否有理解错</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    gulp.task('uglify', function()&#123;</span></span><br><span class="line"><span class="comment">        return gulp.src(['src/*.js'])</span></span><br><span class="line"><span class="comment">            .pipe(uglify())</span></span><br><span class="line"><span class="comment">            .pipe(gulp.dest('dist'));</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    gulp.task('default', ['uglify']);</span></span><br><span class="line"><span class="comment">    =&gt;上面的一开始给registry传入的是一个uglify的key</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> fn = registry.get(task);</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    assert(fn, <span class="string">'Task never defined: '</span> + task);</span><br><span class="line">    <span class="comment">// 回</span></span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// “任务数组”展开</span></span><br><span class="line">  <span class="keyword">var</span> flattenArgs = flatten(args);</span><br><span class="line">  <span class="comment">// 根据长度,判断是否写空了</span></span><br><span class="line">  assert(flattenArgs.length, <span class="string">'One or more tasks should be combined using series or parallel'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对“任务数组”的任务进行方法的遍历</span></span><br><span class="line">  <span class="keyword">return</span> map(flattenArgs, getFunction);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = normalizeArgs;</span><br></pre></td></tr></table></figure><p>//通过参数获取存在寄存器（registry）中的 taskFunctions（数组形式）<br>var args = normalizeArgs(this._registry, arguments);</p><p><strong>接下来我们继续阅读下一句：</strong><br>var extensions = createExtensions(this);</p><p>而<strong>createExtensions</strong>是来源于模块<strong>helpers/createExtensions</strong></p><p>那么我们看一下其中实现了什么 = ?</p><h3 id="九-2-、createExtensions"><a href="#九-2-、createExtensions" class="headerlink" title="九(2)、createExtensions"></a>九(2)、createExtensions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用某函数,并记录捕获当前时间戳或者传入时间戳</span></span><br><span class="line"><span class="keyword">var</span> captureLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>).capture;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个function并删除最后一次运行时时间戳</span></span><br><span class="line"><span class="keyword">var</span> releaseLastRun = <span class="built_in">require</span>(<span class="string">'last-run'</span>).release;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./metadata'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Storage</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.fn = meta.orig || fn;</span><br><span class="line">  <span class="keyword">this</span>.uid = uid++;</span><br><span class="line">  <span class="keyword">this</span>.name = meta.name;</span><br><span class="line">  <span class="keyword">this</span>.branch = meta.branch || <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.captureTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">this</span>.startHr = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Storage.prototype.capture = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  captureLastRun(<span class="keyword">this</span>.fn, <span class="keyword">this</span>.captureTime);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Storage.prototype.release = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  releaseLastRun(<span class="keyword">this</span>.fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createExtensions</span>(<span class="params">ee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用create时候,记录一下相关信息,并返回</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Storage(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span>(<span class="params">storage</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Node获取相对于过去某一刻的时间</span></span><br><span class="line">      storage.startHr = process.hrtime();</span><br><span class="line">      <span class="comment">// Node触发start事件,后面为参数</span></span><br><span class="line">      ee.emit(<span class="string">'start'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    after: <span class="function"><span class="keyword">function</span>(<span class="params">result, storage</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用时判断是否有错,有则爆</span></span><br><span class="line">      <span class="keyword">if</span> (result &amp;&amp; result.state === <span class="string">'error'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.error(result.value, storage);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录当前时间戳</span></span><br><span class="line">      storage.capture();</span><br><span class="line">      <span class="comment">// Node触发stop事件</span></span><br><span class="line">      ee.emit(<span class="string">'stop'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        duration: process.hrtime(storage.startHr),</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">error, storage</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(error)) &#123;</span><br><span class="line">        error = error[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 删除出错的此次执行时间戳</span></span><br><span class="line">      storage.release();</span><br><span class="line">      ee.emit(<span class="string">'error'</span>, &#123;</span><br><span class="line">        uid: storage.uid,</span><br><span class="line">        name: storage.name,</span><br><span class="line">        branch: storage.branch,</span><br><span class="line">        error: error,</span><br><span class="line">        duration: process.hrtime(storage.startHr),</span><br><span class="line">        time: <span class="built_in">Date</span>.now(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createExtensions;</span><br></pre></td></tr></table></figure><p>此方法扩展，为变量新增拥有<strong>create</strong>、<strong>before</strong>、<strong>after</strong>、<strong>error</strong>等方法的一个对象</p><p>最终期望将扩展出来的对象与我们的“任务”task关联</p><p><strong>接着我们来看下一句:</strong></p><p>var fn = create(args, extensions);</p><p>create =&gt; var create = this._settle ? bach.settleParallel : bach.parallel;</p><p><strong>bach</strong>模块来源于<strong>bach</strong></p><p>接下来我们再来看一下bach模块实现了些什么 =&gt; ?</p><h3 id="九-3-、bach"><a href="#九-3-、bach" class="headerlink" title="九(3)、bach"></a>九(3)、bach</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  series: <span class="built_in">require</span>(<span class="string">'./lib/series'</span>),</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'./lib/parallel'</span>),</span><br><span class="line">  settleSeries: <span class="built_in">require</span>(<span class="string">'./lib/settleSeries'</span>),</span><br><span class="line">  settleParallel: <span class="built_in">require</span>(<span class="string">'./lib/settleParallel'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而我们所需要用的的parallel是来源于<strong>lib/parallel</strong></p><p>而<strong>lib/parallel</strong>具体代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组取值操作,取第一及最后一个</span></span><br><span class="line"><span class="keyword">var</span> initial = <span class="built_in">require</span>(<span class="string">'array-initial'</span>);</span><br><span class="line"><span class="keyword">var</span> last = <span class="built_in">require</span>(<span class="string">'array-last'</span>);</span><br><span class="line"><span class="comment">// 用于异步化函数</span></span><br><span class="line"><span class="keyword">var</span> asyncDone = <span class="built_in">require</span>(<span class="string">'async-done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowAndLater = <span class="built_in">require</span>(<span class="string">'now-and-later'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">fn, key, cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 那asyncDone又是做什么的呢 =&gt; ?</span></span><br><span class="line">  <span class="comment">// 传入一个方法与回调</span></span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildParallel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 校验传入参数(arguments的合法性)</span></span><br><span class="line">  <span class="keyword">var</span> args = helpers.verifyArguments(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取到最后一个参数,即传入时的extensions,然后执行此方法</span></span><br><span class="line">  <span class="comment">// 如果最后一个参数!==function则return 回</span></span><br><span class="line">  <span class="keyword">var</span> extensions = helpers.getExtensions(last(args));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (extensions) &#123;</span><br><span class="line">    <span class="comment">// 如果扩展对象存在,取第一个参数</span></span><br><span class="line">    args = initial(args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们具体来看一下nowAndLater.map做了什么 =&gt; </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    传入了四个值(args, function iterator(fn, key, cb) &#123;return asyncDone(fn, cb);&#125;, 扩展的对象, done)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">    <span class="comment">//遍历tasks数组，将其生命周期和extensions属性关联起来,且将每个task异步化，且并发执行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parallel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = buildParallel;</span><br></pre></td></tr></table></figure><p>这一段代码中所用的的重要方法函数有这些：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span><span class="params">(fn, key, cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*...省略*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先可以让我们来看一下<strong>async-Done</strong>分别做了什么 =&gt; ？</p><h3 id="九-4-async-Done"><a href="#九-4-async-Done" class="headerlink" title="九(4)async-Done"></a>九(4)async-Done</h3><p>它可以把一个普通函数（传入的第一个参数）异步化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1</span></span><br><span class="line"><span class="keyword">var</span> asyncDone = <span class="built_in">require</span>(<span class="string">'async-done'</span>);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---1--开始'</span>);</span><br><span class="line">    done(<span class="literal">null</span>, <span class="string">'测试AsyncDone---1--结束'</span>)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  成功执行第一个函数时，``error`将为null。</span></span><br><span class="line">  <span class="comment">//  `result`将是第一个函数的结果。</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---2--开始'</span>);</span><br><span class="line">    setTimeout( done.bind(<span class="keyword">this</span>, <span class="literal">null</span>, <span class="string">'测试AsyncDone---2--结束'</span>), <span class="number">1000</span> )</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncDone(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'测试AsyncDone---3--开始'</span>);</span><br><span class="line">    done(<span class="literal">null</span>, <span class="string">'测试AsyncDone---3--结束'</span>)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>执行的结果 :</strong></p><ul><li>测试AsyncDone—1–开始</li><li>测试AsyncDone—1–结束</li><li>测试AsyncDone—2–开始</li><li>测试AsyncDone—3–开始</li><li>测试AsyncDone—3–结束</li><li>测试AsyncDone—2–结束</li></ul><p>其中第一个参数方法中的done将会提醒第二个参数(callback)去执行相关回调</p><p><strong>接下来我们我们再来看一下parallel的重要部分 :</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">nowAndLater.map(args, iterator, extensions, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而nowAndLater的模块接口来源于<strong>now-and-later</strong></p><p>那我们再来看一下<strong>now-and-later</strong>实现了些什么呢?</p><h3 id="九-5-、now-and-later"><a href="#九-5-、now-and-later" class="headerlink" title="九(5)、now-and-later"></a>九(5)、now-and-later</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> once = <span class="built_in">require</span>(<span class="string">'once'</span>);</span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">values, iterator, extensions, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> extensions === <span class="string">'function'</span>) &#123;</span><br><span class="line">        done = extensions;</span><br><span class="line">        extensions = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> done !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        done = helpers.noop;  <span class="comment">//没有传入done则赋予一个空函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让 done 函数只执行一次</span></span><br><span class="line">    done = once(done);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(values);</span><br><span class="line">    <span class="keyword">var</span> length = keys.length;</span><br><span class="line">    <span class="keyword">var</span> count = length;</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个空的、和values等长的数组</span></span><br><span class="line">    <span class="keyword">var</span> results = helpers.initializeResults(values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * helpers.defaultExtensions(extensions) 返回如下对象：</span></span><br><span class="line"><span class="comment">     *  &#123;</span></span><br><span class="line"><span class="comment">            create: extensions.create || defaultExts.create,</span></span><br><span class="line"><span class="comment">            before: extensions.before || defaultExts.before,</span></span><br><span class="line"><span class="comment">            after: extensions.after || defaultExts.after,</span></span><br><span class="line"><span class="comment">            error: extensions.error || defaultExts.error,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> exts = helpers.defaultExtensions(extensions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; length; idx++) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = keys[idx];</span><br><span class="line">        next(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = values[key];</span><br><span class="line">        <span class="comment">//创建一个 Storage 实例</span></span><br><span class="line">        <span class="keyword">var</span> storage = exts.create(value, key) || &#123;&#125;;</span><br><span class="line">        <span class="comment">//触发'start'事件</span></span><br><span class="line">        exts.before(storage);</span><br><span class="line">        <span class="comment">//利用 async-done 将 taskFunction 转为异步方法并执行</span></span><br><span class="line">        iterator(value, once(handler));</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">//触发'error'事件</span></span><br><span class="line">                exts.error(err, storage);</span><br><span class="line">                <span class="keyword">return</span> done(err, results);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//触发'stop'事件</span></span><br><span class="line">            exts.after(result, storage);</span><br><span class="line">            results[key] = result;</span><br><span class="line">            <span class="keyword">if</span> (--count === <span class="number">0</span>) &#123;</span><br><span class="line">                done(err, results);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = map;</span><br></pre></td></tr></table></figure><p>在这段代码的 map 方法中，通过 for 循环遍历了每个传入 parallel 接口的 taskFunction，然后使用 iterator（async-done）将 taskFunction 异步化并执行（执行完毕会触发 hadler），并将 extensions 的各方法和 task 的生命周期关联起来（比如在任务开始时执行“start”事件、任务出错时执行“error”事件）。 ——[引用自vaoy博客说明]</p><h2 id="十、-lib-series"><a href="#十、-lib-series" class="headerlink" title="十、./lib/series"></a>十、./lib/series</h2><p>series接口的使用:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ut.task(<span class="string">'taskA'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskB'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">/*略*/</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// taskD 需要在 'taskA', 'taskB', 'taskC' 执行完毕后才开始执行，</span></span><br><span class="line"><span class="comment">// 其中 'taskA', 'taskB', 'taskC' 的执行必须是按顺序一个接一个的</span></span><br><span class="line">  ut.task(<span class="string">'taskD'</span>, ut.series(<span class="string">'taskA'</span>, <span class="string">'taskB'</span>, <span class="string">'taskC'</span>));</span><br></pre></td></tr></table></figure><p>其实现和parallel是基本一致的，但在series中使用的是nowAndlater的mapSeries接口</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span><span class="built_in">(key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">next</span><span class="built_in">(key</span>) &#123;</span><br><span class="line">        var <span class="keyword">value</span> = values<span class="built_in">[key</span>];</span><br><span class="line"></span><br><span class="line">        var storage = exts.create(<span class="keyword">value</span>,<span class="built_in"> key</span>) || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        exts.before(storage);</span><br><span class="line">        iterator(<span class="keyword">value</span>, once(handler));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> handler(err, result) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                exts<span class="built_in">.error</span>(err, storage);</span><br><span class="line">                <span class="keyword">return</span> done(err, results); //有任务出错，故所有任务应停止调用</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            exts.after(result, storage);</span><br><span class="line">            results<span class="built_in">[key</span>] = result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (++idx &gt;= length) &#123;</span><br><span class="line">                done(err, results); //全部任务已经结束了</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">next</span>(keys[idx]);  //<span class="keyword">next</span>不在是放在外面的循环里，而是在任务的回调里</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处在series接口中通过改动 next 的位置，可以很好地要求传入的任务必须一个接一个去执行（后一个任务在前一个任务执行完毕的回调里才会开始执行）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp源码分析学习(一</title>
      <link href="/2019/04/05/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
      <url>/2019/04/05/2019/Gulp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p align="center"><br>  <a href="https://gulpjs.com" target="_blank" rel="noopener"><br>    <img height="257" width="114" src="https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png"><br>  </a><br></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>目前工作会依赖于Gulp进行项目的构建打包，也为了可以有更深入的学习心得与收获。因此在此记录对于<em>Gulp</em>源码的阅读、及个人理解</p><p>在总结的markdown 与 <strong>个人博客</strong> 有相关系列文章，在此项目各文件夹的源码中也有相应的源码分析的注释</p><p><em>版本 </em><br><strong>gulp： ^4.0.0 版本为例</strong></p><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><a id="more"></a><p>源码相关：</p><ul><li><p>gulp主入口分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/gulp" target="_blank" rel="noopener">gulp-index.js</a></p></li><li><p>glob-watcher模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/glob-watcher" target="_blank" rel="noopener">glob-watcher-index.js</a></p></li><li><p>undertaker模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/undertaker" target="_blank" rel="noopener">undertaker-index.js</a></p></li><li><p>vinyl-fs模块分析—<a href="https://github.com/Jayantxu/gulp-source/tree/master/vinyl-fs" target="_blank" rel="noopener">vinyl-fs-index.js</a></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此篇分析有内容借鉴于前辈的gulp源码分析博客，深表感谢，在此说明：</p><p><a href="https://www.cnblogs.com/vajoy/p/6349817.html" target="_blank" rel="noopener">gulp源码解析 系列</a></p><p>同时也推荐一个收集丰富gulp资料的GH项目，作为学习之用：</p><p><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">use-gulp</a></p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>作者： JayantXu</p><p>邮箱： <a href="mailto:Jayant89@163.com" target="_blank" rel="noopener">Jayant89@163.com</a></p><p>个人博客： <a href="www.essssss.com">Jayantxu</a></p><p>Github(若对您有所帮助,感谢star)   - ：<a href="https://github.com/Jayantxu/gulp-source" target="_blank" rel="noopener">GitHub</a> </p><p>第一次写源码分析系列，若有不足之处请谅解，对任何内容有所疑问，欢迎联系我。</p><hr><h2 id="gulp-index-js的分析"><a href="#gulp-index-js的分析" class="headerlink" title="gulp-index.js的分析:"></a>gulp-index.js的分析:</h2><h2 id="gulp基本使用"><a href="#gulp基本使用" class="headerlink" title="gulp基本使用"></a>gulp基本使用</h2><p><a href="https://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">gulp-api介绍</a></p><h2 id="入口文件分析"><a href="#入口文件分析" class="headerlink" title="入口文件分析"></a>入口文件分析</h2><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>可以在本文件目录下寻找到index.js，接下来让我们看一下其中都有什么内容 =&gt;</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> util = require(<span class="string">'util'</span>); </span><br><span class="line"><span class="keyword">var</span> Undertaker = require(<span class="string">'undertaker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vfs = require(<span class="string">'vinyl-fs'</span>);<span class="keyword">var</span> watch = require(<span class="string">'glob-watcher'</span>);</span><br><span class="line"></span><br><span class="line">function Gulp() &#123;</span><br><span class="line">  Undertaker.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bind the functions for destructuring</span></span><br><span class="line">  <span class="keyword">this</span>.watch = <span class="keyword">this</span>.watch.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.task = <span class="keyword">this</span>.task.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.series = <span class="keyword">this</span>.series.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.parallel = <span class="keyword">this</span>.parallel.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.registry = <span class="keyword">this</span>.registry.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.tree = <span class="keyword">this</span>.tree.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastRun = <span class="keyword">this</span>.lastRun.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Gulp, Undertaker);</span><br><span class="line"></span><br><span class="line">Gulp.prototype.src = vfs.src;</span><br><span class="line">Gulp.prototype.dest = vfs.dest;</span><br><span class="line">Gulp.prototype.symlink = vfs.symlink;</span><br><span class="line">Gulp.prototype.watch = function(glob, opt, task) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let people use this class from our instance</span></span><br><span class="line">Gulp.prototype.Gulp = Gulp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inst = new Gulp();</span><br><span class="line">module.exports = inst;</span><br></pre></td></tr></table></figure><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>让我们由上到下的看一遍：</p><p>其中，声明了所需要加载的依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node内部util模块，是Node中一个核心的工具函数模块</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行任务管理有关的逻辑,---&gt; gulp.task()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vinyl-fs模块: src/dest/symlink</span></span><br><span class="line"><span class="keyword">var</span> vfs = <span class="built_in">require</span>(<span class="string">'vinyl-fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// npm中介绍为 ： 观察全局并在更改时执行功能，具有用于去抖动和排队的智能默认值。</span></span><br><span class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'glob-watcher'</span>);</span><br></pre></td></tr></table></figure><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>我们接下去看一下<strong>Gulp</strong>这个方法中实现了什么功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Gulp() &#123;</span><br><span class="line">  <span class="comment">// 转this,将Undertaker的方法绑定到this中</span></span><br><span class="line">  Undertaker.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定函数为解构</span></span><br><span class="line">  <span class="keyword">this</span>.watch = <span class="keyword">this</span>.watch.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.task = <span class="keyword">this</span>.task.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.series = <span class="keyword">this</span>.series.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.parallel = <span class="keyword">this</span>.parallel.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.registry = <span class="keyword">this</span>.registry.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.tree = <span class="keyword">this</span>.tree.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastRun = <span class="keyword">this</span>.lastRun.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在此看到我们所用到的gulp.task\gulp.series等方法都是来源于<font color="ff0000"><strong>undertaker</strong></font>这个模块</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承,(构造函数,父类构造函数)</span></span><br><span class="line"><span class="selector-tag">util</span><span class="selector-class">.inherits</span>(Gulp, Undertaker);</span><br></pre></td></tr></table></figure><p>util是Node中的核心工具函数模块，其中的inherits是实现继承的一种方法</p><p><a href="http://nodejs.cn/api/util.html#util_util_inherits_constructor_superconstructor" target="_blank" rel="noopener">Node-Api-util.inherits</a></p><p>其中传入的参数为(子类构造函数, 父类构造函数)</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.src = vfs.src;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.dest = vfs.dest;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.symlink = vfs.symlink;</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.watch = function(glob, opt, task) &#123;</span><br><span class="line">  // 省略些许代码<span class="comment">---后续涉及此部分将再提及</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// <span class="type">Let</span> people use this class from our instance</span><br><span class="line"><span class="type">Gulp</span>.proto<span class="keyword">type</span>.<span class="type">Gulp</span> = <span class="type">Gulp</span>;</span><br></pre></td></tr></table></figure><p>第五部分的代码既是将在Gulp的原型peototype上增加部分方法，且来源于<font color="ff0000"><strong>vinyl-fs</strong></font>这个模块</p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inst = <span class="keyword">new</span> Gulp();</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = inst;</span><br></pre></td></tr></table></figure><p>最后一块即是new一个Gulp的实例，并将其暴露出来供调用使用</p><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><p>由此</p><p>我们可以知道我们需要了解gulp的内部执行机制以及流程，我们需要关注于</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undertaker、</span><br><span class="line">vinyl-<span class="built_in">fs</span>、</span><br><span class="line">glob-watcher</span><br></pre></td></tr></table></figure><p>这三模块分别都将实现什么功能。</p><hr><h4 id="题外-gt"><a href="#题外-gt" class="headerlink" title="题外-&gt;"></a>题外-&gt;</h4><h5 id="util-inherits实现了什么？"><a href="#util-inherits实现了什么？" class="headerlink" title="util.inherits实现了什么？"></a>util.inherits实现了什么？</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'base'</span>; </span><br><span class="line">    <span class="keyword">this</span>.base = <span class="number">1991</span>; </span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125; </span><br><span class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sub'</span>; </span><br><span class="line">&#125; </span><br><span class="line">util.inherits(Sub, Base); </span><br><span class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base(); </span><br><span class="line">objBase.showName();  <span class="comment">// base</span></span><br><span class="line">objBase.sayHello(); <span class="comment">// Hello base</span></span><br><span class="line"><span class="built_in">console</span>.log(objBase);  <span class="comment">// Base()</span></span><br><span class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub(); </span><br><span class="line">objSub.showName();  <span class="comment">// sub</span></span><br><span class="line"><span class="comment">// objSub.sayHello();  // is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(objSub);</span><br></pre></td></tr></table></figure><p>在网上寻找的测试，inherits是通过将父类构造函数的原型链复制到子类的原型链上，进而实现的继承，因此我们也只能继承到相应原型链上的方法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">exports.inherits</span> <span class="string">=</span> <span class="string">function(ctor,</span> <span class="string">superCtor)</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">//</span> <span class="string">一些参数的合法性判断，略……</span></span><br><span class="line"></span><br><span class="line">  <span class="string">ctor.super_</span> <span class="string">=</span> <span class="string">superCtor;</span></span><br><span class="line">  <span class="string">ctor.prototype</span> <span class="string">=</span> <span class="string">Object.create(superCtor.prototype,</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    constructor:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">ctor,</span></span><br><span class="line"><span class="attr">      enumerable:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">      writable:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">      configurable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">同时继承的子类也可以通过super_访问到父类的构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">console.log(Sub.super_</span> <span class="string">===</span> <span class="string">Base)</span> <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> 源码 </tag>
            
            <tag> 2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node读取图片并转Base64</title>
      <link href="/2019/03/30/2019/Node%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E8%BD%ACBase64/"/>
      <url>/2019/03/30/2019/Node%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E8%BD%ACBase64/</url>
      
        <content type="html"><![CDATA[<p>Node作为后端开发时，可以采用读取图片文件，并转为base64编码，使得前端得到展示</p><p>运用到的模块分别有<strong>fs</strong>、<strong>path</strong>、<strong>mime-types</strong></p><p>mime-type需要额外安装，可于项目根目录运行：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="keyword">save</span> mime-<span class="keyword">type</span></span><br></pre></td></tr></table></figure></p><p>并且考虑到后续的读取转化的需要，可将方法使用promise异步，并且在数量不定时可以使用<em>promise.all()</em>进行异步等待</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> mineType = <span class="built_in">require</span>(<span class="string">'mime-types'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  base64img: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base64imgpromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result</span><br><span class="line">      <span class="comment">// 判断传入路径是否为空，空即不存在</span></span><br><span class="line">      <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        resolve(result)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 转换路径</span></span><br><span class="line">      file = path.join(__dirname, <span class="string">'../'</span>, file)</span><br><span class="line">      <span class="keyword">let</span> filePath = path.resolve(file)</span><br><span class="line">      fs.readFile(path.resolve(filePath), <span class="string">'base64'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err + <span class="string">'读取错误'</span>)</span><br><span class="line">          result = &#123;</span><br><span class="line">            code: <span class="string">'1'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            msg: <span class="string">'服务器出错'</span></span><br><span class="line">          &#125;</span><br><span class="line">          reject(result)</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="string">'data:'</span> + mineType.lookup(filePath) + <span class="string">';base64,'</span> + data</span><br><span class="line">        resolve(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> base64imgpromise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当最终我们得到了base64编码的图片后，既可以发送回前端，对img标签的src进行绑定base64，从而在前端页面展示</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid布局</title>
      <link href="/2019/03/26/2019/Grid%E5%B8%83%E5%B1%80/"/>
      <url>/2019/03/26/2019/Grid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>昨天看见阮大神的博客更新Grid布局的相关知识总结，学习相关的知识点</p><font><strong>原文链接：</strong></font> <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰-Grid布局</a><br><a id="more"></a><br><br><font><strong>个人练习小demo：</strong></font><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">网格Grid布局</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网格Grid布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span>: <span class="selector-tag">grid</span>;<span class="comment">/*行内的grid布局*/</span></span></span><br><span class="line"><span class="undefined">grid-template-columns: 100px 100px 100px;</span></span><br><span class="line"><span class="undefined">grid-template-rows: 100px 100px 100px;</span></span><br><span class="line"><span class="undefined">grid-column-gap: 10px;</span></span><br><span class="line"><span class="undefined">grid-row-gap: 10px;</span></span><br><span class="line"><span class="undefined">justify-content: center;</span></span><br><span class="line"><span class="css"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row</span>;<span class="comment">/*布局基准，按行还是列*/</span></span></span><br><span class="line"><span class="undefined">/* grid-template-areas:'header header header'</span></span><br><span class="line"><span class="undefined">'main main aside'</span></span><br><span class="line"><span class="undefined">'footer footer footer'; */</span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="css"><span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span> 设置单元格内容的垂直位置;</span></span><br><span class="line"><span class="undefined">justify-items: 设置单元格内容的水平位置;</span></span><br><span class="line"><span class="undefined">place-items: 合并简写了上述两个;</span></span><br><span class="line"><span class="xml">place-items: <span class="tag">&lt;<span class="name">align-items</span>&gt;</span> <span class="tag">&lt;<span class="name">justify-items</span>&gt;</span>; </span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined">/* </span></span><br><span class="line"><span class="undefined">align-content: 设置整个内容区域在grid容器里的垂直位置;</span></span><br><span class="line"><span class="undefined">justify-content: 设置整个内容区域在grid容器里的水平位置;</span></span><br><span class="line"><span class="undefined">place-content: 合并前两者; */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-a</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: pink;</span></span><br><span class="line"><span class="css"><span class="comment">/*从第几条网格线开始，到第几条网格线结束*/</span></span></span><br><span class="line"><span class="undefined">grid-column-start: 1;</span></span><br><span class="line"><span class="css"><span class="comment">/*左边框的起始线*/</span></span></span><br><span class="line"><span class="undefined">grid-column-end: 3;</span></span><br><span class="line"><span class="css"><span class="comment">/* 右边框的结束线 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* 同理有上下：grid-row-start; grid-row-end */</span></span></span><br><span class="line"><span class="undefined">/* justify-self: 设置单元格内容的水平位置;与justice-items作用一致,但只控制单个项目;</span></span><br><span class="line"><span class="undefined">align-self: 设置单元格内容的垂直位置;与align-items作用一致,但只控制单个项目;</span></span><br><span class="line"><span class="undefined">place-self: 前两者的合并写法; */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-b</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-c</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="css"><span class="comment">/*缩写版：从第几条开始，到第几条结束*/</span></span></span><br><span class="line"><span class="undefined">grid-row: 2/4;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-d</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: yellow;</span></span><br><span class="line"><span class="undefined">grid-column: 2/4;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-e</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: black;</span></span><br><span class="line"><span class="undefined">color: white;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item-f</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: grey;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-a"</span>&gt;</span>item-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-b"</span>&gt;</span>item-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-c"</span>&gt;</span>item-c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-d"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-e"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-f"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/03/26/2019/Grid布局/Grid布局.png" alt="Grid布局" title="Grid布局"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻止冒泡、默认事件</title>
      <link href="/2019/03/03/2019/%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E3%80%81%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/03/03/2019/%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E3%80%81%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>取消冒泡：</p><p>w3c的方法是e.stopPropagation，IE为e.cancelBubble = true<br>window.event ? window.event.cancelBubble = true : e.stopPropagation</p><p>取消默认：</p><p>w3c的方法是e.prcentDefault()，IE为e.returnValue = false<br>return false;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(e &amp;&amp; e.stopPropagation) &#123;</span></span><br><span class="line"><span class="undefined">      e.stopPropagation();</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(e &amp;&amp; e.prventDefault) &#123;</span></span><br><span class="line"><span class="undefined">      e.prventDefault();</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS清除浮动的几种方式</title>
      <link href="/2019/03/03/2019/CSS%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2019/03/03/2019/CSS%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>2019-3-3更新<br><a id="more"></a></p><font color="#ff0000"><strong>浮动效果重现</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;!-- 浮动效果 --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"parent"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>图：<br><img src="/2019/03/03/2019/CSS清除浮动/浮动重现.png" alt="浮动重现" title="浮动重现"></p><font color="#ff0000"><strong>清除浮动的方式1 clear:both</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*清除浮动方式1 clear:both*/</span></span><br><span class="line"><span class="selector-class">.parent1</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">1000px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child1</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear1</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 清除浮动的方式<span class="number">1</span>,使用额外标签<span class="attribute">clear</span>:both --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"parent1"</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"child1"</span>&gt; child&lt;/div&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=<span class="string">"clear1"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>图：</p><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><font color="#ff0000"><strong>清除浮动的方式2 overflow: hidden</strong></font><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/* 清除浮动方式2,overflow*/</span><br><span class="line">.parent2 &#123;</span><br><span class="line">padding:10px;</span><br><span class="line">width:1000px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">margin-top: 50px;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">.child2 &#123;</span><br><span class="line">float: left;</span><br><span class="line">margin-right: 10px;</span><br><span class="line">width: 50px;</span><br><span class="line">height: 50px;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 清除浮动方式2,使用overflow属性,定义了overflow后，浏览器会自动检查浮动区域高度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child2"</span>&gt;</span> child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 不能和position配合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>图：</p><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><font color="#ff0000"><strong>清除浮动的方式3 定义父元素伪类after清除浮动</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动方式3,:after*/</span></span><br><span class="line"><span class="selector-class">.parent3</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent3</span>:after &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child3</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用伪元素清除浮动:after --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"parent3"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"child3"</span>&gt; child&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/03/2019/CSS清除浮动/解决浮动的方式1.png" alt="解决浮动的方式1" title="解决浮动的方式1"></p><hr><p>2019-2-2</p><p>经常在各种前端面试题中出现，今天就将原本CSDN博客上总结的清除浮动的方式再次回顾并且搬运过来</p><font color="ff0000"><strong>1</strong></font><p>定义伪类清除<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfloat</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>2</strong></font><p>定义空div进行clear<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfloat</span> &#123; </span><br><span class="line">  <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>3</strong></font><p>为父元素设置高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="ff0000"><strong>4</strong></font><p>为父元素设置overflow:hidden</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden&#125;</span><br></pre></td></tr></table></figure><font color="ff0000"><strong>5</strong></font><p>父元素一并浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000080</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>margin重叠以及解决办法</title>
      <link href="/2019/03/01/2019/margin%E9%87%8D%E5%8F%A0%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/01/2019/margin%E9%87%8D%E5%8F%A0%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>先重现一遍两个块级元素在上下margin方向的重叠现象<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 重现浮动 --&gt;</span><br><span class="line"><span class="comment">/* 重现浮动*/</span></span><br><span class="line"><span class="selector-class">.contain</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first"</span>&gt;first &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"second"</span>&gt;second  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重现.png" alt="margin重现" title="margin重现"></p><p>此处我们可以看到，当第一个(first)拥有的margin-bottom：20px;与第二个(second)div块所拥有的margin-top:20px;叠加在了一块</p><p>而我们根据BFC（块级格式化上下文）我们可以在必要时候有效避免这种现象对于我们布局的影响<br>而我们创建BFC的条件有以下几种情况：</p><ul><li>float不是none，使该元素浮动起来</li><li>position的值不是static或者relative</li><li>display的值是inline-block，table-cell， flex，table-caption， inline-flex</li><li>overflow不是visible</li></ul><p>BFC的特征：</p><ul><li>所有子元素包括浮动元素，与容器左边对齐</li><li>属于同一个BFC的父元素与子元素，相邻的<strong>父子</strong>或者<strong>兄弟</strong>间的margin垂直方向会重叠，<strong>若两个元素属于不同BFC</strong>，则垂直方向上不重叠</li><li>可以撑开容器（若子元素是float，则父元素设置overflow：hidden，父元素就形成一个BFC</li></ul><p>因此我们实践尝试如何使用形成BFC解决margin重叠所带来的影响</p><font color="#ff0000"><strong>一</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除margin方式1*/</span></span><br><span class="line"><span class="selector-class">.contain1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 清除，<span class="attribute">margin</span>重叠方式<span class="number">1</span> 通过新增父元素，形成一个新的BFC块 --&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain1"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first1"</span>&gt; first <span class="number">1</span>&lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> style=<span class="string">"overflow:hidden;"</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"second1"</span>&gt; second1&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重叠解决方式1.png" alt="margin重叠解决方式1" title="margin重叠解决方式1"></p><p>我们为second块元素，新增一个父元素，并且设置其overflow，成功使得first1与second1分别归属不同的BFC块，从而结局margin重叠问题。</p><font color="#ff0000"><strong>二</strong></font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除margin方式2*/</span></span><br><span class="line"><span class="selector-class">.contain2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 清除<span class="attribute">margin</span>重叠方式<span class="number">2</span>，子元素浮动 :相邻的子元素都浮动，或者下面的那个浮动--&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"contain2"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"first2"</span>&gt; first <span class="number">2</span>&lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"second2"</span> style=<span class="string">"float: left;"</span>&gt; second <span class="number">2</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们使得相邻兄弟元素浮动的形式，满足float不等于none，从而使得second2形成一个新的BFC块，而解决margin重叠的问题</p><p>效果：<br><img src="/2019/03/01/2019/margin重叠以及解决办法/margin重叠解决方式2.png" alt="margin重叠解决方式2" title="margin重叠解决方式2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS省略号实现</title>
      <link href="/2019/03/01/2019/CSS%E7%9C%81%E7%95%A5%E5%8F%B7%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/01/2019/CSS%E7%9C%81%E7%95%A5%E5%8F%B7%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<font><strong>一</strong></font><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"contain"</span>&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain-1"</span>&gt;很多很多很多很多很多很多很多文字[要有固定宽度]&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain-2"</span>&gt;</span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">        [<span class="meta">此设定不适合多行文本</span>]</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain-1</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain-2</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>:white-space;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以关注text-overflow：ellipsis；属性，此属性针对单行文本的末尾显示省略号</p><p>如图：<br><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现1.png," alt="CSS省略号实现1.png" title="CSS省略号实现1.png"></p><font><strong>二</strong></font><p>当目标浏览器内核是webkit、或移动端为主时，可采用针对webkit的私有属性<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-webkit-box-orient:vertical;</span><br><span class="line">-webkit-line-clamp:<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"contain1"</span>&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain1-1"</span>&gt;很多很多很多很多很多很多很多文字&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"contain1-2"</span>&gt;</span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">        [<span class="meta">有适用范围,仅适用于webkit浏览器及移动端</span>]</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain1-1</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain1-2</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可针对webkit内核的浏览器以及移动端浏览器进行省略号布局</p><p>如图:<br><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现2.png," alt="CSS省略号实现2.png" title="CSS省略号实现2.png"></p><font><strong>三</strong></font><p>使用伪元素问题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contain2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">        多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本[利用伪元素,适用性广,在文字未超行的情况下也会出现省略号]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain2</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/*需要额外注意line-height和max-height需要时line-height的整数倍,否则会造成超出文字显示一半的情况,另外如果没有这两个元素,视觉上会有“无论什么情况都带省略号的情况”*/</span></span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain2</span> <span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"..."</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to right,transparent,grey 55%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图:</p><p><img src="/2019/03/01/2019/CSS省略号实现/CSS省略号实现3.png," alt="CSS省略号实现2.png" title="CSS省略号实现2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp增量编译优化</title>
      <link href="/2019/02/21/2019/Gulp%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/"/>
      <url>/2019/02/21/2019/Gulp%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>总结18年12月Gulp增量编译优化</p><p>实习时候，有一天，照常进行开发的时候，在等待项目运行gulp构建命令之后，等待着构建的完成…</p><p>这时候导师看了一眼，说：“是不是觉得很慢咧，能优化一下就好了”。</p><p>是呀，每次十几秒的等待，真的是很漫长的咧</p><a id="more"></a><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译3.png" alt="gulp增量编译3.png" title="gulp增量编译3.png"></p><p>也就是这样一句话，我想闲下来的时间可以试一试嘛，反正近期需求也不会太过忙碌，而且Gulp相关的命令也不算多，也就是如此，开始了Gulp的重新复习。</p><p><strong><font color="ff0000">开始啦~</font></strong></p><p>先分析了项目的gulpfile.js构建过程</p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译1.png" alt="gulp增量编译1" title="gulp增量编译1"></p><p>可以看到项目原先进行了gulp.task的控制，并将依次进行arrTask中的任务</p><p>而在’clean_build’中，gulp将会清空build打包后的文件，这是不行的，因为我们建立起来的增量编译逻辑是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们需要与未做改变的文件进行比较，然后判断我们是否修改了该文件，如果是，则将进行该文件的处理，如果不是，那我们就不需要处理该文件，这样便可以省去很多重复处理的时间</span><br></pre></td></tr></table></figure></p><p>接下来我们抽出一段公共代码分析与查看其构建原理</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css_comm'</span>, function() &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'1.css'</span>,<span class="string">'2.min.css'</span>,<span class="string">'3.css'</span>,<span class="string">'4.css'</span>])</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">'5.css'</span>)) <span class="comment">// 合并common.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev())    <span class="comment">// 加MD5后缀</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(cleanCss())   <span class="comment">//压缩css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./build/css'</span>)) <span class="comment">// 压缩完</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev.manifest())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./rev/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看完代码，那时候就想嚯，要是我们初步在每一次合并，<font color="ff0000"><strong>未加MD戳</strong></font>之前，以及<font color="ff0000"><strong>未经压缩</strong></font>等操作前对上一次的构建文件进行比较，那么我们就可以抉择出是否继续对该文件进行构建，这样就可以达到我们自动识别构建的目的了。</p><p>因此新建了一个beforebuild文件夹作为中转文件夹用于压缩，加戳之前进行的比较作用</p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译4.png" alt="gulp增量编译4" title="gulp增量编译4"></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译5.png" alt="gulp增量编译5" title="gulp增量编译5"></p><p>于是寻找相应是否有实现此比较功能的gulp包，在npm上找到一个<font color="ff0000"><strong>gulp-changed</strong></font><br>其用法如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">其中的hasChanged可以根据下列三项做比较</span><br><span class="line">changed.compareLastModifiedTime</span><br><span class="line">changed.compareContents</span><br><span class="line">changed<span class="selector-class">.compareSha1Digest</span> (Deprecated)</span><br><span class="line"></span><br><span class="line">可以对内容，最后修改时间等方式对文件作比较，从而判断是否修改过文件。</span><br></pre></td></tr></table></figure></p><font color="ff0000"><em>修改：</em></font><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css_comm'</span>, function() &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>([<span class="string">'1.css'</span>,<span class="string">'2.min.css'</span>,<span class="string">'3.css'</span>,<span class="string">'4.css'</span>])</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">'5.css'</span>)) <span class="comment">// 合并common.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(changed(<span class="string">'./beforebuild/6.css'</span>,&#123;<span class="attribute">hasChanged</span>: changed.compareLastModifiedTime&#125;)) <span class="comment">//对比中转beforebuild中的6.css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./beforebuild/6.css'</span>)) <span class="comment">// 先输出一遍</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev())    <span class="comment">// 加MD5后缀</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(cleanCss())   <span class="comment">//压缩css</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./build/css'</span>)) <span class="comment">// 压缩完</span></span><br><span class="line">        <span class="selector-class">.pipe</span>(rev.manifest())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./rev/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>关键之处在于添加了此两行对比代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.pipe</span>(changed(<span class="string">'./beforebuild/6.css'</span>,&#123;<span class="attribute">hasChanged</span>: changed.compareLastModifiedTime&#125;)) <span class="comment">//对比中转beforebuild中的6.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./beforebuild/6.css'</span>)) <span class="comment">// 先输出一遍</span></span><br></pre></td></tr></table></figure><br><br>changed根据先前输出的文件的最终修改时间进行比较文件是否改变<br><br>而如果有改变，再输出覆盖beforebuild中的6.css，同时继续执行后续压缩，加戳等命令，从而输出到build文件中的6.css<br><br><br>最终将相关指令划分为default、dev，用于区分开发环境，生产环境中所用不同。因为生产环境中需要执行’clean_build’指令中的所有文件清除过程。<br><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译8.png" alt="gulp增量编译8" title="gulp增量编译8"><br><br>依次对项目gulp中的文件如此处理，最终将构建均速由<font><strong>15s</strong></font>降低至<font><strong>4s</strong></font>。<br><br><br><font color="ff0000"><strong>前后对比：</strong></font><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译3.png" alt="gulp增量编译3" title="gulp增量编译3"></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译6.png" alt="gulp增量编译6" title="gulp增量编译6"></p><p>至此，gulp的增量编译初步完成。<br>后续仍然有一些代码优化的空间在，所以并不认为这是最终的优化结果。</p><font><strong>加油!</strong></font><hr><p>附上在gulp中文网，查看到的gulp增量编译，官方使用watch与cache进行的增量处理。</p><p>Gulp增量编译: <a href="https://www.gulpjs.com.cn/docs/recipes/incremental-builds-with-concatenate/" target="_blank" rel="noopener">gulp增量编译</a></p><p><img src="/2019/02/21/2019/Gulp增量编译优化/gulp增量编译9.png" alt="gulp增量编译9" title="gulp增量编译9"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript深浅拷贝</title>
      <link href="/2019/02/18/2019/JavaScript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/02/18/2019/JavaScript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>我们首先稍微复习一下有关JS中的数据类型及相关知识点</p><p>1-简单数据类型：Undefined，Null，Boolean，Symbol，Number，String</p><p>2-复杂数据类型：对象</p><p>简单数据类型保存在栈内存中</p><p>复杂数据类型即引用类型，保存于堆内存中；引用的类型值实际为指向对象的指针</p><p>这与我们今天所需要讲到的深浅拷贝有关😁</p><p><img src="/2019/02/18/2019/JavaScript深浅拷贝/深浅拷贝.jpg" alt="&quot;深浅拷贝.jpg&quot;" title="深浅拷贝.jpg"></p><a id="more"></a><p><strong><font color="ff0000">浅拷贝</font></strong></p><p>相当于我们复制了该对象或数组，然而该“指针”仍然指向原本内存空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'wsscat'</span>,</span><br><span class="line">  age:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj2[<span class="string">'c'</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "wsscat", age: 0, c: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">////Object &#123;name: "wsscat", age: 0, c: 5&#125;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，当我们改变obj2的[‘c’]时候，obj1会受到其影响</p><p><strong><font color="ff0000">深拷贝</font></strong></p><p><em>数组：</em><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>-slice()：</span><br><span class="line"></span><br><span class="line">var arr = [<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>];</span><br><span class="line">var arrCopy = arr.slice(<span class="number">0</span>);</span><br><span class="line">arrCopy[<span class="number">0</span>] = <span class="string">'tacssw'</span></span><br><span class="line">console.log(arr)//[<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line">console.log(arrCopy)//[<span class="string">'tacssw'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-concat():</span><br><span class="line"></span><br><span class="line">var arr = [<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>];</span><br><span class="line">var arrCopy = arr.concat();</span><br><span class="line">arrCopy[<span class="number">0</span>] = <span class="string">'tacssw'</span></span><br><span class="line">console.log(arr)//[<span class="string">'wsscat'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br><span class="line">console.log(arrCopy)//[<span class="string">'tacssw'</span>, <span class="string">'autumns'</span>, <span class="string">'winds'</span>]</span><br></pre></td></tr></table></figure></p><p><em>对象</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>-新建对象后遍历实现</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      name:<span class="string">'wsscat'</span>,</span><br><span class="line">      age:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj2.name = obj.name;</span><br><span class="line">obj2.age = obj.age</span><br><span class="line"></span><br><span class="line">obj.name = <span class="string">'autumns'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "autumns", age: 0&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">//Object &#123;name: "wsscat", age: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-封装好方法进行对象拷贝处理</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'wsscat'</span>,</span><br><span class="line">  age: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> source[key] === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result[key] = deepCopy(source[key])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result[key] = source[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = deepCopy(obj)</span><br><span class="line">obj.name = <span class="string">'autumns'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;name: "autumns", age: 0&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3);<span class="comment">//Object &#123;name: "wsscat", age: 0&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node+Express+Element实现文件上传下载</title>
      <link href="/2019/02/10/2019/Node-express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/02/10/2019/Node-express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>毕设的共享图书系统需要所运用到的，有关文件的上传、下载功能的实现，现在就总结一下记录在博客上：</p><p><strong>上传功能</strong></p><p><em>前端</em></p><p>上传所使用的element的upload组件<br><a id="more"></a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-upload class=<span class="string">"upload-demo"</span> ref=<span class="string">"upload"</span> action=<span class="string">""</span></span><br><span class="line">    :with-credentials=<span class="string">"true"</span></span><br><span class="line">    :<span class="keyword">on</span>-error=<span class="string">"handleError"</span></span><br><span class="line">    :limit=<span class="string">"1"</span></span><br><span class="line">    :before-upload=<span class="string">"beforeAvatarUpload"</span></span><br><span class="line">    :<span class="keyword">file</span>-<span class="keyword">list</span>=<span class="string">"fileList"</span></span><br><span class="line">    :http-request=<span class="string">"commintEditor"</span></span><br><span class="line">    :<span class="keyword">on</span>-exceed=<span class="string">"uploadExceed"</span></span><br><span class="line">    :<span class="keyword">on</span>-<span class="keyword">change</span>=<span class="string">"uploadChange"</span></span><br><span class="line">    :<span class="keyword">on</span>-<span class="built_in">remove</span>=<span class="string">"uploadRemove"</span></span><br><span class="line">    :auto-upload=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">el</span>-button slot=<span class="string">"trigger"</span> size=<span class="string">"small"</span> <span class="built_in">type</span>=<span class="string">"primary"</span>&gt;选取文件&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">    &lt;!-- &lt;<span class="keyword">el</span>-button style=<span class="string">"margin-left: 10px;"</span> size=<span class="string">"small"</span> <span class="built_in">type</span>=<span class="string">"success"</span> @click=<span class="string">"submitUpload"</span>&gt;上传到服务器&lt;/<span class="keyword">el</span>-button&gt; --&gt;</span><br><span class="line">    &lt;div slot=<span class="string">"tip"</span> class=<span class="string">"el-upload__tip"</span>&gt;只能上传jpg、pdf、doc文件，且不超过<span class="number">5</span>MB&lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-upload&gt;</span><br></pre></td></tr></table></figure></p><p>其中对一些钩子方法进行了定义，用于检验上传的设定大小，格式等…例如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">beforeAvatarUpload (file) &#123;</span><br><span class="line">      <span class="keyword">var</span> fileType = file.name.substring(file.name.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>)</span><br><span class="line">      console.log(fileType)</span><br><span class="line">      <span class="keyword">const</span> isJPG = fileType === <span class="string">'jpg'</span></span><br><span class="line">      <span class="keyword">const</span> iswordx = fileType === <span class="string">'docx'</span></span><br><span class="line">      <span class="keyword">const</span> isword = fileType === <span class="string">'doc'</span></span><br><span class="line">      <span class="keyword">const</span> ispdf = fileType === <span class="string">'pdf'</span></span><br><span class="line">      <span class="keyword">const</span> ispng = fileType === <span class="string">'png'</span></span><br><span class="line">      <span class="keyword">const</span> isLt5M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">5</span></span><br><span class="line">      <span class="keyword">if</span> (!isJPG &amp;&amp; !isword &amp;&amp; !ispdf &amp;&amp; !iswordx &amp;&amp; !ispng) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message.error(<span class="string">'上传只能是 jpg、png、doc、pdf 格式!'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isLt5M) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message.error(<span class="string">'上传图片大小不能超过 5MB!'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (isJPG || isword || ispdf || iswordx || ispng) &amp;&amp; isLt5M</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以上是对于文件格式，大小的检验</span></span><br></pre></td></tr></table></figure></p><p>在上传的函数中使用formdata的形式传输<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="built_in">append</span>(<span class="string">'file'</span>, <span class="variable">_file</span>)</span><br></pre></td></tr></table></figure></p><p>并且独立配置相应Axios的headers<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> config = &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p><em>后台</em></p><p>后台接收部分使用的是formidable模块，并为其设定服务器中的默认存储目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收文件</span></span><br><span class="line"><span class="selector-tag">var</span> formidable = require(<span class="string">'formidable'</span>)</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">form</span> = new formidable.IncomingForm()</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span><span class="selector-class">.uploadDir</span> = <span class="string">'./uploadFile'</span></span><br></pre></td></tr></table></figure><p>对文件的解析部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此模块解析请求信息，将json数据与文件数据分开为field、files两部分</span></span><br><span class="line">form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, field, files</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fields存放json数据，files存放的是文件信息</span></span><br><span class="line">  files.field = field</span><br><span class="line">  <span class="keyword">var</span> $params = files.field</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  我们可以识别若files存在，则进行存储写入的操作再后续进行数据库记录操作</span></span><br><span class="line">  <span class="comment">//  1</span></span><br><span class="line">  <span class="comment">//  如果有文件的情况下</span></span><br><span class="line">  <span class="keyword">if</span> (files.file) &#123;</span><br><span class="line">    <span class="comment">//  oldpath为解析请求中文件时存放的目录地址，我们目前需要将其重命名然后放入我们所需要的最终地址</span></span><br><span class="line">    <span class="keyword">let</span> oldpath = path.join(files.file.path)</span><br><span class="line">    <span class="comment">//  获取files相关属性</span></span><br><span class="line">    <span class="keyword">var</span> JsonFile = files.file</span><br><span class="line">    <span class="keyword">var</span> fileName = JsonFile.name</span><br><span class="line">    <span class="comment">//  新的目录，为了防止同名，再加上随机数</span></span><br><span class="line">    <span class="keyword">var</span> ranFileName = <span class="built_in">String</span>(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">8999</span> + <span class="number">10000</span>)).concat(fileName)</span><br><span class="line">    <span class="comment">//  新生成包含随机数的文件名与目录拼接的地址</span></span><br><span class="line">    newpath = path.join(<span class="string">'./uploadFile'</span>, ranFileName)</span><br><span class="line">    <span class="comment">//  利用fs模块进行文件重命名并且移动</span></span><br><span class="line">    fs.rename(oldpath, newpath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        result = &#123;</span><br><span class="line">          code: <span class="string">'1'</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">          &#125;,</span><br><span class="line">          msg: <span class="string">'新文章上传错误'</span></span><br><span class="line">        &#125;</span><br><span class="line">        jsonWrite(res, result)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`上传文件重命名错误<span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  进行数据库记录，newpath为移动后的目录记录</span></span><br><span class="line">        commitToSql(req, res, $params, newpath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  无文件的情况下，进行数据库记录</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//  进行数据库记录，newpath为移动后的目录记录</span></span><br><span class="line">    commitToSql(req, res, $params, newpath)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>于此，便完成了文件的上传记录（其余省略代码）</p><hr><p><strong>下载功能</strong></p><p><em>前端</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  利用window.open打开一个新的页面，并且发送相应的请求连接与参数</span></span><br><span class="line"><span class="comment">//  缺点：页面闪现</span></span><br><span class="line">lookArticle (index, row) &#123;</span><br><span class="line">  <span class="keyword">var</span> bookusername = row.username</span><br><span class="line">  <span class="keyword">var</span> booktitle = row.title</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">`/lookArticle?bookusername=<span class="subst">$&#123;bookusername&#125;</span>&amp;booktitle=<span class="subst">$&#123;booktitle&#125;</span>`</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><em>后台</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  分析相应文件名称</span></span><br><span class="line"><span class="selector-tag">var</span> fileName = <span class="variable">$params</span>.fileName</span><br><span class="line"><span class="comment">//  拼接后台服务器中文件的路径，以便使用</span></span><br><span class="line"><span class="selector-tag">var</span> currFile = path.join(__dirname, <span class="string">'../uploadFile/'</span> + fileName)</span><br><span class="line"><span class="comment">//  使用fs.exists判断文件是否存在，目前已经不推荐使用fs.exists</span></span><br><span class="line">fs.exists(currFile, function (exists) &#123;</span><br><span class="line">  <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">    console.log(<span class="string">'文件存在'</span>)</span><br><span class="line">    res.download(currFile)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;</span><br><span class="line">      <span class="selector-tag">code</span>: <span class="string">'1'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      msg: <span class="string">'文件不存在'</span></span><br><span class="line">    &#125;</span><br><span class="line">    jsonWrite.jsonWrite(res, result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>于此完成文件的下载功能<br>演示代码略为简单</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2019/02/08/2019/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
      <url>/2019/02/08/2019/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>今天是大年初四了，过去几天在热烈的气氛中，迎来了农历猪年，我也面临着大学四年的最后一个学期，珍惜!，希望新的一年的来临可以为自己带来不错的好运，在工作上顺利，自己一切的规划，也可以顺利的进行与实现。<strong>加油！</strong></p><p>也希望家人，朋友们，大家，新年快乐，心想事成，身体健康，万事如意。</p><p><img src="/2019/02/08/2019/新年快乐/timg.gif" alt="2019" title="2019"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node+MySQL释放数据库连接的Bug</title>
      <link href="/2019/02/02/2019/Node-MySQL%E9%87%8A%E6%94%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%9A%84Bug/"/>
      <url>/2019/02/02/2019/Node-MySQL%E9%87%8A%E6%94%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%9A%84Bug/</url>
      
        <content type="html"><![CDATA[<p>今天做毕业设计时，在前端业务中向后台请求用户数据时，每当请求次数超过五次，及以上时，总会卡死，于是，用简单的console判断代码停止位置，发现每次运行到pool.getConnection时第五次连接查询就会卡住，如图</p><p><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202195830.png" alt="五次运行停1" title="五次运行停1"></p><p>图一</p><p><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202195902.png" alt="五次运行停2" title="五次运行停2"></p><p>图二</p><p>于是乎就感觉是由于前次连接时的数据库连接没有释放的原因导致的，于是，在cmd中查看mysql的连接情况</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; mysqladmin -uroot -<span class="selector-tag">p</span> processlist</span><br></pre></td></tr></table></figure><a id="more"></a><p>再实验前端的请求时，数据库的连接情况</p><p><font color="7f7f7f"><em>没有连接请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200600.png" alt="没有连接请求" title="没有连接请求"></p><p><font color="7f7f7f"><em>第一次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200619.png" alt="第一次请求时" title="第一次请求时"></p><p><font color="7f7f7f"><em>第二次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200631.png" alt="第二次请求时" title="第二次请求时"></p><p><font color="7f7f7f"><em>第五次请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202200646.png" alt="第五次请求时" title="第五次请求时"></p><p>于是乎，得知了每一次请求时，后台的代码中总有两个数据库查询没有释放连接，从而导致，程序的中断</p><p>那接下来来检查一下代码：</p><p><font color="ff0000">简略的写，代码如下</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getAlluserTotalPromise = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise2 = <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> <span class="params">(err, connection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(result)</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query($sql.userCenter.getuserTotal, [], (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          connection.release()</span><br><span class="line">          reject(result)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过走查发现，我们在执行if-else逻辑时，对于else时的流程中忘记添加数据库释放了，以及后来采用了新的方式是否数据库连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pool</span><span class="selector-class">.releaseConnection</span>(<span class="selector-tag">connection</span>)</span><br></pre></td></tr></table></figure><p>于是我们就将代码改为了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getAlluserTotalPromise = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise2 = <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> <span class="params">(err, connection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(result)</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query($sql.userCenter.getuserTotal, [], (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 修改位置</span></span><br><span class="line">          reject(result)</span><br><span class="line">          pool.releaseConnection(connection)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 修改位置</span></span><br><span class="line">          resolve(result)</span><br><span class="line">          pool.releaseConnection(connection)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后我们再一遍遍发送请求，查看数据库的连接情况，发现这时候数据库的连接释放就正常了</p><p><font color="7f7f7f"><em>正常请求时</em></font><br><img src="/2019/02/02/2019/Node-MySQL释放数据库连接的Bug/QQ截图20190202201843.png" alt="正常请求时" title="正常请求时"></p><p>就把今天的Bug解决了，路漫漫，以后还会多着呢，也算是自己的粗心大意导致的，希望以后解决问题的能力更加厉害有所提升，节约时间</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> MySQL </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>transform父元素对fixed子元素的影响</title>
      <link href="/2019/02/02/2019/transform%E5%AF%B9fixed/"/>
      <url>/2019/02/02/2019/transform%E5%AF%B9fixed/</url>
      
        <content type="html"><![CDATA[<p>在应用了属性transform的父元素上，若其拥有fixed属性的子元素，则该子元素的fixed属性讲失效，并将以其父元素为定位基准</p><p>详情请看例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.mid</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin: 20px;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  transform: translate(0, 0);</span></span><br><span class="line"><span class="undefined">  background: greenyellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: fixed;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  background: pink;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码所呈现的布局样式：</p><p><img src="/2019/02/02/2019/transform对fixed/20181120224139596.png" alt="transform" title="transform"></p><a id="more"></a><p>若我们删除去父元素的transform属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.mid</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin: 20px;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  background: greenyellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: fixed;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  background: pink;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/02/02/2019/transform对fixed/20181120224251281.png" alt="transform2" title="transform2"></p><p>由此可见，其父元素的transform对fixed子元素的影响；</p><p>注，此实例在chorme以及firefox下有效，IE环境等不受影响</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件间的通信</title>
      <link href="/2019/02/02/2019/Vue%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/02/02/2019/Vue%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<font color="ff0000"><strong>父 –&gt; 子</strong></font><p>父组件向子组件传递，利用props属性<br><a id="more"></a><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">父组件</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 通过为子组件绑定属性 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">:parentToChild</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span>             </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  data () &#123;</span></span><br><span class="line"><span class="template-variable">    return &#123;</span></span><br><span class="line"><span class="template-variable">      value1:'父组件的值传给子组件'</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  components: </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  mounted () </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  watch: </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  methods: </span><span class="template-variable">&#123;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      valueFromParent:<span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 子组件通过props可以拿到父组件传递的值</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'parentToChild'</span>],</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 倘若需要与data中绑定的数据项应，则在watch中做监视</span></span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="string">'parentToChild'</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.valueFromParent = <span class="keyword">this</span>.parentToChild</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><font color="ff0000"><strong>子 –&gt; 父</strong></font><p>利用emit方法，绑定触发事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickEvent"</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      value1:<span class="string">'这是要传给父组件的值'</span>,</span></span><br><span class="line"><span class="actionscript">      value2:<span class="string">'可以传多个值'</span>,</span></span><br><span class="line"><span class="actionscript">      value3:<span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  props: [],</span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    clickEvent()&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 通过绑定事件，触发emit</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'sendValueToParent'</span>,<span class="keyword">this</span>.value1,</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.value2,<span class="keyword">this</span>.value3,<span class="literal">true</span>);    </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created()&#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 绑定事件触发getValueFromChild  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> @<span class="attr">sendValueToParent</span> = <span class="string">"getValueFromChild"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 触发的事件</span></span></span><br><span class="line"><span class="undefined">    getValueFromChild(value1,value2,value3,value4)&#123;                             &lt;-----关键</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//打印值分别是</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value1: 这是要传给父组件的值</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value2: 可以传多个值</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value3: false</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//value4: true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created()&#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就是父子组件相互传递值得大致行为</p><p>大致可以用于：例<br>分页器组件与父组件的关系</p><p><img src="/2019/02/02/2019/Vue父子通信/vue.jpg" alt="vue父子组件" title="vue父子组件"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios使用</title>
      <link href="/2019/01/31/2019/Axios%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/31/2019/Axios%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这几天临近过年，实习的公司也从25号开始放假了，好好休整了几天，摸鱼做做毕业设计，也还有几天就要过年了，但时间紧迫，毕业，工作的各种事情也都将棘手起来，所以还是不能闲太久呢，要有所紧迫感…</p><p>今天零星总结一下之前笔记中的Axios的使用方法:<br><a id="more"></a></p><hr><font color="ff0000"><em>get</em></font><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">  ID: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>post</em></font><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  firstName: <span class="string">'Fred'</span>,</span><br><span class="line">  lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios API</em></font><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可使用下列配置方法请求axios(config)</span></span><br><span class="line"><span class="selector-tag">axios</span>(&#123;</span><br><span class="line"><span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line"><span class="attribute">url</span>: <span class="string">'/user/12345'</span>,</span><br><span class="line"><span class="attribute">data</span>: &#123;</span><br><span class="line">    <span class="attribute">firstName</span>: <span class="string">'Fred'</span>,</span><br><span class="line">    <span class="attribute">lastName</span>: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span>(url[, config])</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span>(<span class="string">'/user/12345'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以及几种其他的请求别名: </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.request</span>(config)    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.get</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.delete</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.head</span>(url[, config])    </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.post</span>(url[, data[, config]])</span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.put</span>(url[, data[, config]])  </span><br><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.patch</span>(url[, data[, config]])</span><br></pre></td></tr></table></figure><font color="ff0000"><em>多个Axios的执行</em></font><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="keyword">all</span>(iterable)</span><br><span class="line">axios.spread(callback)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getUserAccount</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">axios.get('/user/12345')</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getUserPermissions</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">axios.get('/user/12345/permissions')</span>;&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="keyword">all</span>([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .<span class="keyword">then</span>(axios.spread(<span class="keyword">function</span> <span class="title"></span>(acct, perms) &#123;</span><br><span class="line">  // 两个请求现在都执行完成</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios请求的配置项</em></font><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">'url'</span>  <span class="comment">// 请求的url</span></span><br><span class="line">    <span class="attribute">method</span>: <span class="string">'get'</span>  <span class="comment">//  请求的方法</span></span><br><span class="line">    <span class="attribute">baseURL</span>: <span class="string">'url'</span>  <span class="comment">//  将baserURL加在url前边，便于axios传递为相对URL </span></span><br><span class="line">    <span class="attribute">transformRequest</span>: [function (data) &#123;</span><br><span class="line">        return data</span><br><span class="line">    &#125;] <span class="comment">//允许向服务器发送数据前，修改请求的数据，只限于 'PUT','POST','PATCH'请求方法</span></span><br><span class="line">    <span class="attribute">transformRequest</span>: [function (data) &#123;</span><br><span class="line">        return data</span><br><span class="line">    &#125;] <span class="comment">//允许向服务器响应数据后，数据传递给then/catch前，修改响应数据</span></span><br><span class="line">    <span class="attribute">headers</span>: &#123;<span class="string">''</span>X-Requested-With<span class="string">': '</span>XMLHttpRequest<span class="string">''</span>&#125;  <span class="comment">//自定义请求头</span></span><br><span class="line">    <span class="attribute">params</span>: &#123;</span><br><span class="line">        <span class="attribute">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;  <span class="comment">// 将发送的URL参数</span></span><br><span class="line">    <span class="attribute">paramsSerializer</span>: function (params) &#123;</span><br><span class="line">        return Qs.stringify(params, &#123;<span class="attribute">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">    &#125;   <span class="comment">// 负责序列化 params，为什么？-&gt;看解决问题1、，所以需要序列化</span></span><br><span class="line">    <span class="attribute">data</span>: &#123;</span><br><span class="line">        <span class="attribute">firstName</span>: <span class="string">'Fred'</span>   <span class="comment">// 作为请求主体发送的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">timeout</span>: <span class="number">1000</span>   <span class="comment">// 指定请求超时的时间数，超时将中断</span></span><br><span class="line">    <span class="attribute">withCredentials</span>: false  <span class="comment">//跨域时是否需要凭证</span></span><br><span class="line">    </span><br><span class="line">    以及其余众多方法...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="ff0000"><em>params与data</em></font><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">params</span>与<span class="class"><span class="keyword">data</span>的区别？：</span></span><br><span class="line"></span><br><span class="line"><span class="title">params</span>是添加到url的请求字符串的，用于get请求</span><br><span class="line"><span class="class"><span class="keyword">data</span>是添加到body中的，用于post请求</span></span><br></pre></td></tr></table></figure><font color="ff0000"><em>Axios请求的结构</em></font><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">response-&gt;<span class="symbol">:</span>响应结构</span><br><span class="line">&#123;</span><br><span class="line">  /<span class="regexp">/ `data` 由服务器提供的响应</span></span><br><span class="line"><span class="regexp">  data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line"><span class="regexp">  status: 200,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line"><span class="regexp">  statusText: 'OK',</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `headers` 服务器响应的头</span></span><br><span class="line"><span class="regexp">  headers: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `config` 是为请求提供的配置信息</span></span><br><span class="line"><span class="regexp">  config: &#123;&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><font color="ff0000"><em>axios.create创建实例</em></font><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 自定义创造一个axios的实例，这样亦可以与默认的axios区分开来</span><br><span class="line">var<span class="built_in"> instance </span>= axios.create(&#123;</span><br><span class="line">  baseURL: 'https://api.example.com'</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><font color="ff0000"><em>axios拦截器</em></font><p>可统一在请求发送时或者接收时做网络的统一处理，例如响应的404等错误处理，而不用交由每一个请求响应来做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Axios </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript bind的模拟实现</title>
      <link href="/2019/01/24/2019/JSbind%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/01/24/2019/JSbind%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>今天在mqyqingfeng<a href="https://github.com/mqyqingfeng/Blog/issues/12#" target="_blank" rel="noopener">点击这里</a>的githubBlog上看到有关JS的bind的模拟实现，于是也跟着一起实现了一遍，需要更加详细的了解的话，也建议前往前辈的Blog学习，感谢。</p><p>以下是我学习后进行模拟的实现方式。</p><a id="more"></a><hr><font color="ff0000"><strong>bind函数</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo)</span><br><span class="line"><span class="comment">// bind不会立即执行</span></span><br><span class="line">bindFoo(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><br><br>我们可以总结得到，bind函数不同于call、apply，它会返回一个未执行的函数，并且等待你的执行<br><br>于是我们根据此做出第一版模拟<br><br>—<br><br><font color="ff0000"><strong>第一版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.apply(context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = bar.bind2(foo)</span><br><span class="line">result(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>上面我们模拟出来对于this的指向问题，接下来，我们继续对它的传递参数进行处理</em></font><font color="7f7f7f"><em>我们先来看一下原生bind的处理与效果</em></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  Jayant</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此处传了部分参数</span></span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo, <span class="string">'Jayant'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再传部分参数</span></span><br><span class="line">bindFoo(<span class="number">23</span>)</span><br></pre></td></tr></table></figure><hr><font color="ff0000"><strong>第二版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind3 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 先接受一遍第一次的参数，</span></span><br><span class="line">    <span class="comment">// 第二次调用时传递的在return的function中处理</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="comment">// 处理传入的参数;</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(context, args.concat(bindArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>我们选择将参数在其中划分出来，二步处理，完成了bind参数问题</em></font><hr><p><font color="ff0000"><strong>最终版</strong></font></p><p><font color="7f7f7f"><em>处理有关bind函数的new问题</em></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind4 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="keyword">this</span> : context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">    fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSapply模拟</title>
      <link href="/2019/01/23/2019/JSapply%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/01/23/2019/JSapply%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>我们上一节讨论了call函数的实现，按图索骥，apply函数的实现也是类似的</p><a id="more"></a><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply模拟</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.apply_ = <span class="function"><span class="keyword">function</span> (<span class="params">obj, arr</span>) </span>&#123;</span><br><span class="line">    obj = obj ? <span class="built_in">Object</span>(obj) : <span class="built_in">window</span>;</span><br><span class="line">    obj.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">        result = obj.fn();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="comment">// 注意这里的i从0开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            args.push(<span class="string">"arr["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">"obj.fn("</span> + args + <span class="string">")"</span>); <span class="comment">// 执行fn</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">delete</span> obj.fn; <span class="comment">//删除fn</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript call的模拟实现</title>
      <link href="/2019/01/23/2019/JScall%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/01/23/2019/JScall%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>今天在mqyqingfeng<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">点击这里</a>的githubBlog上看到有关JS的call的模拟实现，于是也跟着一起实现了一遍，需要更加详细的了解的话，也建议前往前辈的Blog学习，感谢。</p><p>以下是我学习后进行模拟的实现方式。</p><a id="more"></a><hr><font color="ff0000"><strong>call的使用</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name) <span class="comment">// Jayant</span></span><br><span class="line">  <span class="built_in">console</span>.log(age)  <span class="comment">// 23</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call(foo,<span class="string">'Jayant'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><br><br><font color="7f7f7f"><em>如果将bar()作为foo的属性：</em></font><p>那么我们也可以完成其this的改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将bar作为属性放在foo上</span></span><br><span class="line">foo.bar();</span><br></pre></td></tr></table></figure></p><p>那么按照此思路，我们是不是也可以将大致的行为抽象称为<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋给属性--执行它--删除它</span></span><br><span class="line">foo.<span class="keyword">fn</span> = bar()</span><br><span class="line">foo.<span class="keyword">fn</span>()</span><br><span class="line">delete foo.<span class="keyword">fn</span></span><br></pre></td></tr></table></figure></p><font color="7f7f7f"><em>于是我们根据我们的思路，实现第一版绑定实现：</em></font><hr><font color="ff0000"><strong>第一版:</strong></font><p>我们选择将该函数定义在Function原型上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    context.fn();</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line">bar.call2(foo)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><font color="7f7f7f"><em>我们在call2函数上将this赋予了context的fn属性，并且在执行之后删除它</em></font><hr><font color="7f7f7f"><em>其次call中还有参数的问题，按照我们的第一版实现，我们并不能传入参数</em></font><font color="7f7f7f"><em>于是我们进一步进行参数的处理</em></font><font color="ff0000"><strong>第二版</strong></font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call3 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为此处的arguments里边有参数,剥夺第一个的context方法,其余就是参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>,len=<span class="built_in">arguments</span>.length;i&lt;len;i++)&#123;</span><br><span class="line">        args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--关键在于上边对于<span class="built_in">arguments</span>参数的提取--&gt;</span><br><span class="line"></span><br><span class="line">    context.fn(...args);</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  jayant2</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//  1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call3(foo,<span class="string">'jayant2'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>于是我们完成了call3函数内的参数定义，传递问题</em></font><hr><font color="ff0000"><strong>第三版</strong></font><font color="7f7f7f"><em>第三版，进行了函数的具体完善，this为空的情况，指向null，将值返回的情况</em></font><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call4 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    &lt;!--此处进行了传入<span class="keyword">this</span>是否为空的情况--&gt;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="comment">// 因为此处的arguments里边有参数,剥夺第一个的context方法,其余就是参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>,len=<span class="built_in">arguments</span>.length;i&lt;len;i++)&#123;</span><br><span class="line">        args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = context.fn(...args);</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    &lt;!--进行了返回值处理--&gt;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)   <span class="comment">//  jayant2</span></span><br><span class="line">    <span class="built_in">console</span>.log(age)    <span class="comment">// 23</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">//  1</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call4(foo,<span class="string">'jayant4'</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em>至此，以上就是进行call模拟的大致过程</em></font><p><img src="/2019/01/23/2019/JScall模拟/JScall.jpg" alt="庭院海边" title="庭院海边"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript继承</title>
      <link href="/2019/01/23/2019/JavaScript%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/01/23/2019/JavaScript%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>前几天整理了有关<strong>JavaScript继承</strong>的几种方式，今天就一并的从印象笔记中整理上来。</p><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><a id="more"></a><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.property = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subproperty = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处继承</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()                </span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处也在原型中写了自己的getSubValue方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line">alert(instance.getSuperValue)        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处重新定义了超类型中的该方法</span></span><br><span class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">alert(instance.getSuperValue())    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>缺陷：</p><ol><li>多个实例对引用类型的操作会被篡改。</li></ol><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function SuperType () &#123;</span><br><span class="line">    this<span class="selector-class">.colors</span> = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType() &#123;</span><br><span class="line">    <span class="comment">//继承SuperType，此处继承/借助构造函数</span></span><br><span class="line">    SuperType.call(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance1 = new SubType()</span><br><span class="line">instance1<span class="selector-class">.colors</span><span class="selector-class">.push</span>(<span class="string">'black'</span>)</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.colors)</span></span>    <span class="comment">//'red','blue','green','black'</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance2 = new SubType()</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance2.colors)</span></span>    <span class="comment">//'red','blue','green'</span></span><br></pre></td></tr></table></figure><p><em>如何传递参数？</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType() &#123;</span><br><span class="line">    <span class="comment">// 此处继承，并传递具体name值</span></span><br><span class="line">    SuperType.call(this, <span class="string">'Jayant'</span>)    </span><br><span class="line">    this<span class="selector-class">.age</span> = <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> instance = new SubType()</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.name)</span></span>    <span class="comment">// Jayant</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance.age)</span></span>    <span class="comment">//29</span></span><br></pre></td></tr></table></figure><p>缺陷：</p><ol><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li></ol><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>结合原型链与构造函数，思路为：使用原型链实现对原型属性和方法的继承，又实用构造函数实现对实例属性的继承</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">    this<span class="selector-class">.colors</span> = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType<span class="selector-class">.prototype</span><span class="selector-class">.sayName</span> = function() &#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType(name, age) &#123;</span><br><span class="line">    <span class="comment">// 构造继承属性   第一次调用SuperType</span></span><br><span class="line">    SuperType.call(this,name)</span><br><span class="line">    this<span class="selector-class">.age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承  第二次调用SuperType</span></span><br><span class="line">SubType<span class="selector-class">.prototype</span> = new SuperType()    </span><br><span class="line"></span><br><span class="line">SubType<span class="selector-class">.prototype</span><span class="selector-class">.constructor</span> = SubType</span><br><span class="line"></span><br><span class="line">SubType<span class="selector-class">.prototypr</span><span class="selector-class">.sayAge</span> = function() &#123;</span><br><span class="line">    alert(this.age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> instance1 = new SubType(<span class="string">'Jayant'</span>, <span class="number">23</span>)</span><br><span class="line">instance1<span class="selector-class">.colors</span><span class="selector-class">.push</span>(<span class="string">'black'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance1.colors)</span></span>    <span class="comment">//'red','blue','green',black'</span></span><br><span class="line">instance1.sayName()        <span class="comment">//Jayant</span></span><br><span class="line">instance1.sayAge()        <span class="comment">// 23</span></span><br><span class="line"></span><br><span class="line">vat instance2 = new SubType(<span class="string">'Grey'</span>, <span class="number">27</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(instance2.colors)</span></span>    <span class="comment">//'red','blue','green'</span></span><br><span class="line">instance2.sayName()       <span class="comment">// 'Grey'</span></span><br><span class="line">instance2.sayAge()        <span class="comment">//27</span></span><br></pre></td></tr></table></figure><p>组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承<br>缺点：</p><ol><li>第一次调用SuperType()，给SubType.prototype写入两个属性name，color；</li><li>第二次调用SuperType()，给instance写入两个name，color</li></ol><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'1'</span>,</span><br><span class="line">    friends: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">'Greg'</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">'rob'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secondPerson = object(person);</span><br><span class="line">secondPerson.name = <span class="string">'Sreg'</span>;</span><br><span class="line">secondPerson.friends.push(<span class="string">'Sob'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(anotherPerson.friends); <span class="comment">//  '1', '2', '3', 'rob', 'Sob'</span></span><br></pre></td></tr></table></figure><p>缺陷：</p><ol><li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</li><li>无法传递参数</li></ol><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnthor</span><span class="params">(original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">clone</span> = object(original)</span><br><span class="line">    <span class="comment">// 添加新方法</span></span><br><span class="line">    <span class="keyword">clone</span>.sayHi = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        alert(<span class="string">'Hi'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">clone</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上边例子中，createAnther()函数接收一个参数，将要作为新对象基础的对象，然后将对象(original)传递给object()函数，将返回的结果赋值给Clone<br>再为clone对象添加一个新方法sayHi()，最后返回给clone对象。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Nicholas'</span>,</span><br><span class="line">    friends: [<span class="string">'shelby'</span>, <span class="string">'court'</span>, <span class="string">'van'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> anthorPerson = createAnther(person)</span><br><span class="line">antherPerson.sayHi()        <span class="comment">//Hi</span></span><br></pre></td></tr></table></figure><p>在原型式继承的基础上，增强对象，返回构造函数。</p><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>为避免如同组合继承的方式，会调用两次超类型构造函数，衍生出了寄生组合继承方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function inheritPrototype(subType, superType) &#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="selector-tag">var</span> prototype = object(superType.prototype)</span><br><span class="line">    <span class="comment">//增强对象</span></span><br><span class="line">    prototype<span class="selector-class">.constructor</span> = subType                 </span><br><span class="line">    <span class="comment">//指定对象</span></span><br><span class="line">    subType<span class="selector-class">.prototype</span> = prototype   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">(name, age)</span> </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType)</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="7f7f7f"><em><br>优势在于只调用一次父类构造函数，并且将子构造函数，父构造函数传入方法中，复制一遍父类型的原型，并为其添加constructor属性</em></font><h4 id="ES6-Extends"><a href="#ES6-Extends" class="headerlink" title="ES6 Extends"></a>ES6 Extends</h4>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript创建对象</title>
      <link href="/2019/01/23/2019/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/01/23/2019/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>前几天整理了有关<strong>JavaScript创建对象</strong>的几种方式，今天就一并的从印象笔记中整理上来。</p><hr><p><font color="ff0000"><strong>工厂模式</strong></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job) &#123;</span><br><span class="line">    <span class="selector-tag">var</span> o = new Object()</span><br><span class="line">    o<span class="selector-class">.name</span> = name</span><br><span class="line">    o<span class="selector-class">.age</span> = age</span><br><span class="line">    o<span class="selector-class">.job</span> = job</span><br><span class="line">    o<span class="selector-class">.sayName</span> = function () &#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">    return o</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1= createPerson(<span class="string">'jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br><span class="line"><span class="selector-tag">var</span> person2 = createPerson(<span class="string">'esss'</span>, <span class="number">22</span>, <span class="string">'**'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为方法中已经new了一个object了，所以我们不需要new它</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><font color="ff0000"><strong>构造函数模式</strong></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        alert (<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'esss'</span>, <span class="number">22</span>, <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure></p><p><em>构造函数Person与工厂模式createPerson的区别：</em></p><ul><li>没有显式创建对象，内部new Object</li><li>直接将属性赋予this对象</li><li>没有return 语句</li></ul><p><em>如果需要使用构造函数生成一个Person实例，则我们需要new一下，new一个对象会经历以下过程：</em></p><ul><li>创建一个新对象</li><li>将构造函数作用域赋予新对象，也就是this</li><li>执行构造函数中的代码</li><li>返回新对象</li></ul><p><em>构造函数的<font color="7f7f7f">不足之处</font>：</em></p><p>person1与person2中每个实例都有一个这个方法，都需要创建一遍，<font color="7f7f7f">造成内存上的浪费</font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">alert(person1.sayName == person2.sayName)　　<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>于是又根据此不足之处衍生出以下方法：</p><p><font color="7f7f7f"><em>构造函数的优化：</em></font><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> <span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1、将共有方法定义在全局上，2、函数多的话，要定义多</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这个操作又会造成如果函数很多，需要定义很多方法；并且是定义成为了全局函数，这完全不需要</p><hr><p><font color="ff0000"><strong>原型模式</strong></font></p><p><font color="7f7f7f"><em>每个函数都有一个prototype属性，是一个指针，为了使所有实例可以共享到属性和方法，从而不必在构造函数中定义</em></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义在原型上</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.name</span> = <span class="string">'Jayant'</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.age</span> = <span class="number">23</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.job</span> = <span class="string">'web'</span></span><br><span class="line">Person<span class="selector-class">.prototype</span><span class="selector-class">.sayName</span> = function() &#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1 = new Person()</span><br><span class="line">person1.sayName()    <span class="comment">//Jayant</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> person2 = new Person()</span><br><span class="line">person2.sayName()    <span class="comment">//Jayant</span></span><br></pre></td></tr></table></figure></p><p><em><font color="7f7f7f">好处：</font></em> 公共方法，属性可以共用，同时是定义在其构造函数原型上的</p><p><em><font color="7f7f7f">不足：</font></em> 是过于共享，以至于所有的实例都拥有相同的方法，实例了</p><p><font color="7f7f7f">例如：</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1<span class="selector-class">.age</span> = <span class="number">100</span></span><br><span class="line">person2<span class="selector-class">.age</span> <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>组合使用构造函数模式与原型模式</strong></font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">    this<span class="selector-class">.age</span> = age</span><br><span class="line">    this<span class="selector-class">.friends</span> = [<span class="string">'乾隆'</span>, <span class="string">'康熙'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Person<span class="selector-class">.prototype</span> = &#123;</span><br><span class="line">    constructor: Person</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person1 = new Person()</span><br><span class="line"><span class="selector-tag">var</span> person2 = new Person()</span><br><span class="line">person1<span class="selector-class">.friends</span><span class="selector-class">.push</span>(<span class="string">'嬴政'</span>)</span><br><span class="line">person1<span class="selector-class">.friends</span>    <span class="comment">//乾隆，康熙，嬴政</span></span><br><span class="line">person2<span class="selector-class">.friends</span>    <span class="comment">//乾隆，康熙</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//认可度，使用最广泛的一种创建对象方式</span></span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>寄生构造函数模式</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.name = name</span><br><span class="line">    o.age = age</span><br><span class="line">    o.job = job</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><p><font color="7f7f7f"><em>工厂模式</em></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.name = name</span><br><span class="line">    o.age = age</span><br><span class="line">    o.job = job</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><p><em>寄生构造函数与工厂模式的区别</em><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生构造函数</span></span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)  </span><br><span class="line"><span class="comment">// 工厂模式 </span></span><br><span class="line"><span class="keyword">var</span> friend = Person(<span class="string">'Jayant'</span>, <span class="number">23</span>, <span class="string">'web'</span>)</span><br></pre></td></tr></table></figure></p><hr><p><font color="ff0000"><strong>稳妥构造函数模式</strong></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">'jayant'</span>, <span class="number">23</span>)</span><br><span class="line">person.sayName()    <span class="comment">//jayant</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了调用sayName方法，没办法获取其数据成员，某种情况下安全性 up up</span></span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关命令</title>
      <link href="/2019/01/23/2019/Git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/23/2019/Git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>将自己工作中所整理出来的常用Git命令于此总结一下</p><a id="more"></a><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">// 添加文件至区域</span><br><span class="line">git add . </span><br><span class="line"></span><br><span class="line">// 提交文件至本地仓库</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">// 查看目前工作状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">// 在添加之前可以查看修改的记录</span><br><span class="line">git diff </span><br><span class="line"></span><br><span class="line">// 查看提交的log</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">// 查看精简的提交log</span><br><span class="line">git log --pretty=oneline   </span><br><span class="line"></span><br><span class="line">// 恢复本地分支至HEAD^</span><br><span class="line">git reset --hard HEAD^   </span><br><span class="line"></span><br><span class="line">// 重置本地分支至某分支</span><br><span class="line">git reset --hard 956d...   </span><br><span class="line"></span><br><span class="line">// 切换到xx分支</span><br><span class="line">git checkout branch   </span><br><span class="line"></span><br><span class="line">// 本地创建xx分支</span><br><span class="line">git checkout -b branch   </span><br><span class="line"></span><br><span class="line">// 查看当前远程库</span><br><span class="line">git remote -v   </span><br><span class="line"></span><br><span class="line">// 查看所有分支</span><br><span class="line">git remote -a</span><br><span class="line"></span><br><span class="line">// 将目前origin连接为xxx的远程</span><br><span class="line">git remote add origin https://xxx   </span><br><span class="line"></span><br><span class="line">// 克隆某仓库至本地</span><br><span class="line">git clone http: //xxx    </span><br><span class="line"></span><br><span class="line">// 删除本地某分支</span><br><span class="line">git branch -d branch   </span><br><span class="line"></span><br><span class="line">// 删除远程某分支</span><br><span class="line">git push origin --delete branch   </span><br><span class="line"></span><br><span class="line">// 查看本地有的分支</span><br><span class="line">git branch   </span><br><span class="line"></span><br><span class="line">// 查看远程有的分支</span><br><span class="line">git branch -r   </span><br><span class="line"></span><br><span class="line">// 查看log的流程分支图</span><br><span class="line">git log --graph   </span><br><span class="line"></span><br><span class="line">// 拉取本地没有的远程某分支</span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名   </span><br><span class="line"></span><br><span class="line">// 切换与拉取最新分支</span><br><span class="line">git checkout maste  git pull --rebas </span><br><span class="line">git checkout branchxxx </span><br><span class="line"></span><br><span class="line">// 提交作为一次记录，MERGE修改完成后</span><br><span class="line">：git add .   git commit  </span><br><span class="line"></span><br><span class="line">// REBASE修改完成后，提交继续</span><br><span class="line">：git add &lt;filename&gt; git rebase --continue</span><br><span class="line"></span><br><span class="line">// 储藏工作现场</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">// 查看储藏的工作现场</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">// 恢复应用工作现场</span><br><span class="line">git stash apply xxx</span><br><span class="line"></span><br><span class="line">// 删除第一个工作现场</span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><h5 id="流程式操作"><a href="#流程式操作" class="headerlink" title="流程式操作"></a>流程式操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- 创建feature分支：</span><br><span class="line">git checkout master </span><br><span class="line">git ckeckout -b feature-s16 </span><br><span class="line">git push  </span><br><span class="line">//再根据base提示信息，将本地分支连接上origin上该分支</span><br><span class="line"></span><br><span class="line">- 在feature上进行开发：</span><br><span class="line">git add xxx</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">- 若为多人协同开发更新分支，有rebase冲突：</span><br><span class="line">// 拉取并合并远程该分支</span><br><span class="line">git pull --rebase  </span><br><span class="line">// 此两个命令为合并有冲突时，解决冲突后的继续合并命令</span><br><span class="line">git add .  git rebase --continue    </span><br><span class="line"></span><br><span class="line">- 完成feature开发：</span><br><span class="line">git checkout dev</span><br><span class="line">// 本地切换至dev分支后，拉取远端最新的dev分支代码</span><br><span class="line">git pull --rebase  </span><br><span class="line"></span><br><span class="line">- 再将feature分支合并到dev分支上：</span><br><span class="line">git merge --no-ff feature-s16 </span><br><span class="line">// 将合并后的dev分支推上远端</span><br><span class="line">git push origin dev  </span><br><span class="line"></span><br><span class="line">- 再将fev分支合并至master分支上：</span><br><span class="line">git merge --no-ff dev </span><br><span class="line">// 将合并后的master分支推上远端</span><br><span class="line">git push origin master  </span><br><span class="line"></span><br><span class="line">- 一段时间后删除feature分支：</span><br><span class="line">git branch -d feature-s16</span><br><span class="line">// 删除远端该分支</span><br><span class="line">git push origin --delete feature-s16  </span><br><span class="line"></span><br><span class="line">- 若merge --no-ff合并有冲突：</span><br><span class="line">// 将自动提交一个合并记录</span><br><span class="line">git add .  git commit</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/2019/Git相关命令/Git.jpg" alt="竹林小道" title="竹林小道"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2019/01/22/2019/hello-world/"/>
      <url>/2019/01/22/2019/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到JAYANT BLOG! .</p><h2 id="开头语"><a href="#开头语" class="headerlink" title="开头语"></a>开头语</h2><p>跟随着网上的多种搭建方式，搭建除了属于自己的hexo博客，兴奋之余也非常期待我能给予这个博客不同的“知识”生命力，也期待我所记录下的多种多样，各方各面的博文内容可以给来到这个网站上的朋友们带来帮助</p><p>之后也将陆陆续续将之前的博文迁移过来；</p><p><img src="/2019/01/22/2019/hello-world/MyPic.png" alt="心中藏之无日忘之" title="心中藏之，无日忘之"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常碎碎 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
